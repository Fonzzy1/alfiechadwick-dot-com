<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Alfie Chadwick</title>
        <link>/post/</link>
        <description>Recent content in Posts on Alfie Chadwick</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 03 Feb 2024 00:00:00 +0000</lastBuildDate>
        <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>A Follow Up on my Hottest 100 Predictions</title>
            <link>/2024/02/03/a-follow-up-on-my-hottest-100-predictions/</link>
            <pubDate>Sat, 03 Feb 2024 00:00:00 +0000</pubDate>
            
            <guid>/2024/02/03/a-follow-up-on-my-hottest-100-predictions/</guid>
            <description>In my last post I ended by planting my flag and making my predictions for the Hottest 100 for 2023. And on first glance, I&amp;rsquo;m pretty happy with myself, picking not only the top song, but a good chunk of the top 20. So today I just want to do a quick follow up on how I did.
Top 20  Song Artist Predicted 1 paint the town red doja cat 1 2 the worst person alive g flip 55 3 saving up dom dolla NA 4 rhyme dust mk 72 5 prada cass 90 6 adore u fred again 40 7 what was i made for?</description>
            <content type="html"><![CDATA[<p>In my <a href="../../../2024/01/26/predicting-the-2023-hottest-100/">last post</a> I ended by planting my flag and making my predictions for the Hottest 100 for 2023. And on first glance, I&rsquo;m pretty happy with myself, picking not only the top song, but a good chunk of the top 20. So today I just want to do a quick follow up on how I did.</p>
<h1 id="top-20">Top 20</h1>
<pre><code>                     Song         Artist Predicted
1      paint the town red       doja cat         1
2  the worst person alive         g flip        55
3               saving up      dom dolla        NA
4              rhyme dust             mk        72
5                   prada           cass        90
6                 adore u     fred again        40
7    what was i made for?  billie eilish         3
8                    rush    troye sivan        10
9             lovin on me    jack harlow        17
10               chemical    post malone        14
11                vampire olivia rodrigo         2
12                 rumble       skrillex        NA
13              kill bill            sza         9
14             atmosphere         fisher        NA
15                 nanana      peggy gou         5
16               sprinter           dave         4
17             back on 74         jungle        NA
18           eat your man      dom dolla        NA
19                therapy       budjerah        NA
20          sorry instead    spacey jane        NA
</code></pre>
<p>The top 10 seems okay, but i did miss a lot of the top 20 completely. I seemed to be undervaluing Australian artists such as Dom Dolla, Spacey Jane, and G Flip, as well as EDM as a genre, which made up a much greater portion of the top 20 than I predicted.</p>
<h1 id="snubbed-songs">Snubbed Songs</h1>
<pre><code>                      Song                Artist Predicted
1                love type              poolclvb         6
2                super ego          babe rainbow         8
3                   adored            royel otis        15
4         lost without you             san cisco        21
5             super-vision                  dice        22
6             blak britney          miss kaninna        24
7                 ruthless         hooligan hefs        26
8                attention              doja cat        27
9               james dean          tash sultana        28
10             do it again                 benee        33
11        i wish you roses            kali uchis        35
12           dash of speed            rum jungle        36
13                too much         the kid laroi        37
14              eyes ahead                  dice        38
15          pets and drugs            the rubens        42
16          into your room     holly humberstone        44
17                      up                   lee        46
18                 pegasus            arlo parks        47
19               exploding         angie mcmahon        48
20                 calling          metro boomin        50
21            must be nice                  ruel        51
22             better love            eliza rose        52
23            your funeral                  maya        53
24       don't let me down         gus dapperton        54
25               conceited            lola young        56
26               messed up             holy holy        57
27        lost in the rush              telenova        58
28            candle flame                jungle        59
29            prescription             remi wolf        63
30                  change                laurel        64
31                   angel        pinkpantheress        65
32                  sinner the last dinner party        66
33                 midwest             vacations        67
34             pretty girl             ice spice        68
35           i wanna dance            royel otis        71
36       make up your mind                cordae        74
37              viper room             thornhill        75
38              weightless            arlo parks        76
39       can't play myself                skepta        78
40          black mascara.                  raye        79
41              feel alive                   cat        80
42                tied up!         genesis owusu        81
43          mrs. hollywood                  gojo        84
44           am i dreaming          metro boomin        85
45                 comma's               onefour        86
46                    lola                  maya        87
47 it's cool to be in love         greta stanley        88
48    since i have a lover                 6lack        89
49           lil boo thang          paul russell        91
50            going kokomo            royel otis        93
51             all my life              lil durk        94
52            brain freeze northeast party house        95
53                 healing      molly millington        96
54                  sticky                  kito        97
55                  rakata     the jungle giants        98
</code></pre>
<p>So there were 55 songs in my predictions that didn&rsquo;t make it into the countdown, including 3 of my top 20. Funily enough though, a lot of my predictions seemed to line up with peoples opions online with <a href="https://www.reddit.com/r/triplej/comments/1adh146/comment/kk1b24c/?utm_source=share&amp;utm_medium=web2x&amp;context=3">Love Type</a>, <a href="https://www.reddit.com/r/triplej/comments/1adh146/comment/kk16o08/?utm_source=share&amp;utm_medium=web2x&amp;context=3">Super Ego</a> and <a href="https://www.reddit.com/r/triplej/comments/1adh146/comment/kk1hqcl/?utm_source=share&amp;utm_medium=web2x&amp;context=3">Adored</a> all being mentioned as snubs from the hottest 100.</p>
<h1 id="surprise-songs">Surprise Songs</h1>
<pre><code>                   Song               Artist rank
1             saving up            dom dolla    3
2                rumble             skrillex   12
3            atmosphere               fisher   14
4            back on 74               jungle   17
5          eat your man            dom dolla   18
6               therapy             budjerah   19
7         sorry instead          spacey jane   20
8           be your man               g flip   22
9           take it off               fisher   23
10      rich baby daddy                drake   25
11                rough               g flip   26
12      dance the night             dua lipa   28
13    say yes to heaven         lana del rey   29
14    not strong enough            boygenius   30
15        get him back!       olivia rodrigo   34
16         baby again..           fred again   35
17   boy's a liar pt. 2       pinkpantheress   36
18             laced up        hilltop hoods   37
19         scary movies            the rions   40
20             pedestal        lime cordiale   42
21              popular           the weeknd   43
22           sweetheart            old mervs   47
23          padam padam        kylie minogue   48
24            australia               g flip   50
25                  ten           fred again   51
26     i used to be fun           teen jesus   52
27          lookin' out        king stingray   53
28   more than you know             blink182   54
29   all-american bitch       olivia rodrigo   56
30             darkside bring me the horizon   57
31                 lost bring me the horizon   58
32                  a&amp;w         lana del rey   60
33    fall at your feet           peking duk   64
34            real life               g flip   65
35    leaving the light        genesis owusu   69
36               snooze                  sza   70
37           speedracer         teenage dads   74
38       nobody gets me                  sza   75
39            sofa king           royel otis   76
40 i don't wanna be ...                 ruel   77
41                bleed        the kid laroi   78
42 video killed the ...         teenage dads   79
43               7 days               g flip   80
44     like a girl does            peach prc   81
45                 exes           tate mcrae   82
46        the summoning          sleep token   83
47     midnight driving         teenage dads   88
48            nightmare              polaris   90
49 did you know that...         lana del rey   91
50  strawberry daydream       pacific avenue   92
51          no bad days           the terrys   93
52   welcome to the dcc  nothing but thieves   95
53         stay blessed        genesis owusu   97
54        cool about it            boygenius   98
55           i miss you        slowly slowly   99
</code></pre>
<p>With 55 snubs, we are going to have 55 surprise songs. There doesn&rsquo;t seem to be a massive trend here. G flip only made it into my countdown twice, so 5 of their songs are in this list. Its also interesting seeing which conventionally popular songs are part of this list. Boy&rsquo;s a liar pt. 2 by Pinkpantheress and All American-Bitch which peaked at 2 and 10 on the aria charts were left out in my predictions, even though it predicted similar chart toppers in the top 10.</p>
<img src="post-2.markdown_strict_files/figure-markdown_strict/suroprise-comps-1.png" width="768" />
<p>Looking at these plots, it seems that the chart data for these songs didn&rsquo;t correctly join with the play data from triple J. After cleaning the names, I was hoping that there wouldn&rsquo;t be too much of a discrepancy. However, in the ARIA charts, &ldquo;all-american bitch&rdquo; is listed as &ldquo;all-american b**ch,&rdquo; and &ldquo;boys a liar pt. 2&rdquo; is listed as &ldquo;boys a liar&rdquo;. This kind of discrepancy is probably present throughout my dataset and may have led to some major inaccuracies. However, it is also just part of life when dealing with text data.</p>
<h1 id="did-i-do-better-than-warm-tuna">Did I do better than Warm Tuna?</h1>
<p>Part of my mission when setting out to make these predictions was to outperform 100 Warm Tunas, who utilize a compilation of social media posts to formulate their predictions.</p>
<pre><code>                     Song         Artist rank warm_tuna my_rankning
1      paint the town red       doja cat    1         9           1
2  the worst person alive         g flip    2        11          55
3               saving up      dom dolla    3        18          NA
4              rhyme dust             mk    4         5          72
5                   prada           cass    5        19          90
6                 adore u     fred again    6         6          40
7    what was i made for?  billie eilish    7         4           3
8                    rush    troye sivan    8         1          10
9             lovin on me    jack harlow    9        49          17
10               chemical    post malone   10        28          14
11                vampire olivia rodrigo   11        14           2
12                 rumble       skrillex   12         3          NA
13              kill bill            sza   13        20           9
14             atmosphere         fisher   14        23          NA
15                 nanana      peggy gou   15        15           5
16               sprinter           dave   16        22           4
17             back on 74         jungle   17        13          NA
18           eat your man      dom dolla   18        59          NA
19                therapy       budjerah   19         8          NA
20          sorry instead    spacey jane   20        21          NA
</code></pre>
<p>Straight away, I can see that warm tuna did better than me, but by how much?</p>
<p>So, I made up a quick statistic to see how far off our predictions were. This is the sum of the magnitudes of the differences between the predicted score and the actual score. If a song didn&rsquo;t make the top 100, it&rsquo;s given the equivalent rank of 101. I then divide this by 100 to get the average deviation for each prediction.</p>
<pre><code>my score: 36.28 

warm tuna's score: 26.5 
</code></pre>
<p>So from these statistics, we can see that my predictions were, on average, about 10 places more off than warm tuna&rsquo;s.</p>
<h1 id="next-year">Next Year?</h1>
<p>I reckon this method still has promise, but I need to sort out the name joining issue to ensure that my method is working at its maximum potential. I also want to include genre and artist country into it since it seemed to be an important factor in the final rank that I didn&rsquo;t account for.</p>
]]></content>
        </item>
        
        <item>
            <title>Predicting the 2023 Hottest 100</title>
            <link>/2024/01/26/predicting-the-2023-hottest-100/</link>
            <pubDate>Fri, 26 Jan 2024 00:00:00 +0000</pubDate>
            
            <guid>/2024/01/26/predicting-the-2023-hottest-100/</guid>
            <description>Like many Australians, I spent my last Saturday in January getting hyped for the Triple J Hottest 100 countdown. And for the past few years, there has been a project run by 100 Warm Tunas that has been remarkably accurate at predicting the results of the countdown.
Warm Tunas makes predictions by scraping social media posts for people&amp;rsquo;s votes and then collating them as a sample of all votes. While this method is highly effective, I feel that it misses the point a bit when it comes to understanding why a song is popular.</description>
            <content type="html"><![CDATA[<p>Like many Australians, I spent my last Saturday in January getting hyped for the Triple J Hottest 100 countdown. And for the past few years, there has been a project run by <a href="https://100warmtunas.com/">100 Warm Tunas</a> that has been remarkably accurate at predicting the results of the countdown.</p>
<p>Warm Tunas makes predictions by scraping social media posts for people&rsquo;s votes and then collating them as a sample of all votes. While this method is highly effective, I feel that it misses the point a bit when it comes to understanding why a song is popular.</p>
<p>Therefore, this year, I have set out to determine the top songs in the 2023 countdown without relying on anything related to the voting itself.</p>
<h2 id="my-hypotheses">My Hypotheses</h2>
<p>Heading into this, I have a few ideas as to factors that will make a song perform well in the countdown:</p>
<h3 id="plays-on-triple-j">Plays on Triple J</h3>
<p>I feel this factor is pretty self-explanatory. If a song is being played a lot on Triple J, it&rsquo;s most likely popular with the listener base and will get more votes in the Hottest 100.</p>
<h3 id="chart-success">Chart Success</h3>
<p>This one is a bit weirder, as I don&rsquo;t think that just getting to number one in the ARIA charts will make you a top pick for Triple J listeners. Otherwise, the countdown would be topped by the year&rsquo;s biggest pop hits. If a song is too popular in the mainstream, it seems to fall out of favor with Triple J listeners. However, there are some notable exceptions to this, such as &ldquo;Bad Guy&rdquo; by Billie Eilish and &ldquo;Thrift Shop&rdquo; by Macklemore, which both took out the top spot in their respective years.</p>
<h3 id="time-of-release-and-peak">Time of Release and Peak</h3>
<p>This idea is commonly thrown around when talking about the Oscars, so I feel that it&rsquo;s probably going to be applicable to the Hottest 100 as well. Being at peak popularity when people are voting is probably going to be useful. Similarly, a song that hung around for a long time will probably be voted for more than a song that only hung around for a week.</p>
<h1 id="play-data">Play Data</h1>
<p>I gathered the data for all plays on Triple J for the last 8 years from their <a href="https://music.abcradio.net.au/api/v1/plays/search.json?limit=100&amp;offset=0&amp;page=0&amp;station=triplej">API</a>, which left me with a dataset that looks like this:</p>
<img src="post.markdown_strict_files/figure-markdown_strict/dataset-plot-1.png" width="768" />
<h2 id="number-of-plays">Number of Plays</h2>
<p>To me, the most obvious indicator of a song&rsquo;s popularity is the number of plays it receives. So, we can start by examining that.</p>
<p>```kdkbbchlp e option I use for blogs as I want to make sure to avoid re-rendering old posts unless I explicitly do so.</p>
<p>freeze: auto - Re-render only when</p>
<p>p1 &lt;-combined_plays %&gt;%
filter(release_year &gt;= 2016 &amp; release_year &lt;= 2023) %&gt;%
filter(release_year == Year) %&gt;%
group_by(release_year, Song, Artist) %&gt;%
summarize(
first_timestamp = ymd_hms(min(timestamp)),
total_plays = n(),
.groups = &ldquo;drop&rdquo;
) %&gt;%
ggplot(aes(x = first_timestamp, y = total_plays, color = factor(release_year))) +
geom_point() +
scale_color_catppuccin(palette = &ldquo;macchiato&rdquo;) +
labs(x = &ldquo;Date of First Play&rdquo;, y = &ldquo;Total Number of Plays&rdquo;, title = &ldquo;Total Number of Plays In Release Year&rdquo;, color = &lsquo;Release Year&rsquo;) +
scale_y_continuous(limit = c(0, NA))</p>
<p>p2 &lt;- combined_plays %&gt;%
filter(release_year &gt;= 2016 &amp; release_year &lt;= 2023) %&gt;%
filter(release_year == year(ymd_hms(timestamp))) %&gt;%
count(Song) %&gt;%
group_by(n) %&gt;%
summarize(number_of_songs = n(), .groups = &ldquo;drop&rdquo;) %&gt;%
filter(number_of_songs &gt; 1) %&gt;%
ggplot(aes(x = n, y = number_of_songs)) +
geom_line(color = &ldquo;#cad3f5&rdquo;) + # Changed to line chart
geom_point(color = &lsquo;#bb9af7&rsquo;) + # You can keep points to show exact data spots
labs(x = &ldquo;Total Number of Plays&rdquo;, y = &ldquo;Number of Songs&rdquo;, title = &ldquo;Line Chart of Songs vs Total Plays by Release Year&rdquo;) +
scale_y_log10()</p>
<p>p1 / p2</p>
<pre><code>These plots give us a good insight into the trends in how Triple J selects songs. We have a lot of songs with almost no plays, which are mostly songs that are being presented to the audience to gauge their reaction. If they become popular, the songs will be played frequently, indicated by the absence of songs with 40-60 plays. However, very few songs receive excessive playtime, with only a handful surpassing 200 plays.

We can also observe the impact of being released early in the year, as these songs have more opportunities to be played throughout the year, resulting in a downward slope for each year.


## How Total Plays Impact Success



::: {.cell}
::: {.cell-output-display}
![](post.markdown_strict_files/figure-markdown_strict/plays-vs-success-1.png){width=768}
:::
:::





Looking at the rankings, we can see that the total number of plays doesn't have a massive impact on performance. A song can have five plays or a hundred, and it seems to have a similar outcome in the rankings.

There is a slight downward trend for songs getting over 120 plays, as these are the absolute most played songs for the year. However, this status still doesn't guarantee a top spot.

## Accounting for Time

A thought I had while looking at the absolute play data is that it disproportionately rewards songs that were released earlier in the year. 

To address this, I have compiled some statistics that consider the peak of the songs, which should eliminate any advantage for being released at the beginning of the year.




::: {.cell}
::: {.cell-output-display}
![](post.markdown_strict_files/figure-markdown_strict/plays-vs-success-accounting-for-time-1.png){width=768}
:::

::: {.cell-output-display}
![](post.markdown_strict_files/figure-markdown_strict/plays-vs-success-accounting-for-time-2.png){width=768}
:::

::: {.cell-output-display}
![](post.markdown_strict_files/figure-markdown_strict/plays-vs-success-accounting-for-time-3.png){width=768}
:::
:::




Again, we can see that there is some useful information, with the peak plays per week showing that songs which have a big peak generally perform well in the final rankings. However, as with the absolute count of plays, there doesn't seem to be a hard and fast rule.


# Chart Success

The ARIA charts collate music sales and streaming data within Australia and produce a weekly list of the top 50 most popular songs. A GitHub user has been kind enough to [compile all of these lists](https://raw.githubusercontent.com/caseybriggs/ARIA-charts/main/single_charts.csv), so we can simply load them and compare the chart results to a song's position in the Hottest 100.




::: {.cell}
::: {.cell-output-display}
![](post.markdown_strict_files/figure-markdown_strict/Chart-1.png){width=768}
:::

::: {.cell-output-display}
![](post.markdown_strict_files/figure-markdown_strict/Chart-2.png){width=768}
:::

::: {.cell-output-display}
![](post.markdown_strict_files/figure-markdown_strict/Chart-3.png){width=768}
:::
:::




The first thing to note is that these plots are much sparser than the rest. This is because many songs played on Triple J don't make it into the top 50 at all, even though they make it into the Hottest 100.

For the songs that did make it into the ARIA charts and hung around, they consistently performed well in the countdown. Examples include &quot;Bad Guy&quot; by Billie Eilish and &quot;Dance Monkey&quot; by Tones and I, which claimed the 1st and 4th spots in their respective years.

However, the predictive power of this statistic is again quite limited. Many songs that performed well in the Hottest 100 had poor chart success. For instance, &quot;Redbone&quot; by Childish Gambino took the 5th spot in 2015 despite only spending a single week in the charts at rank 42.






::: {.cell}
::: {.cell-output-display}
![](post.markdown_strict_files/figure-markdown_strict/chart-did-it-make-it-1.png){width=768}
:::
:::




From this chart, we can see that songs that make the charts are outperforming songs that don't. But more importantly, it shows us that making the charts is not a deal-breaker on whether or not a song will perform well in the Hottest 100.

# Timing

Another thing I wanted to look at was when and how the songs peaked in the play data. Maybe being the popular song would help the song perform around the time that voting is open, which may help with its performance in the final rankings.




::: {.cell}
::: {.cell-output-display}
![](post.markdown_strict_files/figure-markdown_strict/week-of-peak-1.png){width=768}
:::

::: {.cell-output-display}
![](post.markdown_strict_files/figure-markdown_strict/week-of-peak-2.png){width=768}
:::
:::




Looking at the above plots, we can see that the week of release or peak really doesn't matter when looking at the final results.

I went on to see if the shape of the peaks looks different for well-performing songs versus poorly performing songs, and again, nothing seems particularly interesting or different between the two.




::: {.cell}
::: {.cell-output-display}
![](post.markdown_strict_files/figure-markdown_strict/multiline-1.png){width=768}
:::
:::




# Where we are going wrong

So it seems that all of my hypotheses are incorrect, and I believe the reason for this is that there is too much variation among the top 100. This is because these songs are already considered the best of the year from a pool of nearly 4000.




::: {.cell}
::: {.cell-output-display}
![](post.markdown_strict_files/figure-markdown_strict/overall-1.png){width=768}
:::
:::




Looking at this plot, we can see right away that a song that made the Hottest 100 got more plays than those that didn't, but also that plenty of songs that didn't make the 100 got a comparable number of plays.

# Screw it XGBoost




::: {.cell}

:::




I think the direction to go here is to see if we can use ML to find any trends that aren't showing up in the plots.

To do this, we are going to use XGBoost to train a model to predict the rank of the song using all the stats I wrote out above. The only thing I changed was taking the first play data and setting it to be the month rather than the day to reduce overfitting. For any song that didn't make it into the 100, I set the rank to be 101, as it could be the 101st most popular song that year.




::: {.cell}
::: {.cell-output-display}
![](post.markdown_strict_files/figure-markdown_strict/boost-train-1.png){width=768}
:::
:::




A nice thing about XGBoost is that it can provide insight into the most important factors it uses to predict the results. From the above plots, we can see that the peak of the song on triple J and its total plays contribute significantly to the predictive power. 

Interestingly, the chart scores seem to have little effect. However, this can be justified by considering the fact that many songs that make the top 100 never make the charts.

Now that we have the model, we can evaluate its performance in predicting the Hottest 100 by applying it to the play data from 2022.




::: {.cell}

:::




### 2022 Predicted Countdown




::: {.cell}
::: {.cell-output .cell-output-stdout}

                    Song          Artist Actual
</code></pre>
<p>1 b.o.t.a. eliza rose 2
2 say nothing flume 1
3 glimpse of us joji 10
4 bad habit steve lacy 4
5 first class jack harlow 12
6 about damn time lizzo 7
7 sitting up spacey jane 6
8 get inspired genesis owusu 17
9 in the wake of your leave gang of youths 9
10 shirt sza 20
11 hardlight spacey jane 3
12 stars in my eyes ball park music 8
13 stranger days skegss 19
14 god is a freak peach prc 16
15 it&rsquo;s been a long day spacey jane 5
16 thousand miles the kid laroi 33
17 backseat of my mind thelma plum 21
18 2 be loved lizzo 36
19 facts of life lime cordiale 15
20 doja central cee 39</p>
<pre><code>:::
:::




### 2022 Real Countdown




::: {.cell}
::: {.cell-output .cell-output-stdout}

                    Song          Artist Predicted
</code></pre>
<p>1 say nothing flume 2
2 b.o.t.a. eliza rose 1
3 hardlight spacey jane 11
4 bad habit steve lacy 4
5 it&rsquo;s been a long day spacey jane 15
6 sitting up spacey jane 7
7 about damn time lizzo 6
8 stars in my eyes ball park music 12
9 in the wake of your leave gang of youths 9
10 glimpse of us joji 3
11 gay 4 me g flip 29
12 first class jack harlow 5
13 new gold gorillaz 24
14 delilah fred again 27
15 facts of life lime cordiale 19
16 god is a freak peach prc 14
17 get inspired genesis owusu 8
18 stranger days skegss 13
19 shirt sza 10
20 backseat of my mind thelma plum 17</p>
<pre><code>:::
:::




From this, I reckon the model is doing pretty well, so lets have a look at my final predictions for the hottest 100 of 2023.

# My Final Predictions

The list below seems pretty reasonable, with Doja Cat taking the top spot and my pick for number one, Rush, sitting in 10th. There seems to be a big lean towards pop and a lack of your classic Triple J-style indie rockers, but that might just be the turnout for this year.




::: {.cell}
::: {.cell-output .cell-output-stdout}

                     Song                Artist
</code></pre>
<p>1 paint the town red doja cat
2 vampire olivia rodrigo
3 what was i made for? billie eilish
4 sprinter dave
5 nanana peggy gou
6 love type poolclvb
7 green honda benee
8 super ego babe rainbow
9 kill bill sza
10 rush troye sivan
11 greedy tate mcrae
12 strangers kenya grace
13 sweat you out my system maya
14 chemical post malone
15 adored royel otis
16 bad idea right? olivia rodrigo
17 lovin on me jack harlow
18 houdini dua lipa
19 got me started troye sivan
20 barbie world nicki minaj
21 lost without you san cisco
22 super-vision dice
23 agora hills doja cat
24 blak britney miss kaninna
25 glue song beabadoobee
26 ruthless hooligan hefs
27 attention doja cat
28 james dean tash sultana
29 never felt so alone labrinth
30 my love mine all mine mitski
31 water tyla
32 still have room hockey dad
33 do it again benee
34 trippin up the jungle giants
35 i wish you roses kali uchis
36 dash of speed rum jungle
37 too much the kid laroi
38 eyes ahead dice
39 spin me like your records pacific avenue
40 adore u fred again
41 dogtooth tyler
42 pets and drugs the rubens
43 imposter syndrome lime cordiale
44 into your room holly humberstone
45 love again the kid laroi
46 up lee
47 pegasus arlo parks
48 exploding angie mcmahon
49 stockholm dice
50 calling metro boomin
51 must be nice ruel
52 better love eliza rose
53 your funeral maya
54 don&rsquo;t let me down gus dapperton
55 the worst person alive g flip
56 conceited lola young
57 messed up holy holy
58 lost in the rush telenova
59 candle flame jungle
60 one of your girls troye sivan
61 minivan the rions
62 perfect for you peach prc
63 prescription remi wolf
64 change laurel
65 angel pinkpantheress
66 sinner the last dinner party
67 midwest vacations
68 pretty girl ice spice
69 good enough g flip
70 take what you want the rions
71 i wanna dance royel otis
72 rhyme dust mk
73 boys light up chillinit
74 make up your mind cordae
75 viper room thornhill
76 weightless arlo parks
77 letting go angie mcmahon
78 can&rsquo;t play myself skepta
79 black mascara. raye
80 feel alive cat
81 tied up! genesis owusu
82 fine day anthem skrillex
83 we don&rsquo;t talk about it thelma plum
84 mrs. hollywood gojo
85 am i dreaming metro boomin
86 comma&rsquo;s onefour
87 lola maya
88 it&rsquo;s cool to be in love greta stanley
89 since i have a lover 6lack
90 prada cass
91 lil boo thang paul russell
92 nothing matters the last dinner party
93 going kokomo royel otis
94 all my life lil durk
95 brain freeze northeast party house
96 healing molly millington
97 sticky kito
98 rakata the jungle giants
99 lost the breakup maisie peters
100 f u goodbye peach prc
```</p>
<p>:::
:::</p>
]]></content>
        </item>
        
        <item>
            <title>Making my ODE solver solve ODEs</title>
            <link>/2024/01/12/making-my-ode-solver-solve-odes/</link>
            <pubDate>Fri, 12 Jan 2024 00:00:00 +0000</pubDate>
            
            <guid>/2024/01/12/making-my-ode-solver-solve-odes/</guid>
            <description>After writing out the last post where I wrote out a python library for using an improved version of Euler&amp;rsquo;s method to solve ODEs. But so far, we haven&amp;rsquo;t been solving ODES, instead we have just been taking an initial value and iterating it over the length of a domain. To To make the ODE estimator work, we need to ensure that the conditions of the ODE are met at each step.</description>
            <content type="html"><![CDATA[<p>After writing out the <a href="../../../2023/12/29/making-a-python-library-to-solve-differential-equations/">last post</a> where I wrote out a python library for using an improved version of Euler&rsquo;s method to solve ODEs. But so far, we haven&rsquo;t been solving ODES, instead we have just been taking an initial value and iterating it over the length of a domain. To To make the ODE estimator work, we need to ensure that the conditions of the ODE are met at each step.</p>
<h1 id="simplifying-odes-constant-linear-odes">Simplifying ODEs: Constant-Linear ODEs</h1>
<p>ODEs are often categorized as linear or non-linear. Linear ODEs take the form <img src="a_0%28x%29y%20%2B%20a_1%28x%29y%27%20%2B%20...%20%2B%20a_n%28x%29y%5E%7Bn%7D%20%3D%20b%28x%29" alt="a_0(x)y + a_1(x)y\' + \... + a_n(x)y^{n} = b(x)" title="a_0(x)y + a_1(x)y' + ... + a_n(x)y^{n} = b(x)">, with both <img src="a" alt="" title="a"> and <img src="b" alt="" title="b"> representing functions of <img src="x" alt="" title="x">, while Non-linear equations are all the others. In our solver&rsquo;s context, we&rsquo;ll concentrate on a subset I&rsquo;ve termed &ldquo;constant-linear&rdquo; ODEs, characterized by constant coefficients for <img src="y" alt="" title="y"> terms and a linear function of <img src="x" alt="" title="x"> for <img src="b" alt="" title="b">. Specifically, a constant-linear ODE looks like <img src="a_0y%20%2B%20a_1y%27%20%2B%20...%20%2B%20a_ny%5E%7Bn%7D%20%3D%20bx%20%2B%20c" alt="a_0y + a_1y\' + \... + a_ny^{n} = bx + c" title="a_0y + a_1y' + ... + a_ny^{n} = bx + c">.<br>
This may seem like a very restrictive requirement, but there are many famous examples of this kind of equation including:</p>
<ol>
<li>
<p>Simple Harmonic Motion:
[ y'' + ^2 y = 0 ]</p>
</li>
<li>
<p>Radioactive Decay:
[ = -y ]</p>
</li>
<li>
<p>RC Circuit Equation:
[ y' + y = 0 ]</p>
</li>
<li>
<p>Damped Harmonic Oscillator:
[ y'' + 2y' + _0^2 y = 0 ]</p>
</li>
<li>
<p>Heat Equation (One-Dimensional):
[ u'' - u'= 0 ]</p>
</li>
<li>
<p>Exponential Growth or Decay:
[ y' = ky ]</p>
</li>
</ol>
<h1 id="a-quick-diversion-odes-in-vector-space">A Quick Diversion: ODEs in Vector Space</h1>
<p>Pivoting for a moment, I want to take a quick moment to reframe how we are imagining ODEs. Most of the time, we see ODEs as curves in space and/or time, but I want to reframe them as planes in a vector space.</p>
<p>Each point in this vector space describes the state of a point along a curve, such that a values of the vector give:</p>
<p><img src="%5Cbegin%7Bbmatrix%7D%0A1%5C%5C%0Ax%5C%5C%0Ay%28x%29%5C%5C%0Ay%27%28x%29%5C%5C%0Ay%27%27%28x%29%5C%5C%0A...%5C%5C%0Ay%5E%7Bn%7D%28x%29%5C%5C%0A%5Cend%7Bbmatrix%7D" alt="\begin{bmatrix}1\\x\\y(x)\\y\'(x)\\y\'\'(x)\\\...\\y^{n}(x)\\\end{bmatrix}" title="\begin{bmatrix}
1\
x\
y(x)\
y'(x)\
y''(x)\
...\
y^{n}(x)\
\end{bmatrix}"></p>
<p>This means that an ODE can be defined by a plane that contains all the points which meet the requirements of the ODE.</p>
<p>For example, for the equation <img src="y%27%20%3D%202x" alt="y\' = 2x" title="y' = 2x"> this plane looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
<span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
<span style="color:#f92672">import</span> mplcatppuccin
<span style="color:#f92672">import</span> matplotlib <span style="color:#66d9ef">as</span> mpl
<span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
<span style="color:#f92672">from</span> mpl_toolkits.mplot3d <span style="color:#f92672">import</span> Axes3D

mpl<span style="color:#f92672">.</span>style<span style="color:#f92672">.</span>use(<span style="color:#e6db74">&#34;macchiato&#34;</span>)

<span style="color:#75715e"># Create a grid of values for x and y</span>
x <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>linspace(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">100</span>)
y <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>linspace(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">100</span>, <span style="color:#ae81ff">100</span>)
x, y <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>meshgrid(x, y)

<span style="color:#75715e"># Calculate corresponding z</span>
z <span style="color:#f92672">=</span> (<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>x)

<span style="color:#75715e"># Create a figure and a 3D axis</span>
fig <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>figure()
ax <span style="color:#f92672">=</span> fig<span style="color:#f92672">.</span>add_subplot(<span style="color:#ae81ff">111</span>, projection<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;3d&#39;</span>)
ax<span style="color:#f92672">.</span>plot_surface(x, z,y, alpha <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.7</span>)

<span style="color:#75715e"># Set labels</span>
ax<span style="color:#f92672">.</span>set_xlabel(<span style="color:#e6db74">&#39;X&#39;</span>)
ax<span style="color:#f92672">.</span>set_zlabel(<span style="color:#e6db74">&#39;Y&#39;</span>)
ax<span style="color:#f92672">.</span>set_ylabel(<span style="color:#e6db74">&#34;Y&#39;&#34;</span>)

<span style="color:#75715e"># Show the plot</span>
plt<span style="color:#f92672">.</span>show()
</code></pre></div><img src="post-3_files/figure-markdown_strict/cell-2-output-1.png" width="410" height="396" />
<p>Then a specific solution to the ODE exists as a curve that sits on this plane. For example, for the IVP that starts at (0,0), the solution follows this curve:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">Lx <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>linspace(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">100</span>)
Ly <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array([x<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span> <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> Lx])

<span style="color:#75715e"># Create masks for the conditions</span>
mask <span style="color:#f92672">=</span> (Lx <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">&amp;</span> (Lx <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>) <span style="color:#f92672">&amp;</span> (Ly <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">100</span>) <span style="color:#f92672">&amp;</span> (Ly <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>)

<span style="color:#75715e"># Now apply the mask to both arrays to exclude unwanted values</span>
filtered_Lx <span style="color:#f92672">=</span> Lx[mask]
filtered_Ly <span style="color:#f92672">=</span> Ly[mask]

Lz <span style="color:#f92672">=</span> (<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>filtered_Lx) <span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>

<span style="color:#75715e"># Create a new figure</span>
fig <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>figure()
ax <span style="color:#f92672">=</span> fig<span style="color:#f92672">.</span>add_subplot(<span style="color:#ae81ff">111</span>, projection<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;3d&#39;</span>,computed_zorder<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)

<span style="color:#75715e"># Plot surface and line</span>
ax<span style="color:#f92672">.</span>plot_surface(x, z,y, zorder<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>,alpha <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.7</span>)
ax<span style="color:#f92672">.</span>plot(filtered_Lx, Lz, filtered_Ly, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;r&#39;</span>,linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;dashed&#39;</span> , zorder<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)


<span style="color:#75715e"># Set labels</span>
ax<span style="color:#f92672">.</span>set_xlabel(<span style="color:#e6db74">&#39;X&#39;</span>)
ax<span style="color:#f92672">.</span>set_zlabel(<span style="color:#e6db74">&#39;Y&#39;</span>)
ax<span style="color:#f92672">.</span>set_ylabel(<span style="color:#e6db74">&#34;Y&#39;&#34;</span>)

<span style="color:#75715e"># Show the plot</span>
plt<span style="color:#f92672">.</span>show()
</code></pre></div><img src="post-3_files/figure-markdown_strict/cell-3-output-1.png" width="410" height="396" />
<h2 id="but-why-does-this-matter">But Why Does This Matter</h2>
<p>The reason that we want to reframe ODEs in this way is because of the following fact:</p>
<p><strong>For all constant-linear ODEs, we can express the ODE as a matrix such that applying it to any point in the vector space would map any point to a valid point on the curve defined by the ODE</strong></p>
<p>Looking at the equations above, these matrices (<img src="T" alt="" title="T">) are:</p>
<ol>
<li>
<p>Simple Harmonic Motion:</p>
<p><img src="T%20%3D%20%5Cbegin%7Bbmatrix%7D%0A1%20%26%200%20%26%200%20%26%200%20%26%200%5C%5C%0A0%20%26%201%20%26%200%20%26%200%20%26%200%5C%5C%0A0%20%26%200%20%26%201%20%26%200%20%26%200%5C%5C%0A0%20%26%200%20%26%200%20%26%201%20%26%200%5C%5C%0A0%20%26%200%20%26%20-%5Comega%5E2%20%26%200%20%26%200%5C%5C%0A%5Cend%7Bbmatrix%7D" alt="T = \begin{bmatrix}1 & 0 & 0 & 0 & 0\\0 & 1 & 0 & 0 & 0\\0 & 0 & 1 & 0 & 0\\0 & 0 & 0 & 1 & 0\\0 & 0 & -\omega^2 & 0 & 0\\\end{bmatrix}" title="T = \begin{bmatrix}
1 &amp; 0 &amp; 0 &amp; 0 &amp; 0\
0 &amp; 1 &amp; 0 &amp; 0 &amp; 0\
0 &amp; 0 &amp; 1 &amp; 0 &amp; 0\
0 &amp; 0 &amp; 0 &amp; 1 &amp; 0\
0 &amp; 0 &amp; -\omega^2 &amp; 0 &amp; 0\
\end{bmatrix}"></p>
</li>
<li>
<p>Radioactive Decay:</p>
<p><img src="T%20%3D%20%5Cbegin%7Bbmatrix%7D%0A1%20%26%200%20%26%200%20%26%200%5C%5C%0A0%20%26%201%20%26%200%20%26%200%5C%5C%0A0%20%26%200%20%26%201%20%26%200%5C%5C%0A0%20%26%200%20%26%20-%5Clambda%20%26%200%5C%5C%0A%5Cend%7Bbmatrix%7D" alt="T = \begin{bmatrix}1 & 0 & 0 & 0\\0 & 1 & 0 & 0\\0 & 0 & 1 & 0\\0 & 0 & -\lambda & 0\\\end{bmatrix}" title="T = \begin{bmatrix}
1 &amp; 0 &amp; 0 &amp; 0\
0 &amp; 1 &amp; 0 &amp; 0\
0 &amp; 0 &amp; 1 &amp; 0\
0 &amp; 0 &amp; -\lambda &amp; 0\
\end{bmatrix}"></p>
</li>
<li>
<p>RC Circuit Equation:</p>
<p><img src="T%20%3D%20%5Cbegin%7Bbmatrix%7D%0A1%20%26%200%20%26%200%20%26%200%5C%5C%0A0%20%26%201%20%26%200%20%26%200%5C%5C%0A0%20%26%200%20%26%201%20%26%200%5C%5C%0A0%20%26%200%20%26%20%5Cfrac%7B-1%7D%7BRC%7D%20%26%200%5C%5C%0A%5Cend%7Bbmatrix%7D" alt="T = \begin{bmatrix}1 & 0 & 0 & 0\\0 & 1 & 0 & 0\\0 & 0 & 1 & 0\\0 & 0 & \frac{-1}{RC} & 0\\\end{bmatrix}" title="T = \begin{bmatrix}
1 &amp; 0 &amp; 0 &amp; 0\
0 &amp; 1 &amp; 0 &amp; 0\
0 &amp; 0 &amp; 1 &amp; 0\
0 &amp; 0 &amp; \frac{-1}{RC} &amp; 0\
\end{bmatrix}"></p>
</li>
<li>
<p>Damped Harmonic Oscillator:</p>
<p><img src="T%20%3D%20%5Cbegin%7Bbmatrix%7D%0A1%20%26%200%20%26%200%20%26%200%20%26%200%5C%5C%0A0%20%26%201%20%26%200%20%26%200%20%26%200%5C%5C%0A0%20%26%200%20%26%201%20%26%200%20%26%200%5C%5C%0A0%20%26%200%20%26%200%20%26%201%20%26%200%5C%5C%0A0%20%26%200%20%26%20-%5Comega%5E2%20%26%20-2%5Cgamma%20%26%200%5C%5C%0A%5Cend%7Bbmatrix%7D" alt="T = \begin{bmatrix}1 & 0 & 0 & 0 & 0\\0 & 1 & 0 & 0 & 0\\0 & 0 & 1 & 0 & 0\\0 & 0 & 0 & 1 & 0\\0 & 0 & -\omega^2 & -2\gamma & 0\\\end{bmatrix}" title="T = \begin{bmatrix}
1 &amp; 0 &amp; 0 &amp; 0 &amp; 0\
0 &amp; 1 &amp; 0 &amp; 0 &amp; 0\
0 &amp; 0 &amp; 1 &amp; 0 &amp; 0\
0 &amp; 0 &amp; 0 &amp; 1 &amp; 0\
0 &amp; 0 &amp; -\omega^2 &amp; -2\gamma &amp; 0\
\end{bmatrix}"></p>
</li>
<li>
<p>Heat Equation (One-Dimensional):</p>
<p><img src="T%20%3D%20%5Cbegin%7Bbmatrix%7D%0A1%20%26%200%20%26%200%20%26%200%20%26%200%5C%5C%0A0%20%26%201%20%26%200%20%26%200%20%26%200%5C%5C%0A0%20%26%200%20%26%201%20%26%200%20%26%200%5C%5C%0A0%20%26%200%20%26%200%20%26%201%20%26%200%5C%5C%0A0%20%26%200%20%26%200%20%26%20%5Cfrac%7B1%7D%7B%5Calpha%7D%20%26%200%5C%5C%0A%5Cend%7Bbmatrix%7D" alt="T = \begin{bmatrix}1 & 0 & 0 & 0 & 0\\0 & 1 & 0 & 0 & 0\\0 & 0 & 1 & 0 & 0\\0 & 0 & 0 & 1 & 0\\0 & 0 & 0 & \frac{1}{\alpha} & 0\\\end{bmatrix}" title="T = \begin{bmatrix}
1 &amp; 0 &amp; 0 &amp; 0 &amp; 0\
0 &amp; 1 &amp; 0 &amp; 0 &amp; 0\
0 &amp; 0 &amp; 1 &amp; 0 &amp; 0\
0 &amp; 0 &amp; 0 &amp; 1 &amp; 0\
0 &amp; 0 &amp; 0 &amp; \frac{1}{\alpha} &amp; 0\
\end{bmatrix}"></p>
</li>
<li>
<p>Exponential Growth or Decay:</p>
<p><img src="T%20%3D%20%5Cbegin%7Bbmatrix%7D%0A1%20%26%200%20%26%200%20%26%200%5C%5C%0A0%20%26%201%20%26%200%20%26%200%5C%5C%0A0%20%26%200%20%26%201%20%26%200%5C%5C%0A0%20%26%200%20%26%20k%20%26%200%5C%5C%0A%5Cend%7Bbmatrix%7D" alt="T = \begin{bmatrix}1 & 0 & 0 & 0\\0 & 1 & 0 & 0\\0 & 0 & 1 & 0\\0 & 0 & k & 0\\\end{bmatrix}" title="T = \begin{bmatrix}
1 &amp; 0 &amp; 0 &amp; 0\
0 &amp; 1 &amp; 0 &amp; 0\
0 &amp; 0 &amp; 1 &amp; 0\
0 &amp; 0 &amp; k &amp; 0\
\end{bmatrix}"></p>
</li>
</ol>
<h2 id="using-these-to-fit-odes">Using these to fit ODEs</h2>
<p>Now that we can express the ODEs in the form of a matrix, we can implement these matriexies in the ODE solver package to make the solution fit the ode.
It&rsquo;s important here to note that I&rsquo;ve diverted from my old definitions of <img src="Y" alt="" title="Y"> here, where the first element of the vector is <img src="y%28x%29" alt="y(x)" title="y(x)">.</p>
<p>To make a step in the approximation we use the following equation:</p>
<p><img src="%5Cbegin%7Bbmatrix%7D%0A1%20%5C%5C%0Ax%2Bh%20%5C%5C%20%0Ay%28x%2Bh%29%5C%5C%0Ay%27%28x%2Bh%29%5C%5C%0Ay%27%27%28x%2Bh%29%5C%5C%0A...%5C%5C%0Ay%5E%7Bn%7D%28x%2Bh%29%5C%5C%0A%5Cend%7Bbmatrix%7D%20%3D%20%20S%20%5Ccdot%20%5Cbegin%7Bbmatrix%7D%0A1%20%5C%5C%0Ax%5C%5C%0Ay%28x%29%5C%5C%0Ay%27%28x%29%5C%5C%0Ay%27%27%28x%29%5C%5C%0A...%5C%5C%0Ay%5E%7Bn%7D%28x%29%5C%5C%0A%5Cend%7Bbmatrix%7D%0A%5Cepsilon" alt="\begin{bmatrix}1 \\x+h \\y(x+h)\\y\'(x+h)\\y\'\'(x+h)\\\...\\y^{n}(x+h)\\\end{bmatrix} =  S \cdot \begin{bmatrix}1 \\x\\y(x)\\y\'(x)\\y\'\'(x)\\\...\\y^{n}(x)\\\end{bmatrix}\epsilon" title="\begin{bmatrix}
1 \
x+h \ 
y(x+h)\
y'(x+h)\
y''(x+h)\
...\
y^{n}(x+h)\
\end{bmatrix} =  S \cdot \begin{bmatrix}
1 \
x\
y(x)\
y'(x)\
y''(x)\
...\
y^{n}(x)\
\end{bmatrix}
\epsilon"></p>
<p>Where <img src="S" alt="" title="S"> is:</p>
<p><img src="%5Cbegin%7Bbmatrix%7D%0A1%20%26%200%20%26%200%20%26%200%20%26%200%20%26%20...%20%26%200%20%5C%5C%0Ah%20%26%201%20%26%200%20%26%200%20%26%200%20%26%20...%20%26%200%20%5C%5C%0A0%20%26%200%20%26%201%20%26%20%5Cfrac%7Bh%7D%7B1%21%7D%20%26%20%5Cfrac%7Bh%5E2%7D%7B2%21%7D%20%26%20%20...%20%26%20%5Cfrac%7Bh%5En%7D%7Bn%21%7D%5C%5C%0A0%20%26%200%20%26%200%20%26%201%20%26%20%5Cfrac%7Bh%7D%7B1%21%7D%20%26%20%20...%20%26%20%5Cfrac%7Bh%5E%7Bn-1%7D%7D%7B%28n-1%29%21%7D%5C%5C%0A0%20%26%200%20%26%200%20%26%200%20%26%201%20%26%20%20...%20%26%20%5Cfrac%7Bh%5E%7Bn-2%7D%7D%7B%28n-2%29%21%7D%5C%5C%0A...%20%26%20...%20%26%20...%20%26%20...%20%26%20%20...%20%26%20...%5C%5C%0A0%20%26%200%20%26%200%20%26%200%20%26%200%20%26%20%20...%20%26%201%5C%5C%0A%5Cend%7Bbmatrix%7D" alt="\begin{bmatrix}1 & 0 & 0 & 0 & 0 & \... & 0 \\h & 1 & 0 & 0 & 0 & \... & 0 \\0 & 0 & 1 & \frac{h}{1!} & \frac{h^2}{2!} &  \... & \frac{h^n}{n!}\\0 & 0 & 0 & 1 & \frac{h}{1!} &  \... & \frac{h^{n-1}}{(n-1)!}\\0 & 0 & 0 & 0 & 1 &  \... & \frac{h^{n-2}}{(n-2)!}\\\... & \... & \... & \... &  \... & \...\\0 & 0 & 0 & 0 & 0 &  \... & 1\\\end{bmatrix}" title="\begin{bmatrix}
1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; ... &amp; 0 \
h &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; ... &amp; 0 \
0 &amp; 0 &amp; 1 &amp; \frac{h}{1!} &amp; \frac{h^2}{2!} &amp;  ... &amp; \frac{h^n}{n!}\
0 &amp; 0 &amp; 0 &amp; 1 &amp; \frac{h}{1!} &amp;  ... &amp; \frac{h^{n-1}}{(n-1)!}\
0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp;  ... &amp; \frac{h^{n-2}}{(n-2)!}\
... &amp; ... &amp; ... &amp; ... &amp;  ... &amp; ...\
0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp;  ... &amp; 1\
\end{bmatrix}"></p>
<p>When making this step, the error in the approximation will move the point away from the plane that contains all valid solutions to the ODE, and therefore we will have to snap it back using one of the transformation matrices (<img src="T" alt="" title="T">).</p>
<p>Implementing this method in our python library:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">expanded_euler</span>(dims, h):
    step_matrix <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>zeros((dims, dims))
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(dims):
        <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(i, dims):
            <span style="color:#75715e"># Is 1, and h at j-i =0, 1 respectively</span>
            step_matrix[i, j] <span style="color:#f92672">=</span> h <span style="color:#f92672">**</span> (j <span style="color:#f92672">-</span> i) <span style="color:#f92672">/</span> math<span style="color:#f92672">.</span>factorial(j <span style="color:#f92672">-</span> i)
    expanded_matrix <span style="color:#f92672">=</span> add_x_and_1(step_matrix, h)
    <span style="color:#66d9ef">return</span> expanded_matrix


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">add_x_and_1</span>(original_matrix, h):
    new_size <span style="color:#f92672">=</span> len(original_matrix) <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>
    new_matrix <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>zeros((new_size, new_size), dtype<span style="color:#f92672">=</span>original_matrix<span style="color:#f92672">.</span>dtype)

    <span style="color:#75715e"># Set the 2x2 top left matrix</span>
    new_matrix[<span style="color:#ae81ff">0</span>:<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">0</span>:<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> [[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>], [h, <span style="color:#ae81ff">1</span>]]

    <span style="color:#75715e"># Copy the original matrix to the bottom right of the new matrix.</span>
    new_matrix[<span style="color:#ae81ff">2</span>:, <span style="color:#ae81ff">2</span>:] <span style="color:#f92672">=</span> original_matrix
    <span style="color:#66d9ef">return</span> new_matrix


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">linear</span>(y, step_matrix_generator, transformation_matrix, steps<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, h<span style="color:#f92672">=</span><span style="color:#ae81ff">0.1</span>):
    dims <span style="color:#f92672">=</span> len(y) <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>
    step_matrix <span style="color:#f92672">=</span> transformation_matrix <span style="color:#f92672">@</span> step_matrix_generator(dims, h)
    output_list <span style="color:#f92672">=</span> []

    y_n <span style="color:#f92672">=</span> y<span style="color:#f92672">.</span>copy()
    i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">while</span> i <span style="color:#f92672">&lt;</span> steps:
        y_n <span style="color:#f92672">=</span> step_matrix <span style="color:#f92672">@</span> y_n
        output_list<span style="color:#f92672">.</span>append(y_n)
        i <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</code></pre></div><p>Bind this machinery together, and you get a tool capable of tackling the initial example of <img src="y%27%20%3D%202x" alt="y\' = 2x" title="y' = 2x"> passing through the point (0,0):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
<span style="color:#f92672">import</span> math


<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Solution</span>:
    <span style="color:#66d9ef">def</span> __init__(self, input_list: list):
        solution_list <span style="color:#f92672">=</span> sorted(input_list, key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x[<span style="color:#ae81ff">1</span>])

        dims <span style="color:#f92672">=</span> len(solution_list[<span style="color:#ae81ff">0</span>]) <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>
        self<span style="color:#f92672">.</span>x <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array([x[<span style="color:#ae81ff">1</span>] <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> input_list])

        value_lists <span style="color:#f92672">=</span> [[] <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(dims)]

        <span style="color:#66d9ef">for</span> v <span style="color:#f92672">in</span> input_list:
            <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(dims):
                value_lists[i]<span style="color:#f92672">.</span>append(v[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>])

        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(dims):
            self<span style="color:#f92672">.</span>__dict__[<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;y_</span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>] <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array(value_lists[i])

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">interpolate</span>(self, x, y_n):
        <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">        allows you to get any value from the solution by interpolating the points
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
        y_values <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>__dict__[<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;y_</span><span style="color:#e6db74">{</span>y_n<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>]

        x_max_index <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>where(self<span style="color:#f92672">.</span>x <span style="color:#f92672">&gt;=</span> x)[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>]
        x_min_index <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>where(self<span style="color:#f92672">.</span>x <span style="color:#f92672">&lt;=</span> x)[<span style="color:#ae81ff">0</span>][<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]

        x_at_x_max <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>x[x_max_index]
        x_at_x_min <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>x[x_min_index]

        y_at_x_max <span style="color:#f92672">=</span> y_values[x_max_index]
        y_at_x_min <span style="color:#f92672">=</span> y_values[x_min_index]

        slope <span style="color:#f92672">=</span> (y_at_x_max <span style="color:#f92672">-</span> y_at_x_min) <span style="color:#f92672">/</span> (x_at_x_max <span style="color:#f92672">-</span> x_at_x_min)

        value <span style="color:#f92672">=</span> y_at_x_min <span style="color:#f92672">+</span> slope <span style="color:#f92672">*</span> (x <span style="color:#f92672">-</span> x_at_x_min)
        <span style="color:#66d9ef">return</span> value

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">linear</span>(y, step_matrix_generator, transformation_matrix, steps<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, h<span style="color:#f92672">=</span><span style="color:#ae81ff">0.1</span>):
    dims <span style="color:#f92672">=</span> len(y) <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>
    step_matrix <span style="color:#f92672">=</span> transformation_matrix <span style="color:#f92672">@</span> step_matrix_generator(dims, h)
    output_list <span style="color:#f92672">=</span> []

    y_n <span style="color:#f92672">=</span> y<span style="color:#f92672">.</span>copy()
    i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">while</span> i <span style="color:#f92672">&lt;</span> steps:
        y_n <span style="color:#f92672">=</span> step_matrix <span style="color:#f92672">@</span> y_n
        output_list<span style="color:#f92672">.</span>append(y_n)
        i <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>

    <span style="color:#66d9ef">return</span> Solution(output_list)
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">init_y <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>] <span style="color:#75715e">#[1,x,y,y&#39;]</span>
transformation_matrix <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array([
   [ <span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span> ],
   [ <span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span> ],
   [ <span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">0</span> ],
   [ <span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span> ]
])
solution <span style="color:#f92672">=</span> linear(
    init_y,
    expanded_euler,
    transformation_matrix,
    steps<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>, h<span style="color:#f92672">=</span><span style="color:#ae81ff">0.01</span>)
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">plt<span style="color:#f92672">.</span>plot(solution<span style="color:#f92672">.</span>x, solution<span style="color:#f92672">.</span>y_0, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Approximated Solution&#39;</span>)
plt<span style="color:#f92672">.</span>plot(solution<span style="color:#f92672">.</span>x, solution<span style="color:#f92672">.</span>x<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span>, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;True Solution&#39;</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>)
plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;x&#39;</span>) <span style="color:#75715e"># Label for the x-axis</span>
plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;y&#39;</span>) <span style="color:#75715e"># Label for the y-axis</span>
plt<span style="color:#f92672">.</span>grid(<span style="color:#66d9ef">True</span>) <span style="color:#75715e"># Show a grid for better readability</span>
plt<span style="color:#f92672">.</span>legend()
plt<span style="color:#f92672">.</span>show()
</code></pre></div><img src="post-3_files/figure-markdown_strict/cell-7-output-1.png" width="663" height="429" />
<h1 id="whats-next">What&rsquo;s Next?</h1>
<p>This method seems to work pretty well and follows the true solution pretty closely. I&rsquo;m going to stop here for now but there are many things on my wishlist that I want to build in later posts. This includes:</p>
<ul>
<li>Solving IVPs which aren&rsquo;t constant-linear</li>
<li>Solving BVPs</li>
<li>Applying this method to PDEs</li>
</ul>
<p>Stay tuned for more posts in this series where I try to implement these features into my solver!</p>
]]></content>
        </item>
        
        <item>
            <title>DIY Dev-Containers</title>
            <link>/2024/01/07/diy-dev-containers/</link>
            <pubDate>Sun, 07 Jan 2024 00:00:00 +0000</pubDate>
            
            <guid>/2024/01/07/diy-dev-containers/</guid>
            <description>Like most developers, I spend an inordinate amount of time dealing with my local installations and dependencies. When working on multiple projects, it is not uncommon to encounter conflicting versions of dependencies, and while virtual environments and package managers like Node Package Manager help to mitigate this issue, they often fall short.
Why we use Dev-Containers A common solution to these issues is the use of &amp;lsquo;dev-containers&amp;rsquo;, which have mostly been popularized by VS Code as a way to have your dependencies exist exclusively inside a Docker container, and then attach an editor to it to make your changes.</description>
            <content type="html"><![CDATA[<p>Like most developers, I spend an inordinate amount of time dealing with my local installations and dependencies. When working on multiple projects, it is not uncommon to encounter conflicting versions of dependencies, and while virtual environments and package managers like Node Package Manager help to mitigate this issue, they often fall short.</p>
<h1 id="why-we-use-dev-containers">Why we use Dev-Containers</h1>
<p>A common solution to these issues is the use of &lsquo;dev-containers&rsquo;, which have mostly been popularized by VS Code as a way to have your dependencies exist exclusively inside a Docker container, and then attach an editor to it to make your changes. Sounds great, but unfortunately for me, I have years of using Vim keybindings built into my muscle memory, so there&rsquo;s little chance of me changing my editor. So instead, I thought, why not just rebuild the dev containers for Vim?</p>
<h1 id="what-i-want">What I want</h1>
<p>So let&rsquo;s quickly scope out this project. In my development containers, I want:</p>
<ul>
<li>Isolated environments</li>
<li>Vim with my configuration built-in</li>
<li>Integration with common CLI tools</li>
<li>The ability to use Docker from inside the container</li>
<li>Secrets management (not having to re-authenticate all my tools every time I open up a container)</li>
<li>Transportability between various Unix machines</li>
</ul>
<h1 id="the-beginnings">The Beginnings</h1>
<p>So after taking a quick look around my system, I have come up with this initial Dockerfile for my development container:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dockerfile" data-lang="dockerfile"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> ubuntu as setter_upper</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ARG</span> DEBIAN_FRONTEND<span style="color:#f92672">=</span>noninteractive
<span style="color:#66d9ef">ENV</span> TZ<span style="color:#f92672">=</span>Australia/Melbourne<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Enviroment Installs</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apt-get update <span style="color:#f92672">&amp;&amp;</span> apt-get install -y <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>   curl git python3 python3-pip apt-transport-https <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>   ca-certificates software-properties-common  libpq-dev <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>   build-essential autoconf automake libtool<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">#Install Docker</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> curl -fsSL https://get.docker.com -o install-docker.sh<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> sh install-docker.sh<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Install GH CLI</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of<span style="color:#f92672">=</span>/usr/share/keyrings/githubcli-archive-keyring.gpg <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span> chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;deb [arch=</span><span style="color:#66d9ef">$(</span>dpkg --print-architecture<span style="color:#66d9ef">)</span><span style="color:#e6db74"> signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main&#34;</span> | tee /etc/apt/sources.list.d/github-cli.list &gt; /dev/null <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span> apt update <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span> apt install gh -y<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># git</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">#RUN gh auth setup-git</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">run</span> git config --global user.name <span style="color:#e6db74">&#34;Fonzzy1&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">run</span> git config --global user.email <span style="color:#e6db74">&#34;alfiechadwick@hotmail.com&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Set the base work dir</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /src</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Set the mount point as the safe dir</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> git config --global --add safe.directory /src<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Vim Setup</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> setter_upper as vim</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Enviroment Installs</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apt-get update <span style="color:#f92672">&amp;&amp;</span> apt-get install -y software-properties-common<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> add-apt-repository ppa:jonathonf/vim<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apt-get update<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Install the rest of the dependencies</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apt-get install -y <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    tig <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    fzf <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    pkg-config <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    texlive <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    r-base <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    pandoc <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    texlive-latex-extra <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    libcurl4-openssl-dev <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    libssl-dev <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    libxml2-dev <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    libfontconfig1-dev <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    libharfbuzz-dev <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    libfribidi-dev <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    libfreetype6-dev <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    libpng-dev <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    libtiff5-dev <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    libjpeg-dev <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    r-cran-tidyverse <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    vim-gtk3<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">#Install Ctags</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> curl -L https://github.com/thombashi/universal-ctags-installer/raw/master/universal_ctags_installer.sh | bash<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Install node</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> set -uex<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> mkdir -p /etc/apt/keyrings<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> echo <span style="color:#e6db74">&#34;deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main&#34;</span> |  tee /etc/apt/sources.list.d/nodesource.list<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apt-get update <span style="color:#f92672">&amp;&amp;</span> apt-get install nodejs -y;<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Install the python packages</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> pip install black pipreqs pgcli awscli socli<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Install npm packages</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> npm install --save-dev --global prettier<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Download and Install Vim-Plug</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> curl -fLo /root/.vim/autoload/plug.vim --create-dirs <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Install ACT extention</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> mkdir -p /root/.local/share/gh/extensions/gh-act<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> curl -L -o /root/.local/share/gh/extensions/gh-act/gh-act <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    <span style="color:#e6db74">&#34;https://github.com/nektos/gh-act/releases/download/v0.2.57/linux-amd64&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> chmod +x /root/.local/share/gh/extensions/gh-act/gh-act<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Install R packages, tidyvverse is installed with apt</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> R -e  <span style="color:#e6db74">&#34;install.packages(&#39;rmarkdown&#39;,  Ncpus = 6)&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> R -e  <span style="color:#e6db74">&#34;install.packages(&#39;reticulate&#39;,  Ncpus = 6)&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> R -e  <span style="color:#e6db74">&#34;install.packages(&#39;blogdown&#39;,  Ncpus = 6)&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> R -e  <span style="color:#e6db74">&#34;blogdown::install_hugo()&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> R -e  <span style="color:#e6db74">&#34;install.packages(&#39;readxl&#39;,  Ncpus = 6)&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> R -e  <span style="color:#e6db74">&#34;install.packages(&#39;knitr&#39;,  Ncpus = 6)&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> R -e  <span style="color:#e6db74">&#34;install.packages(&#39;tinytex&#39;,  Ncpus = 6)&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> R -e  <span style="color:#e6db74">&#34;install.packages(&#39;languageserver&#39;,  Ncpus = 6)&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Bring in the vim config</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> vim /root/.vim<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e">#Copy in the dotfiles</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> dotfiles /root<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Install Vim Plugins</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> vim +PlugInstall +qall<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#75715e"># Install COC plugins</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> mkdir -p /root/.config/coc/extensions <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    echo <span style="color:#e6db74">&#39;{&#34;dependencies&#34;:{}}&#39;</span> &gt; /root/.config/coc/extensions/package.json <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    grep <span style="color:#e6db74">&#39;let g:coc_global_extensions&#39;</span> /root/.vim/config/coc.vim | <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    sed <span style="color:#e6db74">&#34;s/.*\[//; s/\].*//; s/&#39;//g; s/, /\n/g&#34;</span> | <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    <span style="color:#66d9ef">while</span> read -r extension; <span style="color:#66d9ef">do</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>        echo <span style="color:#e6db74">&#34;Installing coc extension: </span>$extension<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>        cd /root/.config/coc/extensions <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>        npm install <span style="color:#e6db74">&#34;</span>$extension<span style="color:#e6db74">&#34;</span> --install-strategy<span style="color:#f92672">=</span>shallow --save; <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>    <span style="color:#66d9ef">done</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> vim<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>I won&rsquo;t bother explaining most of it since it&rsquo;s really just a heap of install statements, but here are some of the interesting parts:</p>
<ul>
<li>I needed to add the WORKDIR to the list of safe directories for git since if I mount the file, the ownership will be wrong.</li>
<li>I needed to manually install the gh act extension as you can&rsquo;t do it normally without authenticating with a gh token, something I don&rsquo;t want to do in a public container.</li>
<li>Coc Extensions needed to be manually installed to prevent them from installing every time I started the container. Just calling <code>Vim +CocInstall</code> didn&rsquo;t work because it&rsquo;s an async process.</li>
</ul>
<p>So at this point, I have the first three of my requirements done. Because I&rsquo;m using Docker, I have an isolated environment every time I boot up the container. By copying over my Vim config files, I have my Vim config baked in, and with some of the commands in the Dockerfile, I am able to have it set up. Finally, by installing a heap of CLI tools, I am able to do most of my work from inside the Vim terminal.</p>
<h1 id="docker-in-docker">Docker In Docker</h1>
<p>The next thing to tick off the list is being able to run Docker commands from within the container. Although I have installed Docker, running any Docker command inside the container will say the daemon isn&rsquo;t running.</p>
<p>I could put in a lot of work to give the container the ability to create its own containers, but that would be a real pain. Instead, I can simply mount the Docker daemon onto the container, so that running Docker commands inside the container will invoke the system Docker.</p>
<p>To accomplish this, I can execute the container using the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">docker run -it -v /var/run/docker.sock:/var/run/docker.sock fonzzy1/vim
</code></pre></div><h1 id="secrets-management">Secrets Management</h1>
<p>The next thing to implement is secrets management. I currently have all of these stored in config files in my home directory, which isn&rsquo;t best practice in a Docker container that I want to make public. Instead, I can put all my secrets in a .env file and reference them in the Docker container. This can be done using the &ndash;env-file flag when running my Docker container.</p>
<h1 id="portability">Portability</h1>
<p>The final goal on my list is to make the container portable between my multiple machines. This is achieved through the use of Docker Hub, which will allow me to download the image from Docker Hub. The only other thing I need is to ensure that Docker is set up on the other machine. For this, I have written a quick script to handle the setup process.</p>
<p>```{bash, eval=FALSE}
#!/bin/bash
set -e</p>
<h1 id="dot-progress-indicator">Dot Progress Indicator</h1>
<p>progress() {
local pid=$2 # PID of the process we&rsquo;re waiting for
local text=$1
local delay=2 # 2-second delay between dots
local dot=&quot;.&quot;</p>
<pre><code>printf &quot;%s:&quot; &quot;$text&quot;
while [ &quot;$(ps a | awk '{print $1}' | grep -w $pid)&quot; ]; do
    printf &quot;%s&quot; &quot;$dot&quot;
    sleep $delay
done
printf &quot; Done!\n&quot;
</code></pre>
<p>}</p>
<p>progress &ldquo;Updating package list&rdquo; $(sudo apt-get update &gt; /dev/null 2&gt;&amp;1 &amp; echo $!)</p>
<p>progress &ldquo;Installing Useful Packages&rdquo; $(sudo apt-get install -y curl &gt; /dev/null 2&gt;&amp;1 &amp; echo $!)</p>
<p>progress &ldquo;Fetching Docker Install Script&rdquo; $(curl -fsSL <a href="https://get.docker.com">https://get.docker.com</a> -o install-docker.sh &gt; /dev/null 2&gt;&amp;1 &amp; echo $!)</p>
<p>progress &ldquo;Installing Docker&rdquo; $(sudo sh install-docker.sh &gt; /dev/null 2&gt;&amp;1 &amp; echo $!)</p>
<p>progress &ldquo;Adding the current user to the Docker group&rdquo; $(sudo usermod -aG docker $USER &gt; /dev/null 2&gt;&amp;1 &amp; echo $!)</p>
<p>progress &ldquo;Pulling Image&rdquo; docker pull fonzzy1/vim</p>
<p>echo &ldquo;Setup complete!&rdquo;</p>
<pre><code># Wrapping it up

My so now I have my dev containers running, my only gripe is the stupidly long docker commands that I need to type out to get it running, such as:



```{bash, eval=FALSE}
current_dir=&quot;$(pwd)&quot;
dir_name=&quot;$(basename &quot;$current_dir&quot;)&quot;

docker run -it \
  --env-file ~/.env \
  --net=host \
  --rm \
  -v &quot;$current_dir:/$(dir_name)&quot; \
  -w &quot;/$dir_name&quot; \
  -v /var/run/docker.sock:/var/run/docker.sock \
  fonzzy1/vim \
  /bin/bash -c &quot;gh auth setup-git; git config --global --add safe.directory /$dir_name; vim&quot;
</code></pre>
<p>So I decided to make this into a little Python script that allows me to quickly run these commands. I also added an integration with <code>gh</code> that lets me clone repos in order to edit them on the fly.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/bin/python3</span>
<span style="color:#f92672">import</span> subprocess
<span style="color:#f92672">import</span> argparse
<span style="color:#f92672">import</span> os


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">run_local</span>(args):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Runs a command in a Docker container with the current directory mounted.
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">    Args:
</span><span style="color:#e6db74">        args (argparse.Namespace): The command-line arguments.
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">    Returns:
</span><span style="color:#e6db74">        None
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    current_dir <span style="color:#f92672">=</span> subprocess<span style="color:#f92672">.</span>run([<span style="color:#e6db74">&#34;pwd&#34;</span>], capture_output<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, text<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)<span style="color:#f92672">.</span>stdout<span style="color:#f92672">.</span>strip()
    dir_name <span style="color:#f92672">=</span> current_dir<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;/&#34;</span>)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]  <span style="color:#75715e"># Get the name of the current directory</span>

    subprocess<span style="color:#f92672">.</span>run(
        [
            <span style="color:#e6db74">&#34;docker&#34;</span>,
            <span style="color:#e6db74">&#34;run&#34;</span>,
            <span style="color:#e6db74">&#34;-it&#34;</span>,
            <span style="color:#e6db74">&#34;--env-file&#34;</span>,
            os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>expanduser(<span style="color:#e6db74">&#34;~/.env&#34;</span>),
            <span style="color:#e6db74">&#34;--net=host&#34;</span>,
            <span style="color:#e6db74">&#34;--rm&#34;</span>,
            <span style="color:#e6db74">&#34;-v&#34;</span>,
            <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">{</span>current_dir<span style="color:#e6db74">}</span><span style="color:#e6db74">:/</span><span style="color:#e6db74">{</span>dir_name<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>,  <span style="color:#75715e"># Mount to a directory with the same name</span>
            <span style="color:#e6db74">&#34;-w&#34;</span>,
            <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;/</span><span style="color:#e6db74">{</span>dir_name<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>,  <span style="color:#75715e"># Set the working directory</span>
            <span style="color:#e6db74">&#34;-v&#34;</span>,
            <span style="color:#e6db74">&#34;/var/run/docker.sock:/var/run/docker.sock&#34;</span>,
            <span style="color:#e6db74">&#34;fonzzy1/vim&#34;</span>,
            <span style="color:#e6db74">&#34;/bin/bash&#34;</span>,
            <span style="color:#e6db74">&#34;-c&#34;</span>,
            <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;gh auth setup-git; git config --global --add safe.directory /</span><span style="color:#e6db74">{</span>dir_name<span style="color:#e6db74">}</span><span style="color:#e6db74">; vim&#34;</span>,
        ]
    )


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">run_gh</span>(args):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Runs a command for cloning a GitHub repository in a Docker container.
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">    Args:
</span><span style="color:#e6db74">        args (argparse.Namespace): The command-line arguments.
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">    Returns:
</span><span style="color:#e6db74">        None
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    name <span style="color:#f92672">=</span> args<span style="color:#f92672">.</span>repo<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#e6db74">&#34;-&#34;</span>)
    repo <span style="color:#f92672">=</span> args<span style="color:#f92672">.</span>repo<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;/&#34;</span>)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;/&#34;</span> <span style="color:#f92672">in</span> args<span style="color:#f92672">.</span>repo <span style="color:#66d9ef">else</span> args<span style="color:#f92672">.</span>repo
    command <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;gh auth setup-git; gh repo clone </span><span style="color:#e6db74">{</span>args<span style="color:#f92672">.</span>repo<span style="color:#e6db74">}</span><span style="color:#e6db74"> /</span><span style="color:#e6db74">{</span>repo<span style="color:#e6db74">}</span><span style="color:#e6db74">; &#34;</span>

    <span style="color:#75715e"># Additional git command based on input parameters</span>
    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>branch:
        command <span style="color:#f92672">+=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;git switch </span><span style="color:#e6db74">{</span>args<span style="color:#f92672">.</span>branch<span style="color:#e6db74">}</span><span style="color:#e6db74">; &#34;</span>
    <span style="color:#66d9ef">elif</span> args<span style="color:#f92672">.</span>pullrequest:
        command <span style="color:#f92672">+=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;gh pr checkout </span><span style="color:#e6db74">{</span>args<span style="color:#f92672">.</span>pullrequest<span style="color:#e6db74">}</span><span style="color:#e6db74">; &#34;</span>
    <span style="color:#66d9ef">elif</span> args<span style="color:#f92672">.</span>checkout:
        command <span style="color:#f92672">+=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;git checkout -b </span><span style="color:#e6db74">{</span>args<span style="color:#f92672">.</span>checkout<span style="color:#e6db74">}</span><span style="color:#e6db74">; git push --set-upstream origin </span><span style="color:#e6db74">{</span>args<span style="color:#f92672">.</span>checkout<span style="color:#e6db74">}</span><span style="color:#e6db74">; &#34;</span>

    <span style="color:#75715e"># Update submodules if any</span>
    command <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;git submodule update --init; vim; &#34;</span>

    <span style="color:#75715e"># Check for unpushed or uncommitted changes before exiting Vim</span>
    check_changes_command <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39; </span><span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#e6db74">        CHANGES=$(git status --porcelain); </span><span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#e6db74">        UPSTREAM_CHANGES=$(git cherry -v); </span><span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#e6db74">        if [ -n &#34;$CHANGES&#34; ] || [ -n &#34;$UPSTREAM_CHANGES&#34; ]; then </span><span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#e6db74">            vim -c </span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">:G | only</span><span style="color:#ae81ff">\&#39;</span><span style="color:#e6db74">; </span><span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#e6db74">        fi&#39;</span>

    <span style="color:#75715e"># Final combined command</span>
    final_command <span style="color:#f92672">=</span> command <span style="color:#f92672">+</span> check_changes_command

    subprocess<span style="color:#f92672">.</span>run(
        [
            <span style="color:#e6db74">&#34;docker&#34;</span>,
            <span style="color:#e6db74">&#34;run&#34;</span>,
            <span style="color:#e6db74">&#34;-it&#34;</span>,
            <span style="color:#e6db74">&#34;--env-file&#34;</span>,
            os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>expanduser(<span style="color:#e6db74">&#34;~/.env&#34;</span>),
            <span style="color:#e6db74">&#34;--name&#34;</span>,
            name,
            <span style="color:#e6db74">&#34;--net=host&#34;</span>,
            <span style="color:#e6db74">&#34;--rm&#34;</span>,
            <span style="color:#e6db74">&#34;-w&#34;</span>,
            <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;/</span><span style="color:#e6db74">{</span>repo<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>,
            <span style="color:#e6db74">&#34;-v&#34;</span>,
            <span style="color:#e6db74">&#34;/var/run/docker.sock:/var/run/docker.sock&#34;</span>,
            <span style="color:#e6db74">&#34;fonzzy1/vim&#34;</span>,
            <span style="color:#e6db74">&#34;/bin/bash&#34;</span>,
            <span style="color:#e6db74">&#34;-c&#34;</span>,
            final_command,
        ]
    )


<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
    parser <span style="color:#f92672">=</span> argparse<span style="color:#f92672">.</span>ArgumentParser()
    subparsers <span style="color:#f92672">=</span> parser<span style="color:#f92672">.</span>add_subparsers(title<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;commands&#34;</span>, dest<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;command&#34;</span>)

    local_parser <span style="color:#f92672">=</span> subparsers<span style="color:#f92672">.</span>add_parser(
        <span style="color:#e6db74">&#34;local&#34;</span>, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Run command for a container with local directory&#34;</span>
    )
    local_parser<span style="color:#f92672">.</span>set_defaults(func<span style="color:#f92672">=</span>run_local)

    gh_parser <span style="color:#f92672">=</span> subparsers<span style="color:#f92672">.</span>add_parser(<span style="color:#e6db74">&#34;gh&#34;</span>, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Run command for cloning a repo&#34;</span>)
    gh_parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#34;repo&#34;</span>, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Specify the repository for cloning&#34;</span>)
    gh_parser<span style="color:#f92672">.</span>set_defaults(func<span style="color:#f92672">=</span>run_gh)
    gh_parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#34;-b&#34;</span>, <span style="color:#e6db74">&#34;--branch&#34;</span>, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;The branch to checkout&#34;</span>)
    gh_parser<span style="color:#f92672">.</span>add_argument(
        <span style="color:#e6db74">&#34;-p&#34;</span>, <span style="color:#e6db74">&#34;--pullrequest&#34;</span>, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;The pull request number to checkout&#34;</span>
    )
    gh_parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#34;-c&#34;</span>, <span style="color:#e6db74">&#34;--checkout&#34;</span>, help<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Checkout a new branch from main&#34;</span>)

    args <span style="color:#f92672">=</span> parser<span style="color:#f92672">.</span>parse_args()
    args<span style="color:#f92672">.</span>func(args)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Making a Python Library to solve differential Equations</title>
            <link>/2023/12/29/making-a-python-library-to-solve-differential-equations/</link>
            <pubDate>Fri, 29 Dec 2023 00:00:00 +0000</pubDate>
            
            <guid>/2023/12/29/making-a-python-library-to-solve-differential-equations/</guid>
            <description>After having the initial idea I wrote up in a previous post, I thought it was a good idea to turn it into a python library so that I can use it as part of my other projects.
It also gives me a chance to see numerically how well the new method works compared to the Euler method.
First Steps So in the last post I set out the method such that:</description>
            <content type="html"><![CDATA[<p>After having the initial idea I wrote up in a <a href="../../../2023/12/18/using-taylor-series-to-improve-the-euler-method/">previous post</a>, I thought it was a good idea to turn it into a python library so that I can use it as part of my other projects.</p>
<p>It also gives me a chance to see numerically how well the new method works compared to the Euler method.</p>
<h1 id="first-steps">First Steps</h1>
<p>So in the last post I set out the method such that:</p>
<p><img src="%5Cbegin%7Bbmatrix%7D%0Ay%28x%2Bh%29%5C%5C%0Ay%27%28x%2Bh%29%5C%5C%0Ay%27%27%28x%2Bh%29%5C%5C%0A...%5C%5C%0Ay%5E%7Bn%7D%28x%2Bh%29%5C%5C%0A%5Cend%7Bbmatrix%7D%20%3D%20%20S%20%5Ccdot%20%5Cbegin%7Bbmatrix%7D%0Ay%28x%29%5C%5C%0Ay%27%28x%29%5C%5C%0Ay%27%27%28x%29%5C%5C%0A...%5C%5C%0Ay%5E%7Bn%7D%28x%29%5C%5C%0A%5Cend%7Bbmatrix%7D%20%2B%20%5Cepsilon" alt="\begin{bmatrix}y(x+h)\\y\'(x+h)\\y\'\'(x+h)\\\...\\y^{n}(x+h)\\\end{bmatrix} =  S \cdot \begin{bmatrix}y(x)\\y\'(x)\\y\'\'(x)\\\...\\y^{n}(x)\\\end{bmatrix} + \epsilon" title="\begin{bmatrix}
y(x+h)\
y'(x+h)\
y''(x+h)\
...\
y^{n}(x+h)\
\end{bmatrix} =  S \cdot \begin{bmatrix}
y(x)\
y'(x)\
y''(x)\
...\
y^{n}(x)\
\end{bmatrix} + \epsilon"></p>
<p>In the Euler method, <img src="S" alt="" title="S"> is:</p>
<p><img src="%5Cbegin%7Bbmatrix%7D%0A1%20%26%20h%20%26%200%20%26%20%20...%20%26%200%5C%5C%0A0%20%26%201%20%26%20h%20%26%20%20...%20%26%200%5C%5C%0A0%20%26%200%20%26%201%20%26%20%20...%20%26%200%5C%5C%0A...%20%26%20...%20%26%20...%20%26%20%20...%20%26%20...%5C%5C%0A0%20%26%200%20%26%200%20%26%20%20...%20%26%201%5C%5C%0A%5Cend%7Bbmatrix%7D" alt="\begin{bmatrix}1 & h & 0 &  \... & 0\\0 & 1 & h &  \... & 0\\0 & 0 & 1 &  \... & 0\\\... & \... & \... &  \... & \...\\0 & 0 & 0 &  \... & 1\\\end{bmatrix}" title="\begin{bmatrix}
1 &amp; h &amp; 0 &amp;  ... &amp; 0\
0 &amp; 1 &amp; h &amp;  ... &amp; 0\
0 &amp; 0 &amp; 1 &amp;  ... &amp; 0\
... &amp; ... &amp; ... &amp;  ... &amp; ...\
0 &amp; 0 &amp; 0 &amp;  ... &amp; 1\
\end{bmatrix}"></p>
<p>And in the new method I proposed, <img src="S" alt="" title="S"> is now:</p>
<p><img src="%5Cbegin%7Bbmatrix%7D%0A1%20%26%20%5Cfrac%7Bh%7D%7B1%21%7D%20%26%20%5Cfrac%7Bh%5E2%7D%7B2%21%7D%20%26%20%20...%20%26%20%5Cfrac%7Bh%5En%7D%7Bn%21%7D%5C%5C%0A0%20%26%201%20%26%20%5Cfrac%7Bh%7D%7B1%21%7D%20%26%20%20...%20%26%20%5Cfrac%7Bh%5E%7Bn-1%7D%7D%7B%28n-1%29%21%7D%5C%5C%0A0%20%26%200%20%26%201%20%26%20%20...%20%26%20%5Cfrac%7Bh%5E%7Bn-2%7D%7D%7B%28n-2%29%21%7D%5C%5C%0A...%20%26%20...%20%26%20...%20%26%20%20...%20%26%20...%5C%5C%0A0%20%26%200%20%26%200%20%26%20%20...%20%26%201%5C%5C%0A%5Cend%7Bbmatrix%7D" alt="\begin{bmatrix}1 & \frac{h}{1!} & \frac{h^2}{2!} &  \... & \frac{h^n}{n!}\\0 & 1 & \frac{h}{1!} &  \... & \frac{h^{n-1}}{(n-1)!}\\0 & 0 & 1 &  \... & \frac{h^{n-2}}{(n-2)!}\\\... & \... & \... &  \... & \...\\0 & 0 & 0 &  \... & 1\\\end{bmatrix}" title="\begin{bmatrix}
1 &amp; \frac{h}{1!} &amp; \frac{h^2}{2!} &amp;  ... &amp; \frac{h^n}{n!}\
0 &amp; 1 &amp; \frac{h}{1!} &amp;  ... &amp; \frac{h^{n-1}}{(n-1)!}\
0 &amp; 0 &amp; 1 &amp;  ... &amp; \frac{h^{n-2}}{(n-2)!}\
... &amp; ... &amp; ... &amp;  ... &amp; ...\
0 &amp; 0 &amp; 0 &amp;  ... &amp; 1\
\end{bmatrix}"></p>
<p>Converting these matrices into python is fairly easy.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
<span style="color:#f92672">import</span> math


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">euler</span>(dims, h):
    <span style="color:#75715e"># Start with an identity matrix</span>
    step_matrix <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>identity(dims)
    <span style="color:#75715e"># Add in all the h values</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(dims <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>):
        step_matrix[i, i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> h
    <span style="color:#66d9ef">return</span> step_matrix


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">expanded_euler</span>(dims, h):
    step_matrix <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>zeros((dims, dims))
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(dims):
        <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(i, dims):
            <span style="color:#75715e"># Is 1, and h at j-i =0, 1 respectively</span>
            step_matrix[i, j] <span style="color:#f92672">=</span> h <span style="color:#f92672">**</span> (j <span style="color:#f92672">-</span> i) <span style="color:#f92672">/</span> math<span style="color:#f92672">.</span>factorial(j <span style="color:#f92672">-</span> i)
    <span style="color:#66d9ef">return</span> step_matrix
</code></pre></div><h1 id="making-a-step-simulation">Making a step simulation</h1>
<p>Now that we have the stepping matrices, we can use them to iterate from an initial value. All we have to do is generate the stepping matrix for the given problem, and then for each step, we just multiple the previous step by the stepping matrix.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">IVP</span>(x, y, step_matrix_generator, steps<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, h<span style="color:#f92672">=</span><span style="color:#ae81ff">0.1</span>):
    dims <span style="color:#f92672">=</span> len(y)
    step_matrix <span style="color:#f92672">=</span> step_matrix_generator(dims, h)
    output_dict <span style="color:#f92672">=</span> {x: y}

    x_n <span style="color:#f92672">=</span> x
    y_n <span style="color:#f92672">=</span> y<span style="color:#f92672">.</span>copy()
    i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">while</span> i <span style="color:#f92672">&lt;</span> steps:
        y_n <span style="color:#f92672">=</span> step_matrix <span style="color:#f92672">@</span> y_n
        x_n <span style="color:#f92672">+=</span> h
        output_dict[x_n] <span style="color:#f92672">=</span> y_n
        i <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>

    <span style="color:#66d9ef">return</span> output_dict
</code></pre></div><h1 id="testing-and-comparing-the-methods">Testing and Comparing the methods</h1>
<p>Now we can run the simulations, let&rsquo;s see how good they are.
Say you throw a ball up in the air and track its vertical position. The path of the ball is described by the equation <img src="y%27%27%20%3D%20-9.8" alt="y\'\' = -9.8" title="y'' = -9.8">. We can know for a fact that the solution to this equation is <img src="%5Cfrac%7B-9.8%7D%7B2%7Dx%5E2%2BV_0x%2BP_0" alt="\frac{-9.8}{2}x^2+V_0x+P_0" title="\frac{-9.8}{2}x^2+V_0x+P_0">, where <img src="V_0" alt="" title="V_0"> is the initial velocity and <img src="P_0" alt="" title="P_0"> is the initial position. So now lets compare the real solutions to the simulations.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Time starts at 0</span>
x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#75715e"># Start the object moving upwards with a velocity of 10</span>
y <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array([<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">10</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9.8</span>])

euler_result <span style="color:#f92672">=</span> IVP(x, y, euler)
expanded_euler_result <span style="color:#f92672">=</span>IVP(x, y, expanded_euler)
true_result <span style="color:#f92672">=</span> {x: np<span style="color:#f92672">.</span>array([
                    <span style="color:#f92672">-</span><span style="color:#ae81ff">4.9</span> <span style="color:#f92672">*</span> x<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">*</span> x,
                    <span style="color:#f92672">-</span><span style="color:#ae81ff">9.8</span> <span style="color:#f92672">*</span> x <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span>,
                    <span style="color:#f92672">-</span><span style="color:#ae81ff">9.8</span>
                ]) <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> np<span style="color:#f92672">.</span>arange(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1.1</span>, <span style="color:#ae81ff">0.1</span>)}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
<span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
<span style="color:#f92672">import</span> mplcatppuccin
<span style="color:#f92672">import</span> matplotlib <span style="color:#66d9ef">as</span> mpl
<span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt

mpl<span style="color:#f92672">.</span>style<span style="color:#f92672">.</span>use(<span style="color:#e6db74">&#34;macchiato&#34;</span>)

<span style="color:#75715e"># Extracting data for plotting</span>
euler_xs <span style="color:#f92672">=</span> list(euler_result<span style="color:#f92672">.</span>keys())
euler_ys <span style="color:#f92672">=</span> [position[<span style="color:#ae81ff">0</span>] <span style="color:#66d9ef">for</span> position <span style="color:#f92672">in</span> euler_result<span style="color:#f92672">.</span>values()]

expanded_euler_xs <span style="color:#f92672">=</span> list(expanded_euler_result<span style="color:#f92672">.</span>keys())
expanded_euler_ys <span style="color:#f92672">=</span> [position[<span style="color:#ae81ff">0</span>] <span style="color:#66d9ef">for</span> position <span style="color:#f92672">in</span> expanded_euler_result<span style="color:#f92672">.</span>values()]

true_xs <span style="color:#f92672">=</span> list(true_result<span style="color:#f92672">.</span>keys())
true_ys <span style="color:#f92672">=</span> [position[<span style="color:#ae81ff">0</span>] <span style="color:#66d9ef">for</span> position <span style="color:#f92672">in</span> true_result<span style="color:#f92672">.</span>values()]

<span style="color:#75715e"># Plotting the results</span>
plt<span style="color:#f92672">.</span>plot(euler_xs, euler_ys, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Euler Method&#39;</span>)
plt<span style="color:#f92672">.</span>plot(expanded_euler_xs, expanded_euler_ys, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Expanded Euler Method&#39;</span>)
plt<span style="color:#f92672">.</span>plot(true_xs, true_ys, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;True Solution&#39;</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;:&#39;</span>)

plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Projectile Motion under Gravity&#39;</span>)
plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Time (seconds)&#39;</span>)
plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Height (meters)&#39;</span>)
plt<span style="color:#f92672">.</span>legend()
plt<span style="color:#f92672">.</span>grid(<span style="color:#66d9ef">True</span>)
plt<span style="color:#f92672">.</span>show()
</code></pre></div><img src="post-2_files/figure-markdown_strict/cell-5-output-1.png" width="651" height="449" />
<p>So from here, we&rsquo;re looking pretty good. The new method is much closer to the true solution than the Euler method in in this scenario. However, when working with numerical methods, it generally isn&rsquo;t too hard to improve the accuracy of the model, but there will be a trade off in computation time. So lets see how much longer it takes to compute the approximation with the expanded method comparing it to the original.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> timeit

<span style="color:#75715e"># Define the step counts to test</span>
steps_list <span style="color:#f92672">=</span> [<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">100</span>, <span style="color:#ae81ff">1000</span>, <span style="color:#ae81ff">10000</span>, <span style="color:#ae81ff">100000</span>]

<span style="color:#75715e"># Lists to store execution times for each method</span>
euler_times <span style="color:#f92672">=</span> []
expanded_euler_times <span style="color:#f92672">=</span> []

<span style="color:#75715e"># Testing the functions with the different step counts and store the execution times</span>
<span style="color:#66d9ef">for</span> steps <span style="color:#f92672">in</span> steps_list:
    euler_time <span style="color:#f92672">=</span> timeit<span style="color:#f92672">.</span>timeit(<span style="color:#66d9ef">lambda</span>: IVP(x, y, euler, steps), number<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
    expanded_euler_time <span style="color:#f92672">=</span> timeit<span style="color:#f92672">.</span>timeit(<span style="color:#66d9ef">lambda</span>: IVP(x, y, expanded_euler, steps), number<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
    
    euler_times<span style="color:#f92672">.</span>append(euler_time)
    expanded_euler_times<span style="color:#f92672">.</span>append(expanded_euler_time)
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Now we plot the results</span>
plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">5</span>))

<span style="color:#75715e"># Plot Euler times</span>
plt<span style="color:#f92672">.</span>plot(steps_list, euler_times, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Euler Method&#39;</span>, marker<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;o&#39;</span>)

<span style="color:#75715e"># Plot Expanded Euler times</span>
plt<span style="color:#f92672">.</span>plot(steps_list, expanded_euler_times, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Expanded Euler Method&#39;</span>, marker<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;s&#39;</span>)

<span style="color:#75715e"># Adding labels and title</span>
plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Number of Steps&#39;</span>)
plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Execution Time (seconds)&#39;</span>)
plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Execution Time for Euler Methods with Different Steps&#39;</span>)
plt<span style="color:#f92672">.</span>xscale(<span style="color:#e6db74">&#39;log&#39;</span>)  <span style="color:#75715e"># Since we have a wide range of steps, a log scale might be more informative</span>
plt<span style="color:#f92672">.</span>yscale(<span style="color:#e6db74">&#39;log&#39;</span>)  <span style="color:#75715e"># Using a log scale for time to better see differences for small times</span>
plt<span style="color:#f92672">.</span>legend()

<span style="color:#75715e"># Show the plot</span>
plt<span style="color:#f92672">.</span>grid(<span style="color:#66d9ef">True</span>)
plt<span style="color:#f92672">.</span>show()
</code></pre></div><img src="post-2_files/figure-markdown_strict/cell-7-output-1.png" width="822" height="451" />
<p>Looking at this graph, we can see that we&rsquo;re not sacrificing compute time for better accuracy, so this seems like a big win, though I haven&rsquo;t optimised the Euler method that much. But overall, the new method seems to show some promise in approximating differential equations.</p>
]]></content>
        </item>
        
        <item>
            <title>A new way to look at Categories in Hugo Blogs</title>
            <link>/2023/12/28/a-new-way-to-look-at-categories-in-hugo-blogs/</link>
            <pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate>
            
            <guid>/2023/12/28/a-new-way-to-look-at-categories-in-hugo-blogs/</guid>
            <description>This site is built through blogdown, which is a marvellous little R package that integrates Hugo sites into a R workflow. A nice thing about Hugo sites are the large number of themes available to quickly integrate with your site to change the vibe. My theme is mostly just a recolored version of the hello-friend-ng theme, using catppuccin for the colors.
My only gripe with the theme is that it uses a default list for all types of content.</description>
            <content type="html"><![CDATA[<p>This site is built through <a href="https://bookdown.org/yihui/blogdown/">blogdown</a>, which is a marvellous little R package that integrates Hugo sites into a R workflow. A nice thing about Hugo sites are the large number of themes available to quickly integrate with your site to change the vibe. My theme is mostly just a recolored version of the <a href="https://github.com/rhazdon/hugo-theme-hello-friend-ng">hello-friend-ng</a> theme, using <a href="https://github.com/catppuccin">catppuccin</a> for the colors.</p>
<p>My only gripe with the theme is that it uses a default list for all types of content. If you want to look at all the posts, you see a list of posts; for tags, similarly, you get a list of tags.</p>
<figure>
<img src="../../../post/tag-graph/1.png" alt="How the list of tags looks by default" />
<figcaption aria-hidden="true">How the list of tags looks by default</figcaption>
</figure>
<h1 id="looking-at-the-edges">Looking at the edges</h1>
<p>A software that I&rsquo;ve always been meaning to use is <a href="https://obsidian.md/">obsidian</a> which is a note taking and organising software which uses plaintext. One of its features has always really intrigued me, is the graph view which organises all of the notes based on their connections.</p>
<figure>
<img src="https://i.redd.it/49l0t8v09yr91.png" alt="An example of an obsidian graph (Sourced from u/jannesjy on reddit)" />
<figcaption aria-hidden="true">An example of an obsidian graph (Sourced from u/jannesjy on reddit)</figcaption>
</figure>
<p>I thought it would be cool to implement something like this in my Hugo site. Something that lets you not only look at all the tags, but see how they are connected.</p>
<h1 id="starting-small">Starting small</h1>
<p>Before making the graph view, I wanted to make something that allows you to see all the posts with two of the tags. That way, when you click on a node or an edge in the graph you can be taken through to see all the posts with the relevant tags.</p>
<p>Unfortunately the scripting language used by Hugo doesn&rsquo;t have this kind of filtering built in. So I have to do it rather un-elegantly in JavaScript.</p>
<p>To make the linking easier, I added the second tag using the query string so that it can be reached just using a href link.</p>
<pre tabindex="0"><code class="language-{html}" data-lang="{html}">{{ define &quot;main&quot; }}
&lt;main class=&quot;posts&quot;&gt;
  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;

  &lt;div id=&quot;posts-container&quot;&gt;
    {{ $pages := where .Data.Pages &quot;Params.tags&quot; &quot;intersect&quot; (slice .Title) }}
    {{ $paginator := .Paginate $pages }}

    &lt;ul class=&quot;posts-list&quot;&gt;
      {{ range $paginator.Pages }}
      &lt;li class=&quot;post-item&quot; data-tags=&quot;{{  .Params.tags | jsonify }}&quot;&gt;
        &lt;a href=&quot;{{ .Permalink }}&quot; class=&quot;post-item-inner&quot;&gt;
          &lt;span class=&quot;post-title&quot;&gt;{{ .Title }}&lt;/span&gt;
          &lt;span class=&quot;post-date&quot;&gt;{{ .Date.Format &quot;January 2, 2006&quot; }}&lt;/span&gt;
        &lt;/a&gt;
      &lt;/li&gt;
      {{ end }}
    &lt;/ul&gt;

    {{ partial &quot;pagination-list.html&quot; . }}
  &lt;/div&gt;
&lt;/main&gt;

&lt;script&gt;
  document.addEventListener(&quot;DOMContentLoaded&quot;, function () {
    const urlParams = new URLSearchParams(window.location.search);
    let additionalTag = urlParams.get(&quot;tag&quot;);
    // Capitalize the first letter of each word
    function toTitleCase(str) {
      return str.replace(/\w\S*/g, function (txt) {
        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
      });
    }

    // Update the title with the capitalized query string tag if it exists
    if (additionalTag) {
      additionalTag = toTitleCase(additionalTag.replace(/-/g, &quot; &quot;));
      document.querySelector(&quot;h1&quot;).textContent += &quot; &amp; &quot; + additionalTag;
    }

    // Convert the additionalTag to lowercase and hyphenated format
    if (additionalTag) {
      additionalTag = additionalTag.toLowerCase().replace(/\s+/g, &quot;-&quot;);
      console.log(additionalTag);

      const posts = document.querySelectorAll(&quot;.post-item&quot;);

      posts.forEach((post) =&gt; {
        const tagsString = JSON.parse(post.getAttribute(&quot;data-tags&quot;));

        // Convert tag string into a lowercase, hyphenated array of tags
        const tags = tagsString.map((tag) =&gt;
          tag.trim().toLowerCase().replace(/\s+/g, &quot;-&quot;)
        );

        console.log(tags);

        // If the additional tag is not in the post's tags, hide the post.
        if (!tags.includes(additionalTag)) {
          post.style.display = &quot;none&quot;;
        }
      });
    }
  });
&lt;/script&gt;
{{ end }}
</code></pre><h1 id="building-the-graph">Building the graph</h1>
<p>Similar to the issue with creating the post listing page, constructing the graph requires some rather unwieldy JavaScript to make it work.</p>
<h2 id="fetching-all-the-posts">Fetching All the Posts</h2>
<p>The first thing to do is to fetch all the posts from across the site with their tags.</p>
<pre tabindex="0"><code class="language-{JavaScript}" data-lang="{JavaScript}">// Create an array to hold all posts and their details
var postsData = [];

// Iterate through each page to collect its title, permalink, and tags
{{ range .Site.RegularPages }}
  // Use 'jsonify' to convert tags to a JSON array, if tags are not present, default to an empty array
  var tags = {{ if .Params.tags }}{{ .Params.tags }}{{ else }}[]{{ end }};
  postsData.push({
    title: {{ .Title }},
    permalink: {{ .RelPermalink }},
    tags: tags // This is now a real JavaScript array
  });
{{ end }}

// Log the posts information in the console as JSON
console.log(postsData);

var tagsToPosts = {};

// Loop through each post
postsData.forEach(function(post) {
  // Loop through each tag in the current post
  post.tags.forEach(function(tag) {
    // If the tag hasn't been added to tagsToPosts, initialize it with an empty array
    if (!tagsToPosts.hasOwnProperty(tag)) {
      tagsToPosts[tag] = [];
    }
    // Add the current post to the array for this tag
    tagsToPosts[tag].push({
      title: post.title,
      permalink: post.permalink
    });
  });
});
</code></pre><h2 id="invert-the-keys-of-the-list">Invert the keys of the list</h2>
<p>Now that there is a list of posts with there tags, we can now invert the list so that we have all the tags with their posts.</p>
<pre tabindex="0"><code class="language-{JavaScript}" data-lang="{JavaScript}">var tagsToPosts = {};

// Loop through each post
postsData.forEach(function(post) {
  // Loop through each tag in the current post
  post.tags.forEach(function(tag) {
    // If the tag hasn't been added to tagsToPosts, initialize it with an empty array
    if (!tagsToPosts.hasOwnProperty(tag)) {
      tagsToPosts[tag] = [];
    }
    // Add the current post to the array for this tag
    tagsToPosts[tag].push({
      title: post.title,
      permalink: post.permalink
    });
  });
});
// Log the new tags to posts dictionary
console.log(tagsToPosts);
</code></pre><h2 id="make-a-matrix-of-connections">Make a matrix of connections</h2>
<p>With the list of tags, we can now make a matrix showing all of the connections between the tags. This is really inefficient but it works well enough that I don&rsquo;t think it requires too much optimisation.</p>
<pre tabindex="0"><code class="language-{JavaScript}" data-lang="{JavaScript}">// Get all unique tags
var uniqueTags = Object.keys(tagsToPosts);

// Initialize the matrix with zeros
var tagMatrix = uniqueTags.map(() =&gt; uniqueTags.map(() =&gt; 0));

// Function to check the intersection of posts for two tags
function getSharedPostsCount(tagA, tagB, tagsToPosts) {
  var postsA = tagsToPosts[tagA];
  var postsB = tagsToPosts[tagB];
  var shared = postsA.filter(postA =&gt; postsB.some(postB =&gt; postA.permalink === postB.permalink));
  return shared.length;
}

// Populate the matrix with shared post counts
for (let i = 0; i &lt; uniqueTags.length; i++) {
  for (let j = i; j &lt; uniqueTags.length; j++) {
    // We only need to calculate the upper triangular matrix due to symmetry
    var sharedCount = getSharedPostsCount(uniqueTags[i], uniqueTags[j], tagsToPosts);
    tagMatrix[i][j] = sharedCount;
    tagMatrix[j][i] = sharedCount; // The matrix is symmetric so we mirror the count
  }
}

// Log the matrix
console.log(tagMatrix);
</code></pre><h2 id="build-the-graph">Build the graph</h2>
<p>Building the graph was honestly one of the easiest parts of this project. The <a href="https://d3js.org/">d3js</a> library has an object called a force directed graph, has most of the features I would want baked in.</p>
<p>The only interesting thing I&rsquo;ve done here is add in on-click links to the nodes and the edges that allow you to click through to see the relevant posts.</p>
<pre tabindex="0"><code class="language-{JavaScript}" data-lang="{JavaScript}">var width = window.innerWidth;
var height = window.innerHeight;

// Setup the window
var svg = d3.select(&quot;body&quot;)
  .append(&quot;svg&quot;)
  .attr(&quot;width&quot;, width)
  .attr(&quot;height&quot;, height)
  .style(&quot;display&quot;, &quot;block&quot;)
  .style(&quot;margin&quot;, &quot;auto&quot;);

var nodeRadius = 60;
var collisionRadius = nodeRadius * 2;

// Setup the simulation
var simulation = d3.forceSimulation(nodes)
  .force(&quot;link&quot;, d3.forceLink(links)
    .id(d =&gt; d.id)
    .distance(200)
    .strength(d =&gt; 0.1 * d.value))
  .force(&quot;charge&quot;, d3.forceManyBody()
    .strength(d =&gt; -500 * (d.value + 1)))
  .force(&quot;center&quot;, d3.forceCenter(width / 2, height / 2))
  .force(&quot;collision&quot;, d3.forceCollide(collisionRadius))
  .alphaDecay(0.01);

// System for dragging
var dragHandler = d3.drag()
  .on(&quot;start&quot;, function(d) {
    if (!d3.event.active) simulation.alphaTarget(0.3).restart();
    d.fx = d.x;
    d.fy = d.y;
  })
  .on(&quot;drag&quot;, function(d) {
    d.fx = d3.event.x;
    d.fy = d3.event.y;
  })
  .on(&quot;end&quot;, function(d) {
    if (!d3.event.active) simulation.alphaTarget(0);
    d.fx = null;
    d.fy = null;
  });

// Draw the line between the nodes
var link = svg.append(&quot;g&quot;)
  .attr(&quot;class&quot;, &quot;links&quot;)
  .selectAll(&quot;line&quot;)
  .data(links)
  .enter().append(&quot;line&quot;)
  .attr(&quot;stroke-width&quot;, d =&gt; Math.sqrt(d.value) + 10)
  .attr(&quot;stroke&quot;, &quot;#cad3f5&quot;)
  .on(&quot;click&quot;, function(d) {
    console.log(`Link clicked between ${d.source.id} and ${d.target.id}`);
    let tagName1 = d.source.id.replace(/\s+/g, '-').toLowerCase();
    let tagName2 = d.target.id.replace(/\s+/g, '-').toLowerCase();
    window.location.href = `/tags/${tagName1}?tag=${tagName2}`;
  });

var colors = [
  '#f4dbd6',
  '#b7bdf8',
  '#ed8796',
  '#f5a97f',
  '#eed49f',
  '#a6da95',
  '#8bd5ca',
  '#8aadf4',
  '#c6a0f6',
  '#f0c6c6'
];

function getRandomColor() {
  return colors[Math.floor(Math.random() * colors.length)];
}



// Make the nodes
var node = svg.append(&quot;g&quot;)
  .attr(&quot;class&quot;, &quot;nodes&quot;)
  .selectAll(&quot;circle&quot;)
  .data(nodes)
  .enter().append(&quot;circle&quot;)
  .on(&quot;click&quot;, function(d) {
    let tagName = d.id.replace(/\s+/g, '-').toLowerCase();
    window.location.href = `/tags/${tagName}`;
  })
  .attr(&quot;r&quot;, nodeRadius)
  .attr(&quot;fill&quot;, function(d) { return getRandomColor(); });

node.append(&quot;title&quot;)
  .text(d =&gt; d.id);

simulation
  .nodes(nodes)
  .on(&quot;tick&quot;, ticked);

simulation.force(&quot;link&quot;)
  .links(links);

dragHandler(node);

// Wirite out the labels
var labels = svg.append(&quot;g&quot;)
  .attr(&quot;class&quot;, &quot;labels&quot;)
  .selectAll(&quot;text&quot;)
  .data(nodes)
  .enter().append(&quot;text&quot;)
  .text(d =&gt; d.id)
  .style(&quot;fill&quot;, &quot;24273a&quot;)
  .style(&quot;text-anchor&quot;, &quot;middle&quot;)
  .style(&quot;dominant-baseline&quot;, &quot;central&quot;)
  .on(&quot;click&quot;, function(d) {
    let tagName = d.id.replace(/\s+/g, '-').toLowerCase();
    window.location.href = `/tags/${tagName}`;
  });

// Update function
function ticked() {
  link
    .attr(&quot;x1&quot;, d =&gt; d.source.x)
    .attr(&quot;y1&quot;, d =&gt; d.source.y)
    .attr(&quot;x2&quot;, d =&gt; d.target.x)
    .attr(&quot;y2&quot;, d =&gt; d.target.y);

  node
    .attr(&quot;cx&quot;, d =&gt; d.x)
    .attr(&quot;cy&quot;, d =&gt; d.y);

  labels
    .attr(&quot;x&quot;, d =&gt; d.x)
    .attr(&quot;y&quot;, d =&gt; d.y);
}
</code></pre><p>If you want to check out the code for this in full, you can get the <a href="https://github.com/Fonzzy1/alfiechadwick-dot-com/blob/main/themes/hello-friend-ng/layouts/taxonomy/tag.html">post page</a> and the <a href="https://github.com/Fonzzy1/alfiechadwick-dot-com/blob/main/themes/hello-friend-ng/layouts/taxonomy/tag.terms.html">graph page</a> from github, or checkout the graph in its current state <a href="../../../tags/">here</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>Using Taylor Series to Improve the Euler Method</title>
            <link>/2023/12/18/using-taylor-series-to-improve-the-euler-method/</link>
            <pubDate>Mon, 18 Dec 2023 00:00:00 +0000</pubDate>
            
            <guid>/2023/12/18/using-taylor-series-to-improve-the-euler-method/</guid>
            <description>Euler&amp;rsquo;s Method Euler&amp;rsquo;s method is a classic way of approximating first-order differential equations. In short, it uses the derivative of a function and starting condition to estimate the value of the function a short distance from the starting point.
This is commonly written as:
Where is the error created by the approximation.
Higher Order ODEs Generalizing Euler&amp;rsquo;s method to higher order ODEs is pretty easy. All you have to do is think of the ODE as a vector with each entry being the next derivative of the function.</description>
            <content type="html"><![CDATA[<h1 id="eulers-method">Euler&rsquo;s Method</h1>
<p>Euler&rsquo;s method is a classic way of approximating first-order differential equations.
In short, it uses the derivative of a function and starting condition to estimate the value of the function a short distance from the starting point.</p>
<p>This is commonly written as:</p>
<p><img src="%5Cfrac%7Bdy%7D%7Bdx%7D%20%3D%20f%28x%2C%20y%29" alt="\frac{dy}{dx} = f(x, y)" title="\frac{dy}{dx} = f(x, y)"></p>
<p><img src="y%28x%2Bh%29%20%3D%20y%28x%29%20%2B%20hf%28x%2C%20y%28x%29%29%20%2B%20%5Cepsilon" alt="y(x+h) = y(x) + hf(x, y(x)) + \epsilon" title="y(x+h) = y(x) + hf(x, y(x)) + \epsilon"></p>
<p><img src="%5Clim_%7Bh%20%5Cto%200%7D%20%7C%5Cepsilon%7C%20%3D%200" alt="\lim\_{h \to 0} \|\epsilon\| = 0" title="\lim_{h \to 0} |\epsilon| = 0"></p>
<p>Where <img src="%5Cepsilon" alt="\epsilon" title="\epsilon"> is the error created by the approximation.</p>
<h2 id="higher-order-odes">Higher Order ODEs</h2>
<p>Generalizing Euler&rsquo;s method to higher order ODEs is pretty easy. All you have to do is think of the ODE as a vector with each entry being the next derivative of the function. You can now write Euler&rsquo;s Method in terms of this function:</p>
<p><img src="%5Cbegin%7Bbmatrix%7D%0Ay%28x%2Bh%29%5C%5C%0Ay%27%28x%2Bh%29%5C%5C%0Ay%27%27%28x%2Bh%29%5C%5C%0A...%5C%5C%0Ay%5E%7Bn-1%7D%28x%2Bh%29%5C%5C%0A%5Cend%7Bbmatrix%7D%20%3D%20%5Cbegin%7Bbmatrix%7D%0Ay%28x%29%5C%5C%0Ay%27%28x%29%5C%5C%0Ay%27%27%28x%29%5C%5C%0A...%5C%5C%0Ay%5E%7Bn-1%7D%28x%29%5C%5C%0A%5Cend%7Bbmatrix%7D%20%2B%20%5Cbegin%7Bbmatrix%7D%0Ah%20%26%200%20%26%200%20%26%20%20...%20%26%200%5C%5C%0A0%20%26%20h%20%26%200%20%26%20%20...%20%26%200%5C%5C%0A0%20%26%200%20%26%20h%20%26%20%20...%20%26%200%5C%5C%0A...%20%26%20...%20%26%20...%20%26%20%20...%20%26%20...%5C%5C%0A0%20%26%200%20%26%200%20%26%20%20...%20%26%20h%5C%5C%0A%5Cend%7Bbmatrix%7D%20%5Ccdot%20%5Cbegin%7Bbmatrix%7D%0Ay%27%28x%29%5C%5C%0Ay%27%27%28x%29%5C%5C%0Ay%27%27%27%28x%29%5C%5C%0A...%5C%5C%0Ay%5E%7Bn%7D%28x%29%5C%5C%0A%5Cend%7Bbmatrix%7D%20%2B%20%5Cepsilon" alt="\begin{bmatrix}y(x+h)\\y\'(x+h)\\y\'\'(x+h)\\\...\\y^{n-1}(x+h)\\\end{bmatrix} = \begin{bmatrix}y(x)\\y\'(x)\\y\'\'(x)\\\...\\y^{n-1}(x)\\\end{bmatrix} + \begin{bmatrix}h & 0 & 0 &  \... & 0\\0 & h & 0 &  \... & 0\\0 & 0 & h &  \... & 0\\\... & \... & \... &  \... & \...\\0 & 0 & 0 &  \... & h\\\end{bmatrix} \cdot \begin{bmatrix}y\'(x)\\y\'\'(x)\\y\'\'\'(x)\\\...\\y^{n}(x)\\\end{bmatrix} + \epsilon" title="\begin{bmatrix}
y(x+h)\
y'(x+h)\
y''(x+h)\
...\
y^{n-1}(x+h)\
\end{bmatrix} = \begin{bmatrix}
y(x)\
y'(x)\
y''(x)\
...\
y^{n-1}(x)\
\end{bmatrix} + \begin{bmatrix}
h &amp; 0 &amp; 0 &amp;  ... &amp; 0\
0 &amp; h &amp; 0 &amp;  ... &amp; 0\
0 &amp; 0 &amp; h &amp;  ... &amp; 0\
... &amp; ... &amp; ... &amp;  ... &amp; ...\
0 &amp; 0 &amp; 0 &amp;  ... &amp; h\
\end{bmatrix} \cdot \begin{bmatrix}
y'(x)\
y''(x)\
y'''(x)\
...\
y^{n}(x)\
\end{bmatrix} + \epsilon"></p>
<p>Or shifting the <img src="Y%27" alt="Y\'" title="Y'"> matrix to make it a bit prettier:</p>
<p><img src="%5Cbegin%7Bbmatrix%7D%0Ay%28x%2Bh%29%5C%5C%0Ay%27%28x%2Bh%29%5C%5C%0Ay%27%27%28x%2Bh%29%5C%5C%0A...%5C%5C%0Ay%5E%7Bn%7D%28x%2Bh%29%5C%5C%0A%5Cend%7Bbmatrix%7D%20%3D%20%20%5Cbegin%7Bbmatrix%7D%0A1%20%26%20h%20%26%200%20%26%20%20...%20%26%200%5C%5C%0A0%20%26%201%20%26%20h%20%26%20%20...%20%26%200%5C%5C%0A0%20%26%200%20%26%201%20%26%20%20...%20%26%200%5C%5C%0A...%20%26%20...%20%26%20...%20%26%20%20...%20%26%20...%5C%5C%0A0%20%26%200%20%26%200%20%26%20%20...%20%26%201%5C%5C%0A%5Cend%7Bbmatrix%7D%20%5Ccdot%20%5Cbegin%7Bbmatrix%7D%0Ay%28x%29%5C%5C%0Ay%27%28x%29%5C%5C%0Ay%27%27%28x%29%5C%5C%0A...%5C%5C%0Ay%5E%7Bn%7D%28x%29%5C%5C%0A%5Cend%7Bbmatrix%7D%20%2B%20%5Cepsilon" alt="\begin{bmatrix}y(x+h)\\y\'(x+h)\\y\'\'(x+h)\\\...\\y^{n}(x+h)\\\end{bmatrix} =  \begin{bmatrix}1 & h & 0 &  \... & 0\\0 & 1 & h &  \... & 0\\0 & 0 & 1 &  \... & 0\\\... & \... & \... &  \... & \...\\0 & 0 & 0 &  \... & 1\\\end{bmatrix} \cdot \begin{bmatrix}y(x)\\y\'(x)\\y\'\'(x)\\\...\\y^{n}(x)\\\end{bmatrix} + \epsilon" title="\begin{bmatrix}
y(x+h)\
y'(x+h)\
y''(x+h)\
...\
y^{n}(x+h)\
\end{bmatrix} =  \begin{bmatrix}
1 &amp; h &amp; 0 &amp;  ... &amp; 0\
0 &amp; 1 &amp; h &amp;  ... &amp; 0\
0 &amp; 0 &amp; 1 &amp;  ... &amp; 0\
... &amp; ... &amp; ... &amp;  ... &amp; ...\
0 &amp; 0 &amp; 0 &amp;  ... &amp; 1\
\end{bmatrix} \cdot \begin{bmatrix}
y(x)\
y'(x)\
y''(x)\
...\
y^{n}(x)\
\end{bmatrix} + \epsilon"></p>
<h1 id="taylor-series">Taylor Series</h1>
<p>So everything up to now has been pretty textbook. But when I saw the matrix representation of the Euler method, I couldn&rsquo;t help but think of another method that combines derivatives and linear algebra, Taylor Series.
Taylor Series allows you to express functions as a polynomial of their derivatives at a single point <img src="a" alt="" title="a">, as defined by this equation:</p>
<p><img src="y%28x%29%20%3D%20%20%5Csum_%7Bn%20%3D%200%7D%5E%7B%5Cinfty%7D%20%20%5Cfrac%7By%5E%7B%28n%29%7D%28a%29%7D%7Bn%21%7D%5Ccdot%28x%20-%20a%29%5En" alt="y(x) =  \sum\_{n = 0}^{\infty}  \frac{y^{(n)}(a)}{n!}\cdot(x - a)^n" title="y(x) =  \sum_{n = 0}^{\infty}  \frac{y^{(n)}(a)}{n!}\cdot(x - a)^n"></p>
<p>The link between the Taylor Series and Euler&rsquo;s Method becomes clear when we replace <img src="x" alt="" title="x"> with <img src="x%2Bh" alt="x+h" title="x+h"> and <img src="a" alt="" title="a"> with <img src="x" alt="" title="x">:</p>
<p><img src="y%28x%2Bh%29%20%3D%20%20%5Csum_%7Bn%20%3D%200%7D%5E%7B%5Cinfty%7D%20%20%5Cfrac%7By%5E%7B%28n%29%7D%28x%29%7D%7Bn%21%7D%5Ccdot%28h%29%5En" alt="y(x+h) =  \sum\_{n = 0}^{\infty}  \frac{y^{(n)}(x)}{n!}\cdot(h)^n" title="y(x+h) =  \sum_{n = 0}^{\infty}  \frac{y^{(n)}(x)}{n!}\cdot(h)^n"></p>
<p><img src="y%28x%2Bh%29%20%3D%20y%28x%29%20%2B%20%20y%27%28x%29%20%5Ccdot%20h%20%2B%20%5Cfrac%7By%27%27%28x%29%7D%7B2%21%7D%5Ccdot%28h%29%5E2%20%2B%20%5Cfrac%7By%27%27%27%28x%29%7D%7B3%21%7D%5Ccdot%28h%29%5E3%20..." alt="y(x+h) = y(x) +  y\'(x) \cdot h + \frac{y\'\'(x)}{2!}\cdot(h)^2 + \frac{y\'\'\'(x)}{3!}\cdot(h)^3 \..." title="y(x+h) = y(x) +  y'(x) \cdot h + \frac{y''(x)}{2!}\cdot(h)^2 + \frac{y'''(x)}{3!}\cdot(h)^3 ..."></p>
<p>The first two terms of this expansion are the same as Euler&rsquo;s Method, but the additional terms provide even greater accuracy, minimizing the error in the approximation!</p>
<h1 id="putting-it-together">Putting it together</h1>
<p>A nice property of Taylor Series is that they have a really simple derivative function:</p>
<p><img src="y%27%28a%2Bh%29%20%3D%20%5Csum_%7Bn%20%3D%200%7D%5E%7B%5Cinfty%7D%20%20%5Cfrac%7By%5E%7B%28n%2B1%29%7D%28a%29%7D%7Bn%21%7D%5Ccdot%28h%29%5En" alt="y\'(a+h) = \sum\_{n = 0}^{\infty}  \frac{y^{(n+1)}(a)}{n!}\cdot(h)^n" title="y'(a+h) = \sum_{n = 0}^{\infty}  \frac{y^{(n+1)}(a)}{n!}\cdot(h)^n"></p>
<p><img src="y%5E%7B%28m%29%7D%28a%2Bh%29%20%3D%20%5Csum_%7Bn%20%3D%200%7D%5E%7B%5Cinfty%7D%20%20%5Cfrac%7By%5E%7B%28n%2Bm%29%7D%28a%29%7D%7Bn%21%7D%5Ccdot%28h%29%5En" alt="y^{(m)}(a+h) = \sum\_{n = 0}^{\infty}  \frac{y^{(n+m)}(a)}{n!}\cdot(h)^n" title="y^{(m)}(a+h) = \sum_{n = 0}^{\infty}  \frac{y^{(n+m)}(a)}{n!}\cdot(h)^n"></p>
<p>This means that not only the function can be described as a linear combination of the derivatives at a point, but so too can all derivatives of a function.</p>
<p>Using this, we can go back to the initial matrix representation of the Euler method and include these higher order terms.</p>
<p><img src="%5Cbegin%7Bbmatrix%7D%0Ay%28x%2Bh%29%5C%5C%0Ay%27%28x%2Bh%29%5C%5C%0Ay%27%27%28x%2Bh%29%5C%5C%0A...%5C%5C%0Ay%5E%7Bn%7D%28x%2Bh%29%5C%5C%0A%5Cend%7Bbmatrix%7D%20%3D%20%5Cbegin%7Bbmatrix%7D%0A1%20%26%20%5Cfrac%7Bh%7D%7B1%21%7D%20%26%20%5Cfrac%7Bh%5E2%7D%7B2%21%7D%20%26%20%20...%20%26%20%5Cfrac%7Bh%5En%7D%7Bn%21%7D%5C%5C%0A0%20%26%201%20%26%20%5Cfrac%7Bh%7D%7B1%21%7D%20%26%20%20...%20%26%20%5Cfrac%7Bh%5E%7Bn-1%7D%7D%7B%28n-1%29%21%7D%5C%5C%0A0%20%26%200%20%26%201%20%26%20%20...%20%26%20%5Cfrac%7Bh%5E%7Bn-2%7D%7D%7B%28n-2%29%21%7D%5C%5C%0A...%20%26%20...%20%26%20...%20%26%20%20...%20%26%20...%5C%5C%0A0%20%26%200%20%26%200%20%26%20%20...%20%26%201%5C%5C%0A%5Cend%7Bbmatrix%7D%20%5Ccdot%20%5Cbegin%7Bbmatrix%7D%0Ay%28x%29%5C%5C%0Ay%27%28x%29%5C%5C%0Ay%27%27%28x%29%5C%5C%0A...%5C%5C%0Ay%5E%7Bn%7D%28x%29%5C%5C%0A%5Cend%7Bbmatrix%7D%20%2B%20%5Cepsilon" alt="\begin{bmatrix}y(x+h)\\y\'(x+h)\\y\'\'(x+h)\\\...\\y^{n}(x+h)\\\end{bmatrix} = \begin{bmatrix}1 & \frac{h}{1!} & \frac{h^2}{2!} &  \... & \frac{h^n}{n!}\\0 & 1 & \frac{h}{1!} &  \... & \frac{h^{n-1}}{(n-1)!}\\0 & 0 & 1 &  \... & \frac{h^{n-2}}{(n-2)!}\\\... & \... & \... &  \... & \...\\0 & 0 & 0 &  \... & 1\\\end{bmatrix} \cdot \begin{bmatrix}y(x)\\y\'(x)\\y\'\'(x)\\\...\\y^{n}(x)\\\end{bmatrix} + \epsilon" title="\begin{bmatrix}
y(x+h)\
y'(x+h)\
y''(x+h)\
...\
y^{n}(x+h)\
\end{bmatrix} = \begin{bmatrix}
1 &amp; \frac{h}{1!} &amp; \frac{h^2}{2!} &amp;  ... &amp; \frac{h^n}{n!}\
0 &amp; 1 &amp; \frac{h}{1!} &amp;  ... &amp; \frac{h^{n-1}}{(n-1)!}\
0 &amp; 0 &amp; 1 &amp;  ... &amp; \frac{h^{n-2}}{(n-2)!}\
... &amp; ... &amp; ... &amp;  ... &amp; ...\
0 &amp; 0 &amp; 0 &amp;  ... &amp; 1\
\end{bmatrix} \cdot \begin{bmatrix}
y(x)\
y'(x)\
y''(x)\
...\
y^{n}(x)\
\end{bmatrix} + \epsilon"></p>
<p>This should allow us to approximate higher order ODEs with more precision than just using Euler&rsquo;s method.</p>
]]></content>
        </item>
        
        <item>
            <title>Modeling Drug Use in Communities</title>
            <link>/2023/10/22/modeling-drug-use-in-communities/</link>
            <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
            
            <guid>/2023/10/22/modeling-drug-use-in-communities/</guid>
            <description>Preface This was written as a University project but I&amp;rsquo;m pretty happy with how it turned out.
Big thanks to Kevin Dai and Chrysovalantis Thomopoulos who worked with me on this throughout the semester.
Introduction Drugs are chemical substances with physiological effects. Some drugs like opioids, cannabis, alcohol, nicotine, cocaine, methamphetamine, or heroin are of concern to policymakers. Widespread drug abuse in a community can be a burden to society and the economy.</description>
            <content type="html"><![CDATA[<h1 id="preface">Preface</h1>
<p>This was written as a University project but I&rsquo;m pretty happy with how it turned out.</p>
<p>Big thanks to Kevin Dai and Chrysovalantis Thomopoulos who worked with me on this throughout the semester.</p>
<h1 id="introduction">Introduction</h1>
<p>Drugs are chemical substances with physiological effects. Some drugs like opioids, cannabis, alcohol, nicotine, cocaine, methamphetamine, or heroin are of concern to policymakers. Widespread drug abuse in a community can be a burden to society and the economy. For example, healthcare costs increase due to bodily harm, there is an enhanced risk of infectious diseases through second-hand needle injections, indirect funding of organized crime occurs, and there are negative impacts on mental health and rehabilitation. Further harms of drug abuse upon the abuser may include financial instability, death, and familial grief.</p>
<p>&ldquo;Number one is the opioid epidemic. It is a scourge across our country. A person dies every 12-and-a-half minutes from an opioid overdose and that&rsquo;s far too many. Especially when we know that many of those deaths can be prevented.&rdquo; (Thedoctors.com, 2021)</p>
<p>These were the words of Dr. Adams, the 20th surgeon general of the United States when asked about his main concerns and focus indicating the severity of the matter. Substance abuse is not only harmful for oneself but our community. Multiple research articles and papers in the past have modeled drug use. We have included some examples below from which we have taken inspiration and made comparisons.</p>
<p>One article in particular by Mushanyu, J, Nyabadza, F, Muchatibaya, G, &amp; Stewart, A G. R. (2016) touches on the importance of an adequate healthcare system since a limited rehabilitation capacity can increase the chances of a drug abuse epidemic. The methods used in this paper are discussed later. Also, Mushanyu, J, Nyabadza, F, &amp; Stewart, A G R. (2015) focuses on some matters that are of great importance as well.</p>
<p>Having an understanding of the dynamics of drug use will inform decision makers' strategies to minimize drug use. In this paper, we aim to understand how drug use and addiction develop in a community and what factors can be tweaked to alter the long-term distributions of drug use, abuse, and addiction in the community.</p>
<h1 id="aim">Aim</h1>
<p>The aim of this project is to produce a model to capture the dynamics of drug use in the long term. The model should address how or when individuals become drug users, addicted drug users, and abstainers, and have applications in addressing economic and policy decisions.</p>
<h1 id="method">Method</h1>
<h2 id="initial-model-sir">Initial Model: SIR</h2>
<p>It&rsquo;s common to liken drug use to disease, treating drug addiction as an infection that can be recovered from. Using this analogy, we began looking into how diseases are modeled and how we can adapt our own model to fit drug usage.
One of the simplest drug models is the SIR model, a compartment model based on the concept of mass action that sees infections as caused by interactions between infected people and susceptible people. The use of mass action can be justified in this case as we are looking at large populations over a long period of time, meaning that the variance in the movement will average out over time.
There are a few reasons that this model is a good starting point for any type of drug modeling:
Firstly, this model is very simple and can be easily adapted to our own needs with extra compartments and transferable conditions.
Secondly, since we are looking at drug use in a population, relying on mass action rather than discrete modeling allows us to further simplify the model.
Thirdly, the idea that addiction is caused by interactions between individuals seems to be a good assumption for drug use as one would expect people to become familiar and subsequently addicted to certain substances by being associated with people who have them.</p>
<p>One divergence we made from the most basic SIR model is allowing for relapse from the recovered group back into the infected group. This represents how recovering addicts will become addicted again at a different rate than people who have never used the drug before. However, an important fact is that people cannot move back into the susceptible group as addiction is said to last a lifetime.</p>
<figure>
<img src="../../../post/drug-use-models/pics/1.png" alt="SIR Diagram" />
<figcaption aria-hidden="true">SIR Diagram</figcaption>
</figure>
<p>Our SIR model is defined by the following equations:</p>
<p><img src="%5Cfrac%7BdS%7D%7Bdt%7D%20%3D%20-%5Cpi_1%20%2A%20S%20%2A%20I" alt="\frac{dS}{dt} = -\pi_1 \* S \* I" title="\frac{dS}{dt} = -\pi_1 * S * I"></p>
<p><img src="%5Cfrac%7BdI%7D%7Bdt%7D%20%3D%20%5Cpi_1%20%2A%20S%20%2A%20I%20%2B%20%5Cpi_2%20%2A%20R%20%2A%20I%20-%20%5Cpi_3%20%2A%20%20I" alt="\frac{dI}{dt} = \pi_1 \* S \* I + \pi_2 \* R \* I - \pi_3 \*  I" title="\frac{dI}{dt} = \pi_1 * S * I + \pi_2 * R * I - \pi_3 *  I"></p>
<p><img src="%5Cfrac%7BdR%7D%7Bdt%7D%20%3D%20-%5Cpi_2%20%2A%20R%20%2A%20I%20%2B%20%5Cpi_3%20%2A%20I" alt="\frac{dR}{dt} = -\pi_2 \* R \* I + \pi_3 \* I" title="\frac{dR}{dt} = -\pi_2 * R * I + \pi_3 * I"></p>
<p>The parameters <img src="%5Cpi_1" alt="\pi_1" title="\pi_1">, <img src="%5Cpi_2" alt="\pi_2" title="\pi_2">, and <img src="%5Cpi_3" alt="\pi_3" title="\pi_3"> represent the &lsquo;infectiousness&rsquo; of the drug for susceptible and recovering individuals and the rate of recovery from the drug, respectively.</p>
<p>We now look at some plots to see how this model behaves for various combinations of our parameters:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
<span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
<span style="color:#f92672">import</span> mplcatppuccin
<span style="color:#f92672">import</span> matplotlib <span style="color:#66d9ef">as</span> mpl
<span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt

mpl<span style="color:#f92672">.</span>style<span style="color:#f92672">.</span>use(<span style="color:#e6db74">&#34;macchiato&#34;</span>)

<span style="color:#f92672">from</span> euler_methods <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

<span style="color:#75715e"># Assuming SIR is a function that creates a plot and does not call plt.show()</span>

<span style="color:#75715e"># Set up a 2 by 2 grid of subplots</span>
plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">10</span>))  <span style="color:#75715e"># Adjust the figure size if necessary</span>

<span style="color:#75715e"># First plot</span>
plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">1</span>)
SIR(<span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.02</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">70</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">100</span>)

<span style="color:#75715e"># Second plot</span>
plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>)
SIR(<span style="color:#ae81ff">0.009</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0.04</span>, <span style="color:#ae81ff">70</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">100</span>)

<span style="color:#75715e"># Third plot</span>
plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>)
SIR(<span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.05</span>, <span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">70</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">100</span>)

<span style="color:#75715e"># Fourth plot</span>
plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>)
SIR(<span style="color:#ae81ff">0.0001</span>, <span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.1</span>, <span style="color:#ae81ff">70</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">100</span>)

<span style="color:#75715e"># Finally, use plt.show() to display all the plots at once in the Rmd file</span>
plt<span style="color:#f92672">.</span>tight_layout()  <span style="color:#75715e"># Optional: this improves spacing between plots</span>
plt<span style="color:#f92672">.</span>show()
</code></pre></div><img src="final_report_files/figure-markdown_strict/cell-2-output-1.png" width="950" height="950" />
<h2 id="suar-model">SUAR Model</h2>
<p>The SIR model fails to distinguish between different severities of addiction. By grouping the individuals who are trying/testing the drug with people who are addicted, we fail to capture the behavior of people trying the drug without becoming reliant on it.
Because of this, we adapted the SIR model, relabeled the infected group to addicted, and added in a new compartment model for users of the drug who are not addicted, the &lsquo;using&rsquo; group. Susceptible people will now move into the using group before moving into the Addicted group. Since there are now two groups who are using the drug and interacting with the community, the <img src="I" alt="" title="I"> terms of the ODEs in the SIR model have to be replaced with <img src="U%2BA" alt="U+A" title="U+A">.</p>
<figure>
<img src="../../../post/drug-use-models/pics/2.png" alt="SUAR Diagram" />
<figcaption aria-hidden="true">SUAR Diagram</figcaption>
</figure>
<p>The new model can now be described by the following equations:</p>
<p><img src="%5Cfrac%7BdS%7D%7Bdt%7D%20%3D%20-%20%5Cpi_1%2AS%2A%28A%2BU%29%20%2B%20%5Cpi_2%2AU" alt="\frac{dS}{dt} = - \pi_1\*S\*(A+U) + \pi_2\*U" title="\frac{dS}{dt} = - \pi_1*S*(A+U) + \pi_2*U"></p>
<p><img src="%5Cfrac%7BdU%7D%7Bdt%7D%20%3D%20%20%5Cpi_1%2AS%2A%28A%2BU%29%20-%20%5Cpi_2%2AU%20%20-%20%5Cpi_3%2AU" alt="\frac{dU}{dt} =  \pi_1\*S\*(A+U) - \pi_2\*U  - \pi_3\*U" title="\frac{dU}{dt} =  \pi_1*S*(A+U) - \pi_2*U  - \pi_3*U"></p>
<p><img src="%5Cfrac%7BdA%7D%7Bdt%7D%20%3D%20%5Cpi_3%2AU%20%2B%5Cpi_5%20%2A%28A%2BU%29%2AR%20-%20%5Cpi_4%2AA" alt="\frac{dA}{dt} = \pi_3\*U +\pi_5 \*(A+U)\*R - \pi_4\*A" title="\frac{dA}{dt} = \pi_3*U +\pi_5 *(A+U)*R - \pi_4*A"></p>
<p><img src="%5Cfrac%7BdR%7D%7Bdt%7D%20%3D%20%20%5Cpi_4%2AA%20-%20%5Cpi_5%20%2A%28A%2BU%29%2AR" alt="\frac{dR}{dt} =  \pi_4\*A - \pi_5 \*(A+U)\*R" title="\frac{dR}{dt} =  \pi_4*A - \pi_5 *(A+U)*R"></p>
<p>With parameters <img src="%5Cpi_1" alt="\pi_1" title="\pi_1">, <img src="%5Cpi_2" alt="\pi_2" title="\pi_2">, <img src="%5Cpi_3" alt="\pi_3" title="\pi_3">, <img src="%5Cpi_4" alt="\pi_4" title="\pi_4">, and <img src="%5Cpi_5" alt="\pi_5" title="\pi_5"> being the &lsquo;effectiveness&rsquo; of the drug for susceptible people, the rate that people stop trying the drug, the rate at which people become addicted, the recovery rate for addicted people respectively, and the &lsquo;effectiveness&rsquo; for recovered people.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Create a new figure with a specified size</span>
plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">12</span>))

<span style="color:#75715e"># Each subplot for SUAR function calls</span>
<span style="color:#75715e"># First SUAR plot</span>
plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">1</span>)
SUAR(<span style="color:#ae81ff">0.01</span>,<span style="color:#ae81ff">0.001</span>,<span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.001</span> ,<span style="color:#ae81ff">60</span>,<span style="color:#ae81ff">20</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">100</span>)

<span style="color:#75715e"># Second SUAR plot</span>
plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>)
SUAR(<span style="color:#ae81ff">0.001</span>,<span style="color:#ae81ff">0.01</span>,<span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.001</span> ,<span style="color:#ae81ff">60</span>,<span style="color:#ae81ff">20</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">100</span>)

<span style="color:#75715e"># Third SUAR plot</span>
plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>)
SUAR(<span style="color:#ae81ff">0.001</span>,<span style="color:#ae81ff">0.001</span>,<span style="color:#ae81ff">0.01</span>, <span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.001</span> ,<span style="color:#ae81ff">60</span>,<span style="color:#ae81ff">20</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">100</span>)

<span style="color:#75715e"># Fourth SUAR plot</span>
plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>)
SUAR(<span style="color:#ae81ff">0.001</span>,<span style="color:#ae81ff">0.001</span>,<span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.01</span>, <span style="color:#ae81ff">0.001</span> ,<span style="color:#ae81ff">60</span>,<span style="color:#ae81ff">20</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">100</span>)

<span style="color:#75715e"># Improve spacing between plots and show them all</span>
plt<span style="color:#f92672">.</span>tight_layout()
plt<span style="color:#f92672">.</span>show()
</code></pre></div><img src="final_report_files/figure-markdown_strict/cell-3-output-1.png" width="1142" height="1142" />
<h2 id="saur-model-with-age">SAUR Model with age</h2>
<p>Now focusing on the stationary points of the previous two models (see appendix for derivation), we realize that our long-term behavior involves the extinction of either the user and/or the addicted group. However, this behavior is unrealistic and rather too optimistic since there is a consistent number of people using and addicted to the drug, and a consistently high number of people who are susceptible to the drug. To fix this issue, we integrate age groups into the model, grouping the population into children, teens, young adults, adults, and seniors. Each of these groups has a distinct rate of death, and the births are proportional to the number of young adults and adults. Separating the population also allows us to set different parameters according to each age group, capturing more nuanced behaviors such as an increased volume of experimentation of young people which would not have been identified otherwise.</p>
<p>Another feature we wanted to tackle is how people recover. In the same way that people start using drugs based on interactions with others who are using them, we expect people to recover based on interactions with people who aren&rsquo;t using them. This can be represented by support groups, concerned parents, friends, etc. Furthermore, we can expect people in one age group and compartment model to be influenced differently from each age group and subsequent compartment model. We can store this information with a matrix <img src="I" alt="" title="I">, where <img src="I_%7Bij%7D" alt="I\_{ij}" title="I_{ij}"> is the magnitude of the influence that group j has on group i.</p>
<p>We can now go in to further simplify this by defining two new terms, the positive and negative influence on a age group <img src="i" alt="" title="i">, to be:</p>
<p><img src="P_i%20%3D%20%5Csum%7Bk%3D1%7D%7B5%7D%7BI_%7Bik%7D%20%2A%20%28S_k%20%2B%20R_K%29%7D" alt="P_i = \sum{k=1}{5}{I\_{ik} \* (S_k + R_K)}" title="P_i = \sum{k=1}{5}{I_{ik} * (S_k + R_K)}"></p>
<p><img src="N_i%20%3D%20%5Csum%7Bk%3D1%7D%7B5%7D%7BI_%7Bik%7D%20%2A%20%28U_k%20%2B%20A_K%29%7D" alt="N_i = \sum{k=1}{5}{I\_{ik} \* (U_k + A_K)}" title="N_i = \sum{k=1}{5}{I_{ik} * (U_k + A_K)}"></p>
<p>The model now has 20 compartments with both sideways movement from and to age groups and downwards movement as people age.</p>
<p>Looking across age group &lsquo;i&rsquo;, the model can be described as:</p>
<p><img src="%5Cfrac%7BdS_i%7D%7Bdt%7D%20%3D%20aS_%7Bi-1%7D%20%2B%20aU_%7Bi-1%7D%20%5Cpi_%7Bi-1%2C2%7DP_%7Bi-1%7D%20-%20S_i%5Cpi_%7Bi%2C1%7DN_i%20%2B%20%281-a%29U_i%5Cpi_%7Bi%2C2%7DP_i%20-%20aSi%20-%20d_%7Bi%2Cs%7DS_i%20%2B%20%28b%5Csum_%7Bk%3D2%7D%5E%7B3%7DS_k%2BU_k%2BA_k%2BR_K%20%7C%20i%20%3D%200%29" alt="\frac{dS_i}{dt} = aS\_{i-1} + aU\_{i-1} \pi\_{i-1,2}P\_{i-1} - S_i\pi\_{i,1}N_i + (1-a)U_i\pi\_{i,2}P_i - aSi - d\_{i,s}S_i + (b\sum\_{k=2}^{3}S_k+U_k+A_k+R_K \| i = 0)" title="\frac{dS_i}{dt} = aS_{i-1} + aU_{i-1} \pi_{i-1,2}P_{i-1} - S_i\pi_{i,1}N_i + (1-a)U_i\pi_{i,2}P_i - aSi - d_{i,s}S_i + (b\sum_{k=2}^{3}S_k+U_k+A_k+R_K | i = 0)"></p>
<p><img src="%5Cfrac%7BdU_i%7D%7Bdt%7D%20%3D%20%20aS_%7Bi-1%7D%5Cpi_%7Bi-1%2C1%7DN_%7Bi-1%7D%20%2B%20aU_%7Bi-1%7D%20-%20U_i%20%2A%20%5Cpi_%7Bi%2C3%7D%20-%20a%20U_i%20-%20U_i%5Cpi_%7Bi%2C2%7DP_i%20%2B%20%281-a%29S_i%5Cpi_%7Bi%2C1%7DN_i%20-%20d_%7Bi%2CU%7DU_i" alt="\frac{dU_i}{dt} =  aS\_{i-1}\pi\_{i-1,1}N\_{i-1} + aU\_{i-1} - U_i \* \pi\_{i,3} - a U_i - U_i\pi\_{i,2}P_i + (1-a)S_i\pi\_{i,1}N_i - d\_{i,U}U_i" title="\frac{dU_i}{dt} =  aS_{i-1}\pi_{i-1,1}N_{i-1} + aU_{i-1} - U_i * \pi_{i,3} - a U_i - U_i\pi_{i,2}P_i + (1-a)S_i\pi_{i,1}N_i - d_{i,U}U_i"></p>
<p><img src="%5Cfrac%7BdA_i%7D%7Bdt%7D%20%3D%20aU_%7Bi-1%7D%5Cpi_%7Bi-1%2C3%7D%20%2B%20aA_%7Bi-1%7D%20%2B%20aR_%7Bi-1%7D%5Cpi_%7Bi-1%2C5%7DN_%7Bi-1%7D%20-%20A_i%5Cpi_%7Bi%2C4%7DP_i%20%2B%20%281-a%29R_i%5Cpi_%7Bi%2C5%7DN_%7Bi%7D-aA_i%20%2B%20%281-a%29U_i%5Cpi_%7Bi%2C3%7D-%20d_%7Bi%2CA%7DA_i" alt="\frac{dA_i}{dt} = aU\_{i-1}\pi\_{i-1,3} + aA\_{i-1} + aR\_{i-1}\pi\_{i-1,5}N\_{i-1} - A_i\pi\_{i,4}P_i + (1-a)R_i\pi\_{i,5}N\_{i}-aA_i + (1-a)U_i\pi\_{i,3}- d\_{i,A}A_i" title="\frac{dA_i}{dt} = aU_{i-1}\pi_{i-1,3} + aA_{i-1} + aR_{i-1}\pi_{i-1,5}N_{i-1} - A_i\pi_{i,4}P_i + (1-a)R_i\pi_{i,5}N_{i}-aA_i + (1-a)U_i\pi_{i,3}- d_{i,A}A_i"></p>
<p><img src="%5Cfrac%7BdR_i%7D%7Bdt%7D%20%3D%20aA_%7Bi-1%7D%5Cpi_%7Bi-1%2C4%7DP_%7Bi-1%7D%20%2B%20aR_%7Bi-1%7D%20-%20aR_i%20-R_i%5Cpi_%7Bi%2C5%7DN_i%20%2B%20%281-a%29A_i%5Cpi_%7Bi%2C4%7DP_i%20-%20d_%7Bi%2CR%7DR_I" alt="\frac{dR_i}{dt} = aA\_{i-1}\pi\_{i-1,4}P\_{i-1} + aR\_{i-1} - aR_i -R_i\pi\_{i,5}N_i + (1-a)A_i\pi\_{i,4}P_i - d\_{i,R}R_I" title="\frac{dR_i}{dt} = aA_{i-1}\pi_{i-1,4}P_{i-1} + aR_{i-1} - aR_i -R_i\pi_{i,5}N_i + (1-a)A_i\pi_{i,4}P_i - d_{i,R}R_I"></p>
<p>With the parameters being sorted in matrices <img src="%5Cpi" alt="\pi" title="\pi">, {d} and {i}, containing row-wise versions of the parameters for the SAUR model, the death rate for each compartment, and the influence that each age group has on the other, and scalars <img src="a" alt="" title="a"> and <img src="b" alt="" title="b">, which define the aging rate and the birth rate of the population.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">aging_rate <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.05</span>
birth_rate <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.07</span>
death_rate <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.1</span><span style="color:#f92672">*</span>np<span style="color:#f92672">.</span>array([[<span style="color:#ae81ff">0.2</span>, <span style="color:#ae81ff">0.2</span>, <span style="color:#ae81ff">0.2</span>, <span style="color:#ae81ff">0.2</span>],
                           [<span style="color:#ae81ff">0.05</span>, <span style="color:#ae81ff">0.05</span>, <span style="color:#ae81ff">0.05</span>, <span style="color:#ae81ff">0.05</span>],
                   [<span style="color:#ae81ff">0.1</span>, <span style="color:#ae81ff">0.1</span>, <span style="color:#ae81ff">0.1</span>, <span style="color:#ae81ff">0.1</span>],
               [<span style="color:#ae81ff">0.2</span>, <span style="color:#ae81ff">0.2</span>, <span style="color:#ae81ff">0.2</span>, <span style="color:#ae81ff">0.2</span>],
               [<span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.5</span>]])

X0 <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span> <span style="color:#f92672">*</span> np<span style="color:#f92672">.</span>array([[<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>],
                     [<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>],
             [<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">0</span>],
             [<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>],
             [<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>]])

(n_age_groups, n_status) <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>shape(X0)

I <span style="color:#f92672">=</span>  <span style="color:#ae81ff">0.001</span><span style="color:#f92672">*</span>np<span style="color:#f92672">.</span>array([[<span style="color:#ae81ff">0.1</span>, <span style="color:#ae81ff">0.0</span>, <span style="color:#ae81ff">0.2</span>, <span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.2</span>],
                     [<span style="color:#ae81ff">0.0</span>, <span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.2</span>, <span style="color:#ae81ff">0.2</span>, <span style="color:#ae81ff">0.1</span>],
                     [<span style="color:#ae81ff">0.0</span>, <span style="color:#ae81ff">0.1</span>, <span style="color:#ae81ff">0.7</span>, <span style="color:#ae81ff">0.2</span>, <span style="color:#ae81ff">0.0</span>],
                     [<span style="color:#ae81ff">0.0</span>, <span style="color:#ae81ff">0.0</span>, <span style="color:#ae81ff">0.1</span>, <span style="color:#ae81ff">0.8</span>, <span style="color:#ae81ff">0.1</span>],
                     [<span style="color:#ae81ff">0.0</span>, <span style="color:#ae81ff">0.0</span>, <span style="color:#ae81ff">0.0</span>, <span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.5</span>]])

P <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.1</span><span style="color:#f92672">*</span>np<span style="color:#f92672">.</span>array([[<span style="color:#ae81ff">0.0</span>, <span style="color:#ae81ff">1.0</span>, <span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.0</span>, <span style="color:#ae81ff">1.0</span>],
                  [<span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.8</span>, <span style="color:#ae81ff">0.2</span>],
                  [<span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.6</span>, <span style="color:#ae81ff">0.2</span>],
                  [<span style="color:#ae81ff">0.1</span>, <span style="color:#ae81ff">0.1</span>, <span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.6</span>, <span style="color:#ae81ff">0.1</span>],
                  [<span style="color:#ae81ff">0.0</span>, <span style="color:#ae81ff">0.0</span>, <span style="color:#ae81ff">0.5</span>, <span style="color:#ae81ff">0.9</span>, <span style="color:#ae81ff">0.1</span>]])

SUAR_20(aging_rate,birth_rate,death_rate, I, P, X0,<span style="color:#ae81ff">600</span>)
</code></pre></div><h2 id="simplified-suar-model-with-age">Simplified SUAR Model with age</h2>
<p>After creating the SAUR model with age groups, we experimented with various combinations of parameters to see how the model reacted.
However, we found that with 20 compartments and 73 parameters, it is really hard to go through all the combinations to find meaningful results from the model. We could see that there were stationary points for the population portions, but finding them analytically was near impossible. Because of this, we sought to find a way to simplify the model to produce results that are easier to understand. We did this by removing the different age groups altogether, while keeping the equations describing the model the same. By removing the age groups, the equations dramatically simplify into this form;</p>
<figure>
<img src="../../../post/drug-use-models/pics/3.png" alt="SUAR Diagram with ageing" />
<figcaption aria-hidden="true">SUAR Diagram with ageing</figcaption>
</figure>
<p><img src="%5Cfrac%7BdS%7D%7Bdt%7D%20%3D%20-S%5Cpi_%7B1%7DN%20%2BU%5Cpi_2P%20%20-d_SS%20%2B%20b%28S%2BU%2BA%2BR%29" alt="\frac{dS}{dt} = -S\pi\_{1}N +U\pi_2P  -d_SS + b(S+U+A+R)" title="\frac{dS}{dt} = -S\pi_{1}N +U\pi_2P  -d_SS + b(S+U+A+R)"></p>
<p><img src="%5Cfrac%7BdU%7D%7Bdt%7D%20%3D%20S%5Cpi_1N%20-U%5Cpi_2P%20-%20U%5Cpi_3%20-%20d_UU" alt="\frac{dU}{dt} = S\pi_1N -U\pi_2P - U\pi_3 - d_UU" title="\frac{dU}{dt} = S\pi_1N -U\pi_2P - U\pi_3 - d_UU"></p>
<p><img src="%5Cfrac%7BdA%7D%7Bdt%7D%20%3D%20U%5Cpi_3%20-%20A%5Cpi_4P%20%2B%20R%5Cpi_5N%20-%20d_AA" alt="\frac{dA}{dt} = U\pi_3 - A\pi_4P + R\pi_5N - d_AA" title="\frac{dA}{dt} = U\pi_3 - A\pi_4P + R\pi_5N - d_AA"></p>
<p><img src="%5Cfrac%7BdR%7D%7Bdt%7D%20%3D%20A%5Cpi_4P%20-%20R%5Cpi_5N%20-%20d_RR" alt="\frac{dR}{dt} = A\pi_4P - R\pi_5N - d_RR" title="\frac{dR}{dt} = A\pi_4P - R\pi_5N - d_RR"></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">12</span>))

<span style="color:#75715e"># The grid of subplots for the SUAR_5 function calls</span>
<span style="color:#75715e"># First SUAR_5 plot</span>
plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">1</span>)
SUAR_5(<span style="color:#ae81ff">0.01</span>, <span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.001</span>, [<span style="color:#ae81ff">0.0001</span>, <span style="color:#ae81ff">0.0005</span>, <span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.0001</span>], <span style="color:#ae81ff">60</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">300</span>)

<span style="color:#75715e"># Second SUAR_5 plot</span>
plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>)
SUAR_5(<span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.01</span>, <span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.001</span>, [<span style="color:#ae81ff">0.0001</span>, <span style="color:#ae81ff">0.0005</span>, <span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.0001</span>], <span style="color:#ae81ff">60</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">300</span>)

<span style="color:#75715e"># Third SUAR_5 plot</span>
plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>)
SUAR_5(<span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.01</span>, <span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.001</span>, [<span style="color:#ae81ff">0.0001</span>, <span style="color:#ae81ff">0.0005</span>, <span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.0001</span>], <span style="color:#ae81ff">60</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">300</span>)

<span style="color:#75715e"># Fourth SUAR_5 plot</span>
plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>)
SUAR_5(<span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.01</span>, <span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.001</span>, [<span style="color:#ae81ff">0.0001</span>, <span style="color:#ae81ff">0.0005</span>, <span style="color:#ae81ff">0.001</span>, <span style="color:#ae81ff">0.0001</span>], <span style="color:#ae81ff">60</span>, <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">300</span>)

<span style="color:#75715e"># Adjust layout to prevent overlapping of subplots and then display all the plots</span>
plt<span style="color:#f92672">.</span>tight_layout()
plt<span style="color:#f92672">.</span>show()
</code></pre></div><img src="final_report_files/figure-markdown_strict/cell-5-output-1.png" width="1142" height="1142" />
<p>Looking at this model, it is clear to see that we will only find stationary points when births and deaths are equal. However we also want to see long term trends in growing and shrinking populations. To do this, we look at this model through population portions, redefining the system as:</p>
<p><img src="T%20%3D%20S%20%2B%20U%20%2B%20A%20%2B%20R" alt="T = S + U + A + R" title="T = S + U + A + R"></p>
<p><img src="T%27%20%3D%20b%28S%2BU%2BA%2BR%29%20%20-d_SS%20-d_UU%20-%20d_AA%20-%20d_RR" alt="T\' = b(S+U+A+R)  -d_SS -d_UU - d_AA - d_RR" title="T' = b(S+U+A+R)  -d_SS -d_UU - d_AA - d_RR"></p>
<p><img src="%5Cfrac%7Bd%5Cfrac%7BS%7D%7BN%7D%7D%7Bdt%7D%20%3D%20%5Cfrac%7B%28-S%5Cpi_%7B1%7DN%20%2BU%5Cpi_2P%20%20-d_SS%20%2B%20b%28S%2BU%2BA%2BR%29%29T-T%27S%7D%7BT%5E2%7D" alt="\frac{d\frac{S}{N}}{dt} = \frac{(-S\pi\_{1}N +U\pi_2P  -d_SS + b(S+U+A+R))T-T\'S}{T^2}" title="\frac{d\frac{S}{N}}{dt} = \frac{(-S\pi_{1}N +U\pi_2P  -d_SS + b(S+U+A+R))T-T'S}{T^2}"></p>
<p><img src="%5Cfrac%7Bd%5Cfrac%7BU%7D%7BN%7D%7D%7Bdt%7D%20%3D%20%5Cfrac%7B%28S%5Cpi_1N%20-U%5Cpi_2P%20-%20U%5Cpi_3%20-%20d_UU%20%29T-T%27U%7D%7BT%5E2%7D" alt="\frac{d\frac{U}{N}}{dt} = \frac{(S\pi_1N -U\pi_2P - U\pi_3 - d_UU )T-T\'U}{T^2}" title="\frac{d\frac{U}{N}}{dt} = \frac{(S\pi_1N -U\pi_2P - U\pi_3 - d_UU )T-T'U}{T^2}"></p>
<p><img src="%5Cfrac%7Bd%5Cfrac%7BA%7D%7BN%7D%7D%7Bdt%7D%20%3D%20%5Cfrac%7B%28U%5Cpi_3%20-%20A%5Cpi_4P%20%2B%20R%5Cpi_5N%20-%20d_AA%29T-T%27A%7D%7BT%5E2%7D" alt="\frac{d\frac{A}{N}}{dt} = \frac{(U\pi_3 - A\pi_4P + R\pi_5N - d_AA)T-T\'A}{T^2}" title="\frac{d\frac{A}{N}}{dt} = \frac{(U\pi_3 - A\pi_4P + R\pi_5N - d_AA)T-T'A}{T^2}"></p>
<p><img src="%5Cfrac%7Bd%5Cfrac%7BR%7D%7BN%7D%7D%7Bdt%7D%20%3D%20%5Cfrac%7B%28A%5Cpi_4P%20-%20R%5Cpi_5N%20-%20d_RR%20%29T-T%27R%7D%7BT%5E2%7D" alt="\frac{d\frac{R}{N}}{dt} = \frac{(A\pi_4P - R\pi_5N - d_RR )T-T\'R}{T^2}" title="\frac{d\frac{R}{N}}{dt} = \frac{(A\pi_4P - R\pi_5N - d_RR )T-T'R}{T^2}"></p>
<p>Denoting these fractions as s,u,a,r and reformatting the equation using T as a characteristic for population and <img src="%5Cfrac%7B1%7D%7Bb%7D" alt="\frac{1}{b}" title="\frac{1}{b}"> as a characteristic for time;</p>
<p><img src="s%2Bu%2Ba%2Br%20%3D%201" alt="s+u+a+r = 1" title="s+u+a+r = 1"></p>
<p><img src="%5Cfrac%7Bds%7D%7Bdt%7D%20%3D%20%28-s%5Cpi_%7B1%7D%28u%2Ba%29%2Bu%5Cpi_2%28s%2Br%29%20%20-d_Ss%20%2B%201%29-s%281%20-%20d_Ss%20-%20d_Uu%20-%20d_Aa%20-%20d_Rr%29" alt="\frac{ds}{dt} = (-s\pi\_{1}(u+a)+u\pi_2(s+r)  -d_Ss + 1)-s(1 - d_Ss - d_Uu - d_Aa - d_Rr)" title="\frac{ds}{dt} = (-s\pi_{1}(u+a)+u\pi_2(s+r)  -d_Ss + 1)-s(1 - d_Ss - d_Uu - d_Aa - d_Rr)"></p>
<p><img src="%5Cfrac%7Bdu%7D%7Bdt%7D%20%3D%20%28s%5Cpi_%7B1%7D%28u%2Ba%29-u%5Cpi_2%28s%2Br%29%20-%20u%5Cpi_3%20-d_Uu%20%29-u%281%20-%20d_Ss%20-%20d_Uu%20-%20d_Aa%20-%20d_Rr%29" alt="\frac{du}{dt} = (s\pi\_{1}(u+a)-u\pi_2(s+r) - u\pi_3 -d_Uu )-u(1 - d_Ss - d_Uu - d_Aa - d_Rr)" title="\frac{du}{dt} = (s\pi_{1}(u+a)-u\pi_2(s+r) - u\pi_3 -d_Uu )-u(1 - d_Ss - d_Uu - d_Aa - d_Rr)"></p>
<p><img src="%5Cfrac%7Bda%7D%7Bdt%7D%20%3D%20%28u%5Cpi_3%20-a%5Cpi_4%28s%2Br%29%20%2B%20r%5Cpi_5%28u%2Ba%29%20-d_Aa%20%29-a%281%20-%20d_Ss%20-%20d_Uu%20-%20d_Aa%20-%20d_Rr%29" alt="\frac{da}{dt} = (u\pi_3 -a\pi_4(s+r) + r\pi_5(u+a) -d_Aa )-a(1 - d_Ss - d_Uu - d_Aa - d_Rr)" title="\frac{da}{dt} = (u\pi_3 -a\pi_4(s+r) + r\pi_5(u+a) -d_Aa )-a(1 - d_Ss - d_Uu - d_Aa - d_Rr)"></p>
<p><img src="%5Cfrac%7Bdr%7D%7Bdt%7D%20%3D%20%28a%5Cpi_4%28s%2Br%29%20-%20r%5Cpi_5%28u%2Ba%29%20-d_Rr%20%29-r%281%20-%20d_Ss%20-%20d_Uu%20-%20d_Aa%20-%20d_Rr%29" alt="\frac{dr}{dt} = (a\pi_4(s+r) - r\pi_5(u+a) -d_Rr )-r(1 - d_Ss - d_Uu - d_Aa - d_Rr)" title="\frac{dr}{dt} = (a\pi_4(s+r) - r\pi_5(u+a) -d_Rr )-r(1 - d_Ss - d_Uu - d_Aa - d_Rr)"></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Initialize a new plot with a specific figure size</span>
plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">12</span>))

<span style="color:#75715e"># Arrange the SUAR_norm function calls in a 2x2 subplot grid</span>
<span style="color:#75715e"># Plot 1 in the top-left position (1st row, 1st column)</span>
plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">1</span>)
SUAR_norm(<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>,[<span style="color:#ae81ff">0.1</span>,<span style="color:#ae81ff">0.5</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">0.1</span>],<span style="color:#ae81ff">0.6</span>,<span style="color:#ae81ff">0.2</span>,<span style="color:#ae81ff">0.1</span>,<span style="color:#ae81ff">0.1</span>,<span style="color:#ae81ff">50</span>,<span style="color:#ae81ff">0.1</span>)

<span style="color:#75715e"># Plot 2 in the top-right position (1st row, 2nd column)</span>
plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>)
SUAR_norm(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>,[<span style="color:#ae81ff">0.1</span>,<span style="color:#ae81ff">0.5</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">0.1</span>],<span style="color:#ae81ff">0.6</span>,<span style="color:#ae81ff">0.2</span>,<span style="color:#ae81ff">0.1</span>,<span style="color:#ae81ff">0.1</span>,<span style="color:#ae81ff">50</span>,<span style="color:#ae81ff">0.1</span>)

<span style="color:#75715e"># Plot 3 in the bottom-left position (2nd row, 1st column)</span>
plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>)
SUAR_norm(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>,[<span style="color:#ae81ff">0.1</span>,<span style="color:#ae81ff">0.5</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">0.1</span>],<span style="color:#ae81ff">0.6</span>,<span style="color:#ae81ff">0.2</span>,<span style="color:#ae81ff">0.1</span>,<span style="color:#ae81ff">0.1</span>,<span style="color:#ae81ff">50</span>,<span style="color:#ae81ff">0.1</span>)

<span style="color:#75715e"># Plot 4 in the bottom-right position (2nd row, 2nd column)</span>
plt<span style="color:#f92672">.</span>subplot(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>)
SUAR_norm(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">1</span>,[<span style="color:#ae81ff">0.1</span>,<span style="color:#ae81ff">0.5</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">0.1</span>],<span style="color:#ae81ff">0.6</span>,<span style="color:#ae81ff">0.2</span>,<span style="color:#ae81ff">0.1</span>,<span style="color:#ae81ff">0.1</span>,<span style="color:#ae81ff">50</span>,<span style="color:#ae81ff">0.1</span>)

<span style="color:#75715e"># Improve the spacing between the plots</span>
plt<span style="color:#f92672">.</span>tight_layout()

<span style="color:#75715e"># Finally, show all the plots</span>
plt<span style="color:#f92672">.</span>show()
</code></pre></div><img src="final_report_files/figure-markdown_strict/cell-6-output-1.png" width="1142" height="1142" />
<h1 id="results">Results</h1>
<p>We can think of deaths as a movement from all compartments to the susceptible compartments. This makes it clear that a stationary point exists when all the people are in the susceptible compartment, meaning the drug is &lsquo;extinct&rsquo;. Similarly, the drug is also extinct when everyone is either in the recovered or susceptible group, as one just has to wait for the recovered people to die for the portion of S to reach 1. These two facts can be seen in appendix 3. Let the stationary point at <img src="s%3D1" alt="s=1" title="s=1"> be the trivial stationary point.</p>
<p>However, for some combinations of parameters, secondary stationary points are found. These non-trivial stationary points could not be found analytically using MATLAB 2021b, therefore their existence must be verified on a case-by-case basis, using the code in appendix 4.
Note that all the death parameters were set to one, meaning that these results are for drugs where the rate of death is independent of the compartment. To find results for other sets of death parameters, line 25 of appendix 4 should be altered.</p>
<p>Using the table of non-trivial stationary points (appendix 10), we can now plot the number of combinations of parameters that lead to non-trivial stationary points pairwise by parameter.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> mplcatppuccin.colormaps <span style="color:#f92672">import</span> get_colormap_from_list
cmap <span style="color:#f92672">=</span> get_colormap_from_list(<span style="color:#e6db74">&#34;mocha&#34;</span>, [<span style="color:#e6db74">&#34;red&#34;</span>, <span style="color:#e6db74">&#34;peach&#34;</span>, <span style="color:#e6db74">&#34;yellow&#34;</span>, <span style="color:#e6db74">&#34;green&#34;</span>])

res <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(<span style="color:#e6db74">&#39;ss.csv&#39;</span>)
use <span style="color:#f92672">=</span>  pd<span style="color:#f92672">.</span>read_csv(<span style="color:#e6db74">&#39;avg.csv&#39;</span>)

res<span style="color:#f92672">.</span>columns <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;p1&#39;</span>,<span style="color:#e6db74">&#39;p2&#39;</span>,<span style="color:#e6db74">&#39;p3&#39;</span>,<span style="color:#e6db74">&#39;p4&#39;</span>,<span style="color:#e6db74">&#39;p5&#39;</span>, <span style="color:#e6db74">&#39;extinct&#39;</span>]
use<span style="color:#f92672">.</span>columns <span style="color:#f92672">=</span>  [ <span style="color:#e6db74">&#39;p1&#39;</span>,<span style="color:#e6db74">&#39;p2&#39;</span>,<span style="color:#e6db74">&#39;p3&#39;</span>,<span style="color:#e6db74">&#39;p4&#39;</span>,<span style="color:#e6db74">&#39;p5&#39;</span>, <span style="color:#e6db74">&#39;p_using&#39;</span>]

p <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;p1&#39;</span>,<span style="color:#e6db74">&#39;p2&#39;</span>,<span style="color:#e6db74">&#39;p3&#39;</span>,<span style="color:#e6db74">&#39;p4&#39;</span>,<span style="color:#e6db74">&#39;p5&#39;</span>]

xlabels <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;-3&#39;</span>,<span style="color:#e6db74">&#39;-2&#39;</span>,<span style="color:#e6db74">&#39;-1&#39;</span>,<span style="color:#e6db74">&#39;0&#39;</span>,<span style="color:#e6db74">&#39;1&#39;</span>,<span style="color:#e6db74">&#39;2&#39;</span>,<span style="color:#e6db74">&#39;3&#39;</span>]
fig, axs <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplots(<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">5</span>)
<span style="color:#66d9ef">for</span> i, a <span style="color:#f92672">in</span> enumerate(p):
    <span style="color:#66d9ef">for</span> j, b <span style="color:#f92672">in</span> enumerate(p):
        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">!=</span> j:
            w <span style="color:#f92672">=</span> res[[a, b, <span style="color:#e6db74">&#39;extinct&#39;</span>]]<span style="color:#f92672">.</span>groupby([a, b])<span style="color:#f92672">.</span>sum()<span style="color:#f92672">.</span>unstack()
            t <span style="color:#f92672">=</span> axs[i, j]<span style="color:#f92672">.</span>pcolormesh(w, cmap<span style="color:#f92672">=</span>cmap, vmin<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, vmax<span style="color:#f92672">=</span><span style="color:#ae81ff">216</span>)  <span style="color:#75715e"># Here is the change</span>
        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">==</span> <span style="color:#ae81ff">4</span>:
            axs[i, j]<span style="color:#f92672">.</span>set_xticks(np<span style="color:#f92672">.</span>arange(<span style="color:#ae81ff">7</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">0.5</span>, minor<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
            axs[i, j]<span style="color:#f92672">.</span>set_xticklabels(xlabels, fontdict<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, minor<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
            axs[i, j]<span style="color:#f92672">.</span>set_xlabel(<span style="color:#e6db74">&#39;Log2(&#39;</span> <span style="color:#f92672">+</span> b <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;)&#39;</span>)
        <span style="color:#66d9ef">else</span>:
            axs[i, j]<span style="color:#f92672">.</span>get_xaxis()<span style="color:#f92672">.</span>set_visible(<span style="color:#66d9ef">False</span>)
        <span style="color:#66d9ef">if</span> j <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
            axs[i, j]<span style="color:#f92672">.</span>set_yticks(np<span style="color:#f92672">.</span>arange(<span style="color:#ae81ff">7</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">0.5</span>, minor<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
            axs[i, j]<span style="color:#f92672">.</span>set_yticklabels(xlabels, fontdict<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, minor<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
            axs[i, j]<span style="color:#f92672">.</span>set_ylabel(<span style="color:#e6db74">&#39;Log2(&#39;</span> <span style="color:#f92672">+</span> a <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;)&#39;</span>)
        <span style="color:#66d9ef">else</span>:
            axs[i, j]<span style="color:#f92672">.</span>get_yaxis()<span style="color:#f92672">.</span>set_visible(<span style="color:#66d9ef">False</span>)

fig<span style="color:#f92672">.</span>subplots_adjust(right<span style="color:#f92672">=</span><span style="color:#ae81ff">0.8</span>)
cbar_ax <span style="color:#f92672">=</span> fig<span style="color:#f92672">.</span>add_axes([<span style="color:#ae81ff">0.85</span>, <span style="color:#ae81ff">0.15</span>, <span style="color:#ae81ff">0.05</span>, <span style="color:#ae81ff">0.7</span>])
c <span style="color:#f92672">=</span> fig<span style="color:#f92672">.</span>colorbar(t, cax<span style="color:#f92672">=</span>cbar_ax)
fig<span style="color:#f92672">.</span>suptitle(<span style="color:#e6db74">&#34;Number of combinations that have Non-trivial stationary points </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74"> ds=1, du=1, da=1, dr=1 s0=0.6, u0=0.2, a0=0.1, r0=0.1, Total Sims = 216&#34;</span>)
plt<span style="color:#f92672">.</span>show()
</code></pre></div><img src="final_report_files/figure-markdown_strict/cell-7-output-1.png" width="690" height="477" />
<p>From this plot, one can see a big factor that influences the creation of these non-trivial stationary points is the magnitude of <img src="%5Cpi_1" alt="\pi_1" title="\pi_1">, and to a lesser extent the ratio of <img src="%5Cpi_1" alt="\pi_1" title="\pi_1"> and <img src="%5Cpi_2" alt="\pi_2" title="\pi_2">. In this case, births will rapidly transition to the using category, meaning that they then have the potential to become addicted.</p>
<p>Another result one can take from the data is the number of people who are using or addicted to the drug at the pseudo-stationary points, as shown in the plots below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">fig, axs <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplots(<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">5</span>)
<span style="color:#66d9ef">for</span> i , a <span style="color:#f92672">in</span> enumerate( p):
    <span style="color:#66d9ef">for</span> j , b <span style="color:#f92672">in</span> enumerate(p):
        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">!=</span>j:
            w <span style="color:#f92672">=</span> use[[a,b,<span style="color:#e6db74">&#39;p_using&#39;</span>]]<span style="color:#f92672">.</span>groupby([a,b])<span style="color:#f92672">.</span>mean()
            dk <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame(np<span style="color:#f92672">.</span>nan, columns<span style="color:#f92672">=</span>xlabels, index<span style="color:#f92672">=</span>xlabels)
            <span style="color:#66d9ef">for</span> l <span style="color:#f92672">in</span> xlabels:
                <span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> xlabels:
                    <span style="color:#66d9ef">try</span>:
                        dk[m][l] <span style="color:#f92672">=</span> w<span style="color:#f92672">.</span>loc[(int(l), int(m))]
                    <span style="color:#66d9ef">except</span>:
                        <span style="color:#66d9ef">pass</span>

            t <span style="color:#f92672">=</span> axs[i, j]<span style="color:#f92672">.</span>pcolormesh(w, cmap<span style="color:#f92672">=</span>cmap, vmin<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, vmax<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)  <span style="color:#75715e"># Here is the change</span>
        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">==</span> <span style="color:#ae81ff">4</span>:
            axs[i,j]<span style="color:#f92672">.</span>set_xticks(np<span style="color:#f92672">.</span>arange(<span style="color:#ae81ff">7</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">0.5</span>, minor<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
            axs[i,j]<span style="color:#f92672">.</span>set_xticklabels(xlabels, fontdict<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, minor<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
            axs[i,j]<span style="color:#f92672">.</span>set_xlabel(<span style="color:#e6db74">&#39;Log2(&#39;</span> <span style="color:#f92672">+</span> b <span style="color:#f92672">+</span><span style="color:#e6db74">&#39;)&#39;</span>)
        <span style="color:#66d9ef">else</span>:
            axs[i,j]<span style="color:#f92672">.</span>get_xaxis()<span style="color:#f92672">.</span>set_visible(<span style="color:#66d9ef">False</span>)
        <span style="color:#66d9ef">if</span> j <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> :
            axs[i,j]<span style="color:#f92672">.</span>set_yticks(np<span style="color:#f92672">.</span>arange(<span style="color:#ae81ff">7</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">0.5</span>, minor<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
            axs[i,j]<span style="color:#f92672">.</span>set_yticklabels(xlabels, fontdict<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>, minor<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>)
            axs[i,j]<span style="color:#f92672">.</span>set_ylabel(<span style="color:#e6db74">&#39;Log2(&#39;</span> <span style="color:#f92672">+</span> a <span style="color:#f92672">+</span><span style="color:#e6db74">&#39;)&#39;</span>)
        <span style="color:#66d9ef">else</span>:
            axs[i,j]<span style="color:#f92672">.</span>get_yaxis()<span style="color:#f92672">.</span>set_visible(<span style="color:#66d9ef">False</span>)

fig<span style="color:#f92672">.</span>subplots_adjust(right<span style="color:#f92672">=</span><span style="color:#ae81ff">0.8</span>)
cbar_ax <span style="color:#f92672">=</span> fig<span style="color:#f92672">.</span>add_axes([<span style="color:#ae81ff">0.85</span>, <span style="color:#ae81ff">0.15</span>, <span style="color:#ae81ff">0.05</span>, <span style="color:#ae81ff">0.7</span>])
c <span style="color:#f92672">=</span> fig<span style="color:#f92672">.</span>colorbar(t, cax<span style="color:#f92672">=</span>cbar_ax)
fig<span style="color:#f92672">.</span>suptitle(<span style="color:#e6db74">&#34;Average portion of people using or addicted at non-Trivial Stationary Points </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74"> ds=1, du=1, da=1, dr=1 s0=0.6, u0=0.2, a0=0.1, r0=0.1, Total Sims = 216&#34;</span>)
plt<span style="color:#f92672">.</span>show()
</code></pre></div><img src="final_report_files/figure-markdown_strict/cell-8-output-1.png" width="686" height="477" />
<p>Looking at these plots we can see the following behaviors:</p>
<ul>
<li>Bigger <img src="%5Cpi_1" alt="\pi_1" title="\pi_1"> <img src="%5Cto" alt="\to" title="\to"> Higher Mean</li>
<li>Bigger <img src="%5Cpi_2" alt="\pi_2" title="\pi_2"> <img src="%5Cto" alt="\to" title="\to"> Lower Mean</li>
<li>Bigger <img src="%5Cpi_3" alt="\pi_3" title="\pi_3"> <img src="%5Cto" alt="\to" title="\to"> Lower Mean</li>
<li>Bigger <img src="%5Cpi_4" alt="\pi_4" title="\pi_4"> <img src="%5Cto" alt="\to" title="\to"> Lower Mean</li>
<li>Bigger <img src="%5Cpi_5" alt="\pi_5" title="\pi_5"> <img src="%5Cto" alt="\to" title="\to"> Higher Mean</li>
</ul>
<p>Therefore, in terms of the long-term state of drug use in communities, the best way to minimize drug use is to minimize <img src="%5Cpi_1" alt="\pi_1" title="\pi_1"> such that the drug becomes extinct. If this cannot be done, the number of people using or addicted to drugs can be minimized by lowering the values of <img src="%5Cpi_2%2C%20%5Cpi_3%2C%20%5Cpi_4" alt="\pi_2, \pi_3, \pi_4" title="\pi_2, \pi_3, \pi_4"> or maximizing the value of <img src="%5Cpi_5" alt="\pi_5" title="\pi_5"> to make the stationary point have a minimal number of people using the drug.</p>
<h1 id="discussion">Discussion</h1>
<p>Contrasting the simplified SUAR model with Nyabadza et al (2016) on crystal meth use in South Africa, the forcing parameter for a susceptible individual to transfer out of their compartment was a weighted sum of U and A rather than the sum scaled, furthermore, there was a forcing parameter dependent on the size of the drug supply chain.</p>
<p>Another downside of our model is the fact that we have not focused on one specific substance and rather decided to adopt a more general approach to the problem. When focusing on one substance and/or a &ldquo;family&rdquo; of substances such as in the paper by Mushanyu, J, Nyabadza, F, &amp; Stewart, A G R. (2015) we can narrow down our results and get more specific and detailed answers.</p>
<p>A question posed by the model is how we arrive at the various states that we see at t = 0.
For non-illicit drugs like cigarettes and alcohol, marketing strategies from distributors like television ads, billboards etc. can persuade susceptible members to initiate. We suggest the forcing parameter to be a function of the industry&rsquo;s market cap. Australia has plain packaging laws to dampen the forcing parameter. For illicit drugs, the supply of the drug depends on network effects. Online drug markets like The Silk Road can be assumed to have no interaction with non-users. Its only effect is to the accessibility of drugs for people in compartments U and A. Adding in forcing functions into the model, and/or allowing the parameters to change as a function of time will allow for these events to be modeled.</p>
<p>Regarding the findings of the model, the way parameters are altered to change when the trivial stationary point is found, or the level of drug use in a nontrivial stationary point seem in line with common policies targeting drug minimization. By lowering the amount of people who start using the drug, such as Australia&rsquo;s ban on cigarette marketing. More generally, the results show that the best way to reduce drug use is to minimize the net movement from susceptible to using and recovered to addicted.</p>
<h1 id="conclusion">Conclusion</h1>
<p>The aim of this project was to model the long-term outcomes of drug use in a community.
Four models were developed: the initial SIR model, a modified SUAR model, the SUAR model with age-structure, then the simplified SUAR model with age.
For the closed population models, the simulations had one of two outcomes: no drug users or entirely drug users. When births and deaths are accounted for, the population can have endemic proportions of susceptible, using, addicted, and recovered members.
We found ways to push drug use to extinction by manipulating the transmission parameters.</p>
<h1 id="references">References</h1>
<ol>
<li>Mushanyu, J, Nyabadza, F, Muchatibaya, G, &amp; Stewart, A G. R. (2016). Modelling Drug Abuse Epidemics in the Presence of Limited Rehabilitation Capacity. Bulletin of Mathematical Biology, 78(12), 2364-2389. <a href="https://doi.org/10.1007/s11538-016-0218-5">https://doi.org/10.1007/s11538-016-0218-5</a></li>
<li>Mushanyu, J, Nyabadza, F, &amp; Stewart, A G R. (2015). Modelling the trends of inpatient and outpatient rehabilitation for methamphetamine in the Western Cape province of South Africa. BMC Research Notes, 8(796), 797-797. <a href="https://doi.org/10.1186/s13104-015-1741-4">https://doi.org/10.1186/s13104-015-1741-4</a></li>
<li>Betterhealth.vic.gov.au. 2021. Drug use in Victoria - Better Health Channel. [online] Available at: <a href="https://www.betterhealth.vic.gov.au/health/healthyliving/drug-use-in-victoria">https://www.betterhealth.vic.gov.au/health/healthyliving/drug-use-in-victoria</a> [Accessed 21 October 2021].</li>
<li>Thedoctors.com. 2021. U.S. Surgeon General Discusses the Opioid Epidemic. [online] Available at: <a href="https://www.thedoctors.com/articles/u.s.-surgeon-general-discusses-the-opioid-epidemic/">https://www.thedoctors.com/articles/u.s.-surgeon-general-discusses-the-opioid-epidemic/</a> [Accessed 21 October 2021].</li>
<li>Caulkins, Jonathan P, Dietze, Paul, &amp; Ritter, Alison. (2007). Dynamic compartmental model of trends in Australian drug use. Health Care Management Science, 10(2), 151-162. <a href="https://doi.org/10.1007/s10729-007-9012-0">https://doi.org/10.1007/s10729-007-9012-0</a></li>
<li>Harvim, P., Zhang, H., Georgescu, P., &amp; Zhang, L. (2021). Cigarette smoking on college campuses: An epidemical modelling approach. Journal of Applied Mathematics and Computing, 65(1), 515-540. <a href="https://doi.org/10.1007/s12190-020-01402-y">https://doi.org/10.1007/s12190-020-01402-y</a></li>
<li>Nyabadza, F., Njagarah, J. B. H., &amp; Smith, R. J. (2013). Modelling the Dynamics of Crystal Meth (&lsquo;Tik&rsquo;) Abuse in the Presence of Drug-Supply Chains in South Africa. Bulletin of Mathematical Biology, 75(1), 24-48. <a href="https://doi.org/10.1007/s11538-012-9790-5">https://doi.org/10.1007/s11538-012-9790-5</a></li>
</ol>
<h1 id="appendix">Appendix</h1>
<h2 id="appendix-1--stationary-points-of-sir-model">Appendix 1 : Stationary points of SIR model</h2>
<p><img src="0%20%3D%20-%5Cpi_1%20%2A%20S%20%2A%20I" alt="0 = -\pi_1 \* S \* I" title="0 = -\pi_1 * S * I"></p>
<p><img src="0%20%3D%20%5Cpi_1%20%2A%20S%20%2A%20I%20%2B%20%5Cpi_2%20%2A%20R%20%2A%20I%20-%20%5Cpi_3%20%2A%20%20I" alt="0 = \pi_1 \* S \* I + \pi_2 \* R \* I - \pi_3 \*  I" title="0 = \pi_1 * S * I + \pi_2 * R * I - \pi_3 *  I"></p>
<p><img src="0%20%3D%20-%5Cpi_2%20%2A%20R%20%2A%20I%20%2B%20%5Cpi_3%20%2A%20I" alt="0 = -\pi_2 \* R \* I + \pi_3 \* I" title="0 = -\pi_2 * R * I + \pi_3 * I"></p>
<p>Therefore either <img src="%5Cpi_1" alt="\pi_1" title="\pi_1">, <img src="S" alt="" title="S"> or <img src="I" alt="" title="I"> must be 0</p>
<p>If <img src="I%20%3D%200" alt="I = 0" title="I = 0">:</p>
<p><img src="0%20%3D%20-%5Cpi_1%20%2A%20S%20%2A%200" alt="0 = -\pi_1 \* S \* 0" title="0 = -\pi_1 * S * 0"></p>
<p><img src="0%20%3D%20%5Cpi_1%20%2A%20S%20%2A%200%20%2B%20%5Cpi_2%20%2A%20R%20%2A%200%20-%20%5Cpi_3%20%2A%20%200" alt="0 = \pi_1 \* S \* 0 + \pi_2 \* R \* 0 - \pi_3 \*  0" title="0 = \pi_1 * S * 0 + \pi_2 * R * 0 - \pi_3 *  0"></p>
<p><img src="0%20%3D%20-%5Cpi_2%20%2A%20R%20%2A%200%20%2B%20%5Cpi_3%20%2A%200" alt="0 = -\pi_2 \* R \* 0 + \pi_3 \* 0" title="0 = -\pi_2 * R * 0 + \pi_3 * 0"></p>
<p>Therefore any point [<img src="S" alt="" title="S">,0,<img src="R" alt="" title="R">] is stationary.</p>
<p>If <img src="%5Cpi_1%20%3D%200" alt="\pi_1 = 0" title="\pi_1 = 0"> or <img src="S%3D0" alt="S=0" title="S=0">:</p>
<p><img src="0%20%3D%20%200%20%2A%20I" alt="0 =  0 \* I" title="0 =  0 * I"></p>
<p><img src="0%20%3D%200%20%2A%20I%20%2B%20%5Cpi_2%20%2A%20R%20%2A%20I%20-%20%5Cpi_3%20%2A%20%20I" alt="0 = 0 \* I + \pi_2 \* R \* I - \pi_3 \*  I" title="0 = 0 * I + \pi_2 * R * I - \pi_3 *  I"></p>
<p><img src="0%20%3D%20-%5Cpi_2%20%2A%20R%20%2A%20I%20%2B%20%5Cpi_3%20%2A%20I" alt="0 = -\pi_2 \* R \* I + \pi_3 \* I" title="0 = -\pi_2 * R * I + \pi_3 * I"></p>
<p>Therefore:</p>
<p><img src="%5Cpi_2%20%2A%20R%20%2A%20I%20-%20%5Cpi_3%20%2A%20%20I%20%3D%20-%20%5Cpi_2%20%2A%20R%20%2A%20I%20%2B%20%5Cpi_3%20%2A%20%20I" alt="\pi_2 \* R \* I - \pi_3 \*  I = - \pi_2 \* R \* I + \pi_3 \*  I" title="\pi_2 * R * I - \pi_3 *  I = - \pi_2 * R * I + \pi_3 *  I"></p>
<p><img src="%5Cpi_2%20%2A%20R%20%2A%20I%20%3D%20%5Cpi_3%20%2A%20I" alt="\pi_2 \* R \* I = \pi_3 \* I" title="\pi_2 * R * I = \pi_3 * I"></p>
<p><img src="R%3AI%20%3D%20%5Cpi_3%3A%5Cpi_2" alt="R:I = \pi_3:\pi_2" title="R:I = \pi_3:\pi_2"></p>
<p>Therefore any point [0, <img src="%5Cfrac%20%7BP_%7Btotal%7D%2A%5Cpi_2%7D%7B%5Cpi_2%20%2B%20%5Cpi_3%7D" alt="\frac {P\_{total}\*\pi_2}{\pi_2 + \pi_3}" title="\frac {P_{total}*\pi_2}{\pi_2 + \pi_3}"> ,<img src="%5Cfrac%20%7BP_%7Btotal%7D%2A%5Cpi_3%7D%7B%5Cpi_2%20%2B%20%5Cpi_3%7D" alt="\frac {P\_{total}\*\pi_3}{\pi_2 + \pi_3}" title="\frac {P_{total}*\pi_3}{\pi_2 + \pi_3}">]</p>
<h2 id="appendix-2--stationary-points-of-suar">Appendix 2 : Stationary points of SUAR</h2>
<p><img src="0%20%3D%20-%20%5Cpi_1%2AS%2A%28A%2BU%29%20%2B%20%5Cpi_2%2AU" alt="0 = - \pi_1\*S\*(A+U) + \pi_2\*U" title="0 = - \pi_1*S*(A+U) + \pi_2*U"></p>
<p><img src="0%20%3D%20%20%5Cpi_1%2AS%2A%28A%2BU%29%20-%20%5Cpi_2%2AU%20%20-%20%5Cpi_3%2AU" alt="0 =  \pi_1\*S\*(A+U) - \pi_2\*U  - \pi_3\*U" title="0 =  \pi_1*S*(A+U) - \pi_2*U  - \pi_3*U"></p>
<p><img src="0%20%3D%20%5Cpi_3%2AU%20%2B%5Cpi_4%20%2A%28A%2BU%29%2AR%20-%20%5Cpi_5%2AA" alt="0 = \pi_3\*U +\pi_4 \*(A+U)\*R - \pi_5\*A" title="0 = \pi_3*U +\pi_4 *(A+U)*R - \pi_5*A"></p>
<p><img src="0%20%3D%20%20%5Cpi_5%2AA%20-%20%5Cpi_4%20%2A%28A%2BU%29%2AR" alt="0 =  \pi_5\*A - \pi_4 \*(A+U)\*R" title="0 =  \pi_5*A - \pi_4 *(A+U)*R"></p>
<p>By combing the first two and last two equations, one can see that if the parameters are non 0, <img src="U%3D0" alt="U=0" title="U=0">. Therefore:</p>
<p><img src="0%20%3D%20%5Cpi_1%2AS%2AA" alt="0 = \pi_1\*S\*A" title="0 = \pi_1*S*A"></p>
<p><img src="0%20%3D%20%5Cpi_4%20%2AA%2AR%20-%20%5Cpi_5%2AA" alt="0 = \pi_4 \*A\*R - \pi_5\*A" title="0 = \pi_4 *A*R - \pi_5*A"></p>
<p><img src="0%20%3D%20%20%5Cpi_5%2AA%20-%20%5Cpi_4%20%2AA%2AR" alt="0 =  \pi_5\*A - \pi_4 \*A\*R" title="0 =  \pi_5*A - \pi_4 *A*R"></p>
<p>Therefore <img src="S%20%3D%200" alt="S = 0" title="S = 0"> or <img src="A%20%3D%200" alt="A = 0" title="A = 0">
In the case <img src="A%20%3D%200" alt="A = 0" title="A = 0">, any point [<img src="S" alt="" title="S">,0,0,<img src="R" alt="" title="R">] will be stationary</p>
<p>In the case <img src="S%3D0" alt="S=0" title="S=0"></p>
<p><img src="%5Cpi_4%2AA%2AR%20%3D%20%5Cpi_5%2AA" alt="\pi_4\*A\*R = \pi_5\*A" title="\pi_4*A*R = \pi_5*A"></p>
<p><img src="R%3AA%20%3D%20%5Cpi_5%3A%5Cpi_4" alt="R:A = \pi_5:\pi_4" title="R:A = \pi_5:\pi_4"></p>
<p>Therefore any point [0,0, <img src="%5Cfrac%20%7BP_%7Btotal%7D%2A%5Cpi_4%7D%7B%5Cpi_4%20%2B%20%5Cpi_5%7D" alt="\frac {P\_{total}\*\pi_4}{\pi_4 + \pi_5}" title="\frac {P_{total}*\pi_4}{\pi_4 + \pi_5}"> ,<img src="%5Cfrac%20%7BP_%7Btotal%7D%2A%5Cpi_5%7D%7B%5Cpi_4%20%2B%20%5Cpi_5%7D" alt="\frac {P\_{total}\*\pi_5}{\pi_4 + \pi_5}" title="\frac {P_{total}*\pi_5}{\pi_4 + \pi_5}">]</p>
<h2 id="appendix-3-critical-points-of-simplified-suar-model">Appendix 3: Critical Points of Simplified SUAR model</h2>
<p>When s = 1:</p>
<p><img src="s%20%3D%201" alt="s = 1" title="s = 1"></p>
<p><img src="%5Cfrac%7Bds%7D%7Bdt%7D%20%3D%20%28-d_Ss%20%2B%201%29-s%281%20-%20d_Ss%29%20%3D%20%281-S%29%281-d_Ss%29%20%20%3D%200" alt="\frac{ds}{dt} = (-d_Ss + 1)-s(1 - d_Ss) = (1-S)(1-d_Ss)  = 0" title="\frac{ds}{dt} = (-d_Ss + 1)-s(1 - d_Ss) = (1-S)(1-d_Ss)  = 0"></p>
<p><img src="%5Cfrac%7Bdu%7D%7Bdt%7D%20%3D%200" alt="\frac{du}{dt} = 0" title="\frac{du}{dt} = 0"></p>
<p><img src="%5Cfrac%7Bda%7D%7Bdt%7D%20%3D%200" alt="\frac{da}{dt} = 0" title="\frac{da}{dt} = 0"></p>
<p><img src="%5Cfrac%7Bdr%7D%7Bdt%7D%20%3D%200" alt="\frac{dr}{dt} = 0" title="\frac{dr}{dt} = 0"></p>
<p>When s+r = 1:</p>
<p><img src="s%2Br%20%3D%201" alt="s+r = 1" title="s+r = 1"></p>
<p><img src="s%20%3D%201%20-%20r" alt="s = 1 - r" title="s = 1 - r"></p>
<p><img src="%5Cfrac%7Bds%7D%7Bdt%7D%20%3D%20%28-d_Ss%20%2B%20b%29-s%281%20-%20d_Ss%20-%20d_Rr%29%20%20%3D%20%281%20-s%29%2A%281%20%2B%20d_r%2As%20-%20d_s%2As%29" alt="\frac{ds}{dt} = (-d_Ss + b)-s(1 - d_Ss - d_Rr)  = (1 -s)\*(1 + d_r\*s - d_s\*s)" title="\frac{ds}{dt} = (-d_Ss + b)-s(1 - d_Ss - d_Rr)  = (1 -s)*(1 + d_r*s - d_s*s)"></p>
<p><img src="%5Cfrac%7Bdu%7D%7Bdt%7D%20%3D%200" alt="\frac{du}{dt} = 0" title="\frac{du}{dt} = 0"></p>
<p><img src="%5Cfrac%7Bda%7D%7Bdt%7D%20%3D%200" alt="\frac{da}{dt} = 0" title="\frac{da}{dt} = 0"></p>
<p><img src="%5Cfrac%7Bdr%7D%7Bdt%7D%20%3D%20%28-d_Rr%20%29-r%281%20-%20d_Ss%20-%20d_Rr%29%20%3D%20%28s%20-%201%29%2A%281%20%2B%20d_r%2As%20-%20d_s%2As%29" alt="\frac{dr}{dt} = (-d_Rr )-r(1 - d_Ss - d_Rr) = (s - 1)\*(1 + d_r\*s - d_s\*s)" title="\frac{dr}{dt} = (-d_Rr )-r(1 - d_Ss - d_Rr) = (s - 1)*(1 + d_r*s - d_s*s)"></p>
<h2 id="appendix-4-matlab-code-for-generating-conditional-stationary-points">Appendix 4: Matlab code for generating conditional Stationary Points</h2>
<p>```{octave, eval = FALSE}
syms s u a r p1 p2 p3 p4 p5 ds du da dr</p>
<p>ode1 = (-s<em>p1</em>(u+a)+u<em>p2</em>(s+r) -ds<em>s + 1)-s <em>(1 - ds</em>s - du</em>u - da<em>a - dr</em>r);
ode2 = (s<em>p1</em>(u+a)-u<em>p2</em>(s+r) - u<em>p3 -du</em>u )-u*(1 - ds<em>s - du</em>u - da<em>a - dr</em>r) ;
ode3 = (u<em>p3 -a</em>p4*(s+r) + r<em>p5</em>(u+a) -da<em>a )-a</em>(1 - ds<em>s - du</em>u - da<em>a - dr</em>r);
ode4 = (a<em>p4</em>(s+r) - r<em>p5</em>(u+a) -dr<em>r )-r</em>(1 - ds<em>s -du</em>u - da<em>a - dr</em>r);
sums = s+u+a+r;</p>
<p>odes = [ode1 == 0, ode2 == 0, ode3 == 0 , ode4 == 0, sums == 1, s&gt;=0, u &gt;= 0, a &gt;=0, r&gt;=0];</p>
<p>ss = [];
avg = [];</p>
<p>k = 3;</p>
<p>for p1i = -k:k
for p2i = -k:k
for p3i = -k:k
for p4i = -k:k
for p5i = -k:k
[p1, p2, p3, p4, p5, ds, du, da, dr] = deal(2^p1i, 2^p2i, 2^p3i, 2^p4i, 2^p5i,1,1,1,1);
sol = solve(subs(odes),&lsquo;Real&rsquo;,true);
ss = [ss ; [p1i,p2i,p3i,p4i,p5i,length(sol.s) - 1]];
if length(sol.s) &gt; 1
avg = [avg ; [p1i,p2i,p3i,p4i,p5i,mean(sol.u(2:length(sol.u)) + sol.a(2:length(sol.a)))]];
end;end;end;end;end;end</p>
<p>writematrix(double(avg),&lsquo;avg.csv&rsquo;)
writematrix(double(ss), &lsquo;ss.csv&rsquo;)</p>
<pre><code>## Appendix 5: Python code for simulating SIR model

::: {.cell execution_count=8}
``` {.python .cell-code}
from inspect import getsource as gs
print(gs(SIR))
</code></pre>
<div class="cell-output cell-output-stdout">
<pre><code>def SIR(p1, p2, p3, S0, I0, R0, i):
    vect_initial = np.array([S0, I0, R0]).T

    output = pd.DataFrame(columns=[&quot;day&quot;, &quot;S&quot;, &quot;I&quot;, &quot;R&quot;])
    j = 0
    vect = vect_initial.copy()

    while j &lt; i:
        vectplus1 = np.zeros([3])
        S = vect[0]
        I = vect[1]
        R = vect[2]
        vectplus1[0] = S - p1 * S * I
        vectplus1[1] = I + p1 * S * I + p2 * R * I - p3 * I
        vectplus1[2] = R - p2 * R * I + p3 * I
        output.loc[j] = np.concatenate((np.array([j]), vectplus1.T))
        vect = vectplus1.copy()
        j += 1

    plt.plot(output[&quot;day&quot;], output[&quot;S&quot;])
    plt.plot(output[&quot;day&quot;], output[&quot;I&quot;])
    plt.plot(output[&quot;day&quot;], output[&quot;R&quot;])
    plt.title(&quot;p1=&quot; + str(p1) + &quot;, p2=&quot; + str(p2) + &quot;, p3=&quot; + str(p3))
    plt.legend([&quot;S&quot;, &quot;I&quot;, &quot;R&quot;])
</code></pre>
</div>
<p>:::</p>
<h2 id="appendix-6-python-code-for-simulating-suar-model">Appendix 6: Python code for simulating SUAR model</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> inspect <span style="color:#f92672">import</span> getsource <span style="color:#66d9ef">as</span> gs
print(gs(SUAR))
</code></pre></div><pre><code>def SUAR(p1, p2, p3, p4, p5, S0, U0, A0, R0, i):
    vect_initial = np.array([S0, U0, A0, R0]).T

    output = pd.DataFrame(columns=[&quot;day&quot;, &quot;S&quot;, &quot;U&quot;, &quot;A&quot;, &quot;R&quot;])
    j = 0
    vect = vect_initial.copy()

    while j &lt; i:
        vectplus1 = np.zeros([4])
        S = vect[0]
        U = vect[1]
        A = vect[2]
        R = vect[3]
        vectplus1[0] = S - p1 * S * (A + U) + p2 * U
        vectplus1[1] = U + p1 * S * (A + U) - p2 * U - p3 * U
        vectplus1[2] = A + p3 * U + p5 * (A + U) * R - p4 * A
        vectplus1[3] = R + p4 * A - p5 * (A + U) * R
        output.loc[j] = np.concatenate((np.array([j]), vectplus1.T))
        vect = vectplus1.copy()
        j += 1

    plt.plot(output[&quot;day&quot;], output[&quot;S&quot;])
    plt.plot(output[&quot;day&quot;], output[&quot;U&quot;])
    plt.plot(output[&quot;day&quot;], output[&quot;A&quot;])
    plt.plot(output[&quot;day&quot;], output[&quot;R&quot;])
    plt.title(
        &quot;p1=&quot;
        + str(p1)
        + &quot;, p2=&quot;
        + str(p2)
        + &quot;, p3=&quot;
        + str(p3)
        + &quot;, p4=&quot;
        + str(p4)
        + &quot;, p5=&quot;
        + str(p5)
    )
    plt.legend([&quot;S&quot;, &quot;U&quot;, &quot;A&quot;, &quot;R&quot;])
</code></pre>
<h2 id="appendix-7-python-code-for-simulating-20-compartment-suar-model">Appendix 7: Python code for simulating 20 compartment SUAR model</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> inspect <span style="color:#f92672">import</span> getsource <span style="color:#66d9ef">as</span> gs
print(gs(SUAR_20))
</code></pre></div><pre><code>def SUAR_20(aging_rate, birth_rate, death_rate, I, P, X0, steps):
    C = pd.DataFrame(columns=[&quot;s&quot;, &quot;t&quot;, &quot;a&quot;, &quot;r&quot;], dtype=&quot;float128&quot;)
    T = pd.DataFrame(columns=[&quot;s&quot;, &quot;t&quot;, &quot;a&quot;, &quot;r&quot;], dtype=&quot;float128&quot;)
    Y = pd.DataFrame(columns=[&quot;s&quot;, &quot;t&quot;, &quot;a&quot;, &quot;r&quot;], dtype=&quot;float128&quot;)
    A = pd.DataFrame(columns=[&quot;s&quot;, &quot;t&quot;, &quot;a&quot;, &quot;r&quot;], dtype=&quot;float128&quot;)
    S = pd.DataFrame(columns=[&quot;s&quot;, &quot;t&quot;, &quot;a&quot;, &quot;r&quot;], dtype=&quot;float128&quot;)

    (n_age_groups, n_status) = np.shape(X0)
    itterations = 0
    while itterations &lt; steps:
        C.loc[itterations] = X0[0]
        T.loc[itterations] = X0[1]
        Y.loc[itterations] = X0[2]
        A.loc[itterations] = X0[3]
        S.loc[itterations] = X0[4]

        i = 0

        IE = np.matmul(I, X0)

        Xn = np.zeros(np.shape(X0))

        while i &lt; n_age_groups:
            group_vect = X0[i].copy()
            s = group_vect[0]
            t = group_vect[1]
            a = group_vect[2]
            r = group_vect[3]
            interaction_neg = np.sum(IE[i][[1, 2]])
            interaction_pos = np.sum(IE[i][[0, 3]])

            Xn[i][0] = (
                s - (s * P[i][0] * interaction_neg) + t * P[i][1] * interaction_pos
            )
            Xn[i][1] = (
                t
                + (s * P[i][0] * interaction_neg)
                - t * P[i][1] * interaction_pos
                - t * P[i][2]
            )
            Xn[i][2] = (
                a
                + t * P[i][2]
                + r * P[i][4] * interaction_neg
                - a * P[i][3] * interaction_pos
            )
            Xn[i][3] = r - r * P[i][4] * interaction_neg + a * P[i][3] * interaction_pos

            i += 1

        Xn_aged = np.zeros(np.shape(X0))

        i = 0
        j = 0

        while i &lt; n_age_groups:
            j = 0
            while j &lt; n_status:
                if i == 0:
                    if j == 0:
                        Xn_aged[i][j] = Xn[i][j] * (
                            1 - aging_rate - death_rate[i][j]
                        ) + birth_rate * sum(Xn[2] + Xn[3])
                j += 1
            i += 1

        itterations += 1
</code></pre>
<h2 id="appendix-8-python-code-for-simulating-5-compartment-suar-model">Appendix 8: Python code for simulating 5 compartment SUAR model</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> inspect <span style="color:#f92672">import</span> getsource <span style="color:#66d9ef">as</span> gs
print(gs(SUAR_5))
</code></pre></div><pre><code>def SUAR_5(p1, p2, p3, p4, p5, b, d, S0, U0, A0, R0, i):
    vect_initial = np.array([S0, U0, A0, R0]).T

    output = pd.DataFrame(columns=[&quot;day&quot;, &quot;S&quot;, &quot;U&quot;, &quot;A&quot;, &quot;R&quot;])
    j = 0
    vect = vect_initial.copy()

    while j &lt; i:
        vectplus1 = np.zeros([4])
        S = vect[0]
        U = vect[1]
        A = vect[2]
        R = vect[3]
        vectplus1[0] = (
            S - p1 * S * (A + U) + p2 * U * (S + R) - d[0] * S + b * (S + U + A + R)
        )
        vectplus1[1] = U + p1 * S * (A + U) - p2 * U * (S + R) - p3 * U - d[1] * U
        vectplus1[2] = A + p3 * U + p5 * (A + U) * R - p4 * A * (R + S) - d[2] * A
        vectplus1[3] = R + p4 * A * (S + R) - p5 * (A + U) * R - d[3] * R

        output.loc[j] = np.concatenate((np.array([j]), vectplus1.T))
        vect = vectplus1.copy()
        j += 1

    output[&quot;pop&quot;] = output[&quot;S&quot;] + output[&quot;U&quot;] + output[&quot;A&quot;] + output[&quot;R&quot;]
    plt.plot(output[&quot;day&quot;], output[&quot;S&quot;] / output[&quot;pop&quot;])
    plt.plot(output[&quot;day&quot;], output[&quot;U&quot;] / output[&quot;pop&quot;])
    plt.plot(output[&quot;day&quot;], output[&quot;A&quot;] / output[&quot;pop&quot;])
    plt.plot(output[&quot;day&quot;], output[&quot;R&quot;] / output[&quot;pop&quot;])
    plt.title(
        &quot;Portion: p1=&quot;
        + str(p1)
        + &quot;, p2=&quot;
        + str(p2)
        + &quot;, p3=&quot;
        + str(p3)
        + &quot;, p4=&quot;
        + str(p4)
        + &quot;, p5=&quot;
        + str(p5)
    )
    plt.legend([&quot;S&quot;, &quot;U&quot;, &quot;A&quot;, &quot;R&quot;])
</code></pre>
<h2 id="appendix-9-python-code-for-simulating-5-compartment-dimensionless-suar-model">Appendix 9: Python code for simulating 5 compartment dimensionless SUAR model</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> inspect <span style="color:#f92672">import</span> getsource <span style="color:#66d9ef">as</span> gs
print(gs(SUAR_norm))
</code></pre></div><pre><code>def SUAR_norm(p1, p2, p3, p4, p5, d, S0, U0, A0, R0, i, h, plot=True):
    vect_initial = np.array([S0, U0, A0, R0]).T

    output = pd.DataFrame(columns=[&quot;day&quot;, &quot;s&quot;, &quot;u&quot;, &quot;a&quot;, &quot;r&quot;])
    j = 0
    vect = vect_initial.copy()

    ds = d[0]
    du = d[1]
    da = d[2]
    dr = d[3]

    while j &lt; i:
        vectplus1 = np.zeros([4])
        s = vect[0]
        u = vect[1]
        a = vect[2]
        r = vect[3]
        vectplus1[0] = s + h * (
            (-s * p1 * (u + a) + u * p2 * (s + r) - ds * s + 1)
            - s * (1 - ds * s - du * u - da * a - dr * r)
        )
        vectplus1[1] = u + h * (
            (s * p1 * (u + a) - u * p2 * (s + r) - u * p3 - du * u)
            - u * (1 - ds * s - du * u - da * a - dr * r)
        )
        vectplus1[2] = a + h * (
            (u * p3 - a * p4 * (s + r) + r * p5 * (u + a) - da * a)
            - a * (1 - ds * s - du * u - da * a - dr * r)
        )
        vectplus1[3] = r + h * (
            (a * p4 * (s + r) - r * p5 * (u + a) - dr * r)
            - r * (1 - ds * s - du * u - da * a - dr * r)
        )
        output.loc[j] = np.concatenate((np.array([j * h]), vectplus1.T))
        vect = vectplus1.copy()
        j += 1
    if plot:
        plt.plot(output[&quot;day&quot;], output[&quot;s&quot;])
        plt.plot(output[&quot;day&quot;], output[&quot;u&quot;])
        plt.plot(output[&quot;day&quot;], output[&quot;a&quot;])
        plt.plot(output[&quot;day&quot;], output[&quot;r&quot;])
        plt.title(
            &quot;Portion: p1=&quot;
            + str(p1)
            + &quot;, p2=&quot;
            + str(p2)
            + &quot;, p3=&quot;
            + str(p3)
            + &quot;, p4=&quot;
            + str(p4)
            + &quot;, p5=&quot;
            + str(p5)
        )
        plt.legend([&quot;S&quot;, &quot;U&quot;, &quot;A&quot;, &quot;R&quot;])
        return
    else:
        return [s, u, a, r]
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Maximising the Number of Friendship Bracelets for the Taylor Swift Concert</title>
            <link>/1/01/01/maximising-the-number-of-friendship-bracelets-for-the-taylor-swift-concert/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            
            <guid>/1/01/01/maximising-the-number-of-friendship-bracelets-for-the-taylor-swift-concert/</guid>
            <description>import re song_list = [ &amp;#34;Tim McGraw&amp;#34;, &amp;#34;Marys Song&amp;#34;, &amp;#34;Our Song&amp;#34;, &amp;#34;Im Only Me When Im With You&amp;#34;, &amp;#34;Invisible&amp;#34;, &amp;#34;A Perfectly Good Heart&amp;#34;, &amp;#34;Last Christmas&amp;#34;, &amp;#34;Christmases When You Were Mine&amp;#34;, &amp;#34;Santa Baby&amp;#34;, &amp;#34;Silent Night&amp;#34;, &amp;#34;Christmas Must Be Something More&amp;#34;, &amp;#34;White Christmas&amp;#34;, &amp;#34;Jump Then Fall&amp;#34;, &amp;#34;Untouchable&amp;#34;, &amp;#34;Forever Always&amp;#34;, &amp;#34;Come In With The Rain&amp;#34;, &amp;#34;Superstar&amp;#34;, &amp;#34;The Other Side Of The Door&amp;#34;, &amp;#34;Fearless&amp;#34;, &amp;#34;Fifteen&amp;#34;, &amp;#34;Love Story&amp;#34;, &amp;#34;Hey Stephen&amp;#34;, &amp;#34;White Horse&amp;#34;, &amp;#34;You Belong With Me&amp;#34;, &amp;#34;Breathe&amp;#34;, &amp;#34;Tell Me Why&amp;#34;, &amp;#34;Youre Not Sorry&amp;#34;, &amp;#34;The Way I Loved You&amp;#34;, &amp;#34;Forever and Always&amp;#34;, &amp;#34;The Best Day&amp;#34;, &amp;#34;Change&amp;#34;, &amp;#34;Mine&amp;#34;, &amp;#34;Sparks Fly&amp;#34;, &amp;#34;Back To December&amp;#34;, &amp;#34;Speak Now&amp;#34;, &amp;#34;Dear John&amp;#34;, &amp;#34;Mean&amp;#34;, &amp;#34;The Story Of Us&amp;#34;, &amp;#34;Never Grow Up&amp;#34;, &amp;#34;Enchanted&amp;#34;, &amp;#34;Better Than Revenge&amp;#34;, &amp;#34;Innocent&amp;#34;, &amp;#34;Haunted&amp;#34;, &amp;#34;Last Kiss&amp;#34;, &amp;#34;Long Live&amp;#34;, &amp;#34;Ours&amp;#34;, &amp;#34;If This Was A Movie&amp;#34;, &amp;#34;Superman&amp;#34;, &amp;#34;State Of Grace&amp;#34;, &amp;#34;Red&amp;#34;, &amp;#34;Treacherous&amp;#34;, &amp;#34;I Knew You Were Trouble&amp;#34;, &amp;#34;All Too Well&amp;#34;, &amp;#34;TwentyTwo&amp;#34;, &amp;#34;I Almost Do&amp;#34;, &amp;#34;We Are Never Ever Getting Back Together&amp;#34;, &amp;#34;Come Back Be Here&amp;#34;, &amp;#34;Girl At Home&amp;#34;, &amp;#34;Welcome To New York&amp;#34;, &amp;#34;Blank Space&amp;#34;, &amp;#34;Style&amp;#34;, &amp;#34;Out Of The Woods&amp;#34;, &amp;#34;All You Had To Do Was Stay&amp;#34;, &amp;#34;Shake It Off&amp;#34;, &amp;#34;I Wish You Would&amp;#34;, &amp;#34;Bad Blood&amp;#34;, &amp;#34;Wildest Dreams&amp;#34;, &amp;#34;How You Get The Girl&amp;#34;, &amp;#34;This Love&amp;#34;, &amp;#34;I Know Places&amp;#34;, &amp;#34;Clean&amp;#34;, &amp;#34;Wonderland&amp;#34;, &amp;#34;You Are In Love&amp;#34;, &amp;#34;New Romantics&amp;#34;, &amp;#34;Ready For It&amp;#34;, &amp;#34;End Game&amp;#34;, &amp;#34;I Did Something Bad&amp;#34;, &amp;#34;Dont Blame Me&amp;#34;, &amp;#34;Delicate&amp;#34;, &amp;#34;Look What You Made Me Do&amp;#34;, &amp;#34;So It Goe&amp;#34;, &amp;#34;Gorgeous&amp;#34;, &amp;#34;Getaway Car&amp;#34;, &amp;#34;King Of My Heart&amp;#34;, &amp;#34;Dancing With Our Hands Tied&amp;#34;, &amp;#34;Dress&amp;#34;, &amp;#34;This Is Why We Cant Have Nice Things&amp;#34;, &amp;#34;Call It What You Want&amp;#34;, &amp;#34;New Years Day&amp;#34;, &amp;#34;I Forgot That You Existed&amp;#34;, &amp;#34;Cruel Summer&amp;#34;, &amp;#34;Lover&amp;#34;, &amp;#34;The Man&amp;#34;, &amp;#34;The Archer&amp;#34;, &amp;#34;I Think He Knows&amp;#34;, &amp;#34;Miss Americana &amp;amp; The Heartbreak Prince&amp;#34;, &amp;#34;Paper Rings&amp;#34;, &amp;#34;Cornelia Street&amp;#34;, &amp;#34;Death By A Thousand Cuts&amp;#34;, &amp;#34;London Boy&amp;#34;, &amp;#34;Soon Youll Get Better&amp;#34;, &amp;#34;False God&amp;#34;, &amp;#34;You Need To Calm Down&amp;#34;, &amp;#34;Afterglow&amp;#34;, &amp;#34;ME&amp;#34;, &amp;#34;Its Nice To Have A Friend&amp;#34;, &amp;#34;Daylight&amp;#34;, &amp;#34;the one&amp;#34;, &amp;#34;cardigan&amp;#34;, &amp;#34;the last great american dynasty&amp;#34;, &amp;#34;exile&amp;#34;, &amp;#34;my tears ricochet&amp;#34;, &amp;#34;mirrorball&amp;#34;, &amp;#34;seven&amp;#34;, &amp;#34;august&amp;#34;, &amp;#34;this is me trying&amp;#34;, &amp;#34;illicit affairs&amp;#34;, &amp;#34;invisible string&amp;#34;, &amp;#34;mad woman&amp;#34;, &amp;#34;epiphany&amp;#34;, &amp;#34;betty&amp;#34;, &amp;#34;peace&amp;#34;, &amp;#34;hoax&amp;#34;, &amp;#34;the lakes&amp;#34;, &amp;#34;willow&amp;#34;, &amp;#34;champagne problems&amp;#34;, &amp;#34;gold rush&amp;#34;, &amp;#34;tis the damn season&amp;#34;, &amp;#34;tolerate it&amp;#34;, &amp;#34;no body no crime&amp;#34;, &amp;#34;happiness&amp;#34;, &amp;#34;dorothea&amp;#34;, &amp;#34;coney island&amp;#34;, &amp;#34;ivy&amp;#34;, &amp;#34;cowboy like me&amp;#34;, &amp;#34;long story short&amp;#34;, &amp;#34;marjorie&amp;#34;, &amp;#34;closure&amp;#34;, &amp;#34;evermore&amp;#34;, &amp;#34;right where you left me&amp;#34;, &amp;#34;its time to go&amp;#34;, &amp;#34;You All Over Me&amp;#34;, &amp;#34;Mr Perfectly Fine&amp;#34;, &amp;#34;We Were Happy&amp;#34;, &amp;#34;Thats When&amp;#34;, &amp;#34;Dont You&amp;#34;, &amp;#34;Bye Bye Baby&amp;#34;, &amp;#34;Message In A Bottle&amp;#34;, &amp;#34;I Bet You Think About Me&amp;#34;, &amp;#34;Forever Winter&amp;#34;, &amp;#34;Run&amp;#34;, &amp;#34;The Very First Night&amp;#34;, &amp;#34;All Too Well&amp;#34;, &amp;#34;Lavender Haze&amp;#34;, &amp;#34;Maroon&amp;#34;, &amp;#34;Anti-Hero&amp;#34;, &amp;#34;Snow On The Beach&amp;#34;, &amp;#34;Youre On Your Own Kid&amp;#34;, &amp;#34;Midnight Rain&amp;#34;, &amp;#34;Question&amp;#34;, &amp;#34;Vigilante Shit&amp;#34;, &amp;#34;Bejeweled&amp;#34;, &amp;#34;Labyrinth&amp;#34;, &amp;#34;Karma&amp;#34;, &amp;#34;Sweet Nothing&amp;#34;, &amp;#34;Mastermind&amp;#34;, &amp;#34;Hits Different&amp;#34;, &amp;#34;Bigger Than The Whole Sky&amp;#34;, &amp;#34;Paris&amp;#34;, &amp;#34;High Infidelity&amp;#34;, &amp;#34;Glitch&amp;#34;, &amp;#34;Wouldve Couldve Shouldve&amp;#34;, &amp;#34;Dear Reader&amp;#34;, &amp;#34;Electric Touch&amp;#34;, &amp;#34;When Emma Falls in Love&amp;#34;, &amp;#34;I Can See You&amp;#34;, &amp;#34;Castles Crumbling&amp;#34;, &amp;#34;Foolish One&amp;#34;, &amp;#34;Timeless&amp;#34;, &amp;#34;Slut&amp;#34;, &amp;#34;Say Dont Go&amp;#34;, &amp;#34;Now That We Dont Talk &amp;#34;, &amp;#34;Suburban Legends&amp;#34;, &amp;#34;Is It Over Now&amp;#34;, &amp;#34;Sweeter Than Fiction&amp;#34;, &amp;#34;Red&amp;#34;, &amp;#34;Fearless&amp;#34;, &amp;#34;Midnights&amp;#34;, &amp;#34;Reputation&amp;#34;, &amp;#34;Lover&amp;#34;, &amp;#34;Folklore&amp;#34;, &amp;#34;Evermore&amp;#34;, &amp;#34;Red&amp;#34;] bead_dict = { &amp;#39;a&amp;#39;: 5, &amp;#39;b&amp;#39;: 9, &amp;#39;c&amp;#39;: 12, &amp;#39;d&amp;#39;: 4, &amp;#39;e&amp;#39;: 5, &amp;#39;f&amp;#39;: 5, &amp;#39;g&amp;#39;: 10, &amp;#39;h&amp;#39;: 13, &amp;#39;i&amp;#39;: 14, &amp;#39;j&amp;#39;: 11, &amp;#39;k&amp;#39;: 6, &amp;#39;l&amp;#39;: 12, &amp;#39;m&amp;#39;: 15, &amp;#39;n&amp;#39;: 9, &amp;#39;o&amp;#39;:4, &amp;#39;p&amp;#39;: 12, &amp;#39;q&amp;#39;: 9, &amp;#39;r&amp;#39;: 4, &amp;#39;s&amp;#39;: 10, &amp;#39;t&amp;#39;: 6, &amp;#39;u&amp;#39;: 6, &amp;#39;v&amp;#39;: 11, &amp;#39;x&amp;#39;: 6, &amp;#39;y&amp;#39;: 11, &amp;#39;z&amp;#39;: 17 } With Taylor Swift coming to Melbourne next week, my house has started its prep for the concert.</description>
            <content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> re 
song_list <span style="color:#f92672">=</span> [
<span style="color:#e6db74">&#34;Tim McGraw&#34;</span>,
<span style="color:#e6db74">&#34;Marys Song&#34;</span>,
<span style="color:#e6db74">&#34;Our Song&#34;</span>,
<span style="color:#e6db74">&#34;Im Only Me When Im With You&#34;</span>,
<span style="color:#e6db74">&#34;Invisible&#34;</span>,
<span style="color:#e6db74">&#34;A Perfectly Good Heart&#34;</span>,
<span style="color:#e6db74">&#34;Last Christmas&#34;</span>,
<span style="color:#e6db74">&#34;Christmases When You Were Mine&#34;</span>,
<span style="color:#e6db74">&#34;Santa Baby&#34;</span>,
<span style="color:#e6db74">&#34;Silent Night&#34;</span>,
<span style="color:#e6db74">&#34;Christmas Must Be Something More&#34;</span>,
<span style="color:#e6db74">&#34;White Christmas&#34;</span>,
<span style="color:#e6db74">&#34;Jump Then Fall&#34;</span>,
<span style="color:#e6db74">&#34;Untouchable&#34;</span>,
<span style="color:#e6db74">&#34;Forever  Always&#34;</span>,
<span style="color:#e6db74">&#34;Come In With The Rain&#34;</span>,
<span style="color:#e6db74">&#34;Superstar&#34;</span>,
<span style="color:#e6db74">&#34;The Other Side Of The Door&#34;</span>,
<span style="color:#e6db74">&#34;Fearless&#34;</span>,
<span style="color:#e6db74">&#34;Fifteen&#34;</span>,
<span style="color:#e6db74">&#34;Love Story&#34;</span>,
<span style="color:#e6db74">&#34;Hey Stephen&#34;</span>,
<span style="color:#e6db74">&#34;White Horse&#34;</span>,
<span style="color:#e6db74">&#34;You Belong With Me&#34;</span>,
<span style="color:#e6db74">&#34;Breathe&#34;</span>,
<span style="color:#e6db74">&#34;Tell Me Why&#34;</span>,
<span style="color:#e6db74">&#34;Youre Not Sorry&#34;</span>,
<span style="color:#e6db74">&#34;The Way I Loved You&#34;</span>,
<span style="color:#e6db74">&#34;Forever and Always&#34;</span>,
<span style="color:#e6db74">&#34;The Best Day&#34;</span>,
<span style="color:#e6db74">&#34;Change&#34;</span>,
<span style="color:#e6db74">&#34;Mine&#34;</span>,
<span style="color:#e6db74">&#34;Sparks Fly&#34;</span>,
<span style="color:#e6db74">&#34;Back To December&#34;</span>,
<span style="color:#e6db74">&#34;Speak Now&#34;</span>,
<span style="color:#e6db74">&#34;Dear John&#34;</span>,
<span style="color:#e6db74">&#34;Mean&#34;</span>,
<span style="color:#e6db74">&#34;The Story Of Us&#34;</span>,
<span style="color:#e6db74">&#34;Never Grow Up&#34;</span>,
<span style="color:#e6db74">&#34;Enchanted&#34;</span>,
<span style="color:#e6db74">&#34;Better Than Revenge&#34;</span>,
<span style="color:#e6db74">&#34;Innocent&#34;</span>,
<span style="color:#e6db74">&#34;Haunted&#34;</span>,
<span style="color:#e6db74">&#34;Last Kiss&#34;</span>,
<span style="color:#e6db74">&#34;Long Live&#34;</span>,
<span style="color:#e6db74">&#34;Ours&#34;</span>,
<span style="color:#e6db74">&#34;If This Was A Movie&#34;</span>,
<span style="color:#e6db74">&#34;Superman&#34;</span>,
<span style="color:#e6db74">&#34;State Of Grace&#34;</span>,
<span style="color:#e6db74">&#34;Red&#34;</span>,
<span style="color:#e6db74">&#34;Treacherous&#34;</span>,
<span style="color:#e6db74">&#34;I Knew You Were Trouble&#34;</span>,
<span style="color:#e6db74">&#34;All Too Well&#34;</span>,
<span style="color:#e6db74">&#34;TwentyTwo&#34;</span>,
<span style="color:#e6db74">&#34;I Almost Do&#34;</span>,
<span style="color:#e6db74">&#34;We Are Never Ever Getting Back Together&#34;</span>,
<span style="color:#e6db74">&#34;Come Back Be Here&#34;</span>,
<span style="color:#e6db74">&#34;Girl At Home&#34;</span>,
<span style="color:#e6db74">&#34;Welcome To New York&#34;</span>,
<span style="color:#e6db74">&#34;Blank Space&#34;</span>,
<span style="color:#e6db74">&#34;Style&#34;</span>,
<span style="color:#e6db74">&#34;Out Of The Woods&#34;</span>,
<span style="color:#e6db74">&#34;All You Had To Do Was Stay&#34;</span>,
<span style="color:#e6db74">&#34;Shake It Off&#34;</span>,
<span style="color:#e6db74">&#34;I Wish You Would&#34;</span>,
<span style="color:#e6db74">&#34;Bad Blood&#34;</span>,
<span style="color:#e6db74">&#34;Wildest Dreams&#34;</span>,
<span style="color:#e6db74">&#34;How You Get The Girl&#34;</span>,
<span style="color:#e6db74">&#34;This Love&#34;</span>,
<span style="color:#e6db74">&#34;I Know Places&#34;</span>,
<span style="color:#e6db74">&#34;Clean&#34;</span>,
<span style="color:#e6db74">&#34;Wonderland&#34;</span>,
<span style="color:#e6db74">&#34;You Are In Love&#34;</span>,
<span style="color:#e6db74">&#34;New Romantics&#34;</span>,
<span style="color:#e6db74">&#34;Ready For It&#34;</span>,
<span style="color:#e6db74">&#34;End Game&#34;</span>,
<span style="color:#e6db74">&#34;I Did Something Bad&#34;</span>,
<span style="color:#e6db74">&#34;Dont Blame Me&#34;</span>,
<span style="color:#e6db74">&#34;Delicate&#34;</span>,
<span style="color:#e6db74">&#34;Look What You Made Me Do&#34;</span>,
<span style="color:#e6db74">&#34;So It Goe&#34;</span>,
<span style="color:#e6db74">&#34;Gorgeous&#34;</span>,
<span style="color:#e6db74">&#34;Getaway Car&#34;</span>,
<span style="color:#e6db74">&#34;King Of My Heart&#34;</span>,
<span style="color:#e6db74">&#34;Dancing With Our Hands Tied&#34;</span>,
<span style="color:#e6db74">&#34;Dress&#34;</span>,
<span style="color:#e6db74">&#34;This Is Why We Cant Have Nice Things&#34;</span>,
<span style="color:#e6db74">&#34;Call It What You Want&#34;</span>,
<span style="color:#e6db74">&#34;New Years Day&#34;</span>,
<span style="color:#e6db74">&#34;I Forgot That You Existed&#34;</span>,
<span style="color:#e6db74">&#34;Cruel Summer&#34;</span>,
<span style="color:#e6db74">&#34;Lover&#34;</span>,
<span style="color:#e6db74">&#34;The Man&#34;</span>,
<span style="color:#e6db74">&#34;The Archer&#34;</span>,
<span style="color:#e6db74">&#34;I Think He Knows&#34;</span>,
<span style="color:#e6db74">&#34;Miss Americana &amp; The Heartbreak Prince&#34;</span>,
<span style="color:#e6db74">&#34;Paper Rings&#34;</span>,
<span style="color:#e6db74">&#34;Cornelia Street&#34;</span>,
<span style="color:#e6db74">&#34;Death By A Thousand Cuts&#34;</span>,
<span style="color:#e6db74">&#34;London Boy&#34;</span>,
<span style="color:#e6db74">&#34;Soon Youll Get Better&#34;</span>,
<span style="color:#e6db74">&#34;False God&#34;</span>,
<span style="color:#e6db74">&#34;You Need To Calm Down&#34;</span>,
<span style="color:#e6db74">&#34;Afterglow&#34;</span>,
<span style="color:#e6db74">&#34;ME&#34;</span>,
<span style="color:#e6db74">&#34;Its Nice To Have A Friend&#34;</span>,
<span style="color:#e6db74">&#34;Daylight&#34;</span>,
<span style="color:#e6db74">&#34;the one&#34;</span>,
<span style="color:#e6db74">&#34;cardigan&#34;</span>,
<span style="color:#e6db74">&#34;the last great american dynasty&#34;</span>,
<span style="color:#e6db74">&#34;exile&#34;</span>,
<span style="color:#e6db74">&#34;my tears ricochet&#34;</span>,
<span style="color:#e6db74">&#34;mirrorball&#34;</span>,
<span style="color:#e6db74">&#34;seven&#34;</span>,
<span style="color:#e6db74">&#34;august&#34;</span>,
<span style="color:#e6db74">&#34;this is me trying&#34;</span>,
<span style="color:#e6db74">&#34;illicit affairs&#34;</span>,
<span style="color:#e6db74">&#34;invisible string&#34;</span>,
<span style="color:#e6db74">&#34;mad woman&#34;</span>,
<span style="color:#e6db74">&#34;epiphany&#34;</span>,
<span style="color:#e6db74">&#34;betty&#34;</span>,
<span style="color:#e6db74">&#34;peace&#34;</span>,
<span style="color:#e6db74">&#34;hoax&#34;</span>,
<span style="color:#e6db74">&#34;the lakes&#34;</span>,
<span style="color:#e6db74">&#34;willow&#34;</span>,
<span style="color:#e6db74">&#34;champagne problems&#34;</span>,
<span style="color:#e6db74">&#34;gold rush&#34;</span>,
<span style="color:#e6db74">&#34;tis the damn season&#34;</span>,
<span style="color:#e6db74">&#34;tolerate it&#34;</span>,
<span style="color:#e6db74">&#34;no body no crime&#34;</span>,
<span style="color:#e6db74">&#34;happiness&#34;</span>,
<span style="color:#e6db74">&#34;dorothea&#34;</span>,
<span style="color:#e6db74">&#34;coney island&#34;</span>,
<span style="color:#e6db74">&#34;ivy&#34;</span>,
<span style="color:#e6db74">&#34;cowboy like me&#34;</span>,
<span style="color:#e6db74">&#34;long story short&#34;</span>,
<span style="color:#e6db74">&#34;marjorie&#34;</span>,
<span style="color:#e6db74">&#34;closure&#34;</span>,
<span style="color:#e6db74">&#34;evermore&#34;</span>,
<span style="color:#e6db74">&#34;right where you left me&#34;</span>,
<span style="color:#e6db74">&#34;its time to go&#34;</span>,
<span style="color:#e6db74">&#34;You All Over Me&#34;</span>,
<span style="color:#e6db74">&#34;Mr Perfectly Fine&#34;</span>,
<span style="color:#e6db74">&#34;We Were Happy&#34;</span>,
<span style="color:#e6db74">&#34;Thats When&#34;</span>,
<span style="color:#e6db74">&#34;Dont You&#34;</span>,
<span style="color:#e6db74">&#34;Bye Bye Baby&#34;</span>,
<span style="color:#e6db74">&#34;Message In A Bottle&#34;</span>,
<span style="color:#e6db74">&#34;I Bet You Think About Me&#34;</span>,
<span style="color:#e6db74">&#34;Forever Winter&#34;</span>,
<span style="color:#e6db74">&#34;Run&#34;</span>,
<span style="color:#e6db74">&#34;The Very First Night&#34;</span>,
<span style="color:#e6db74">&#34;All Too Well&#34;</span>,
<span style="color:#e6db74">&#34;Lavender Haze&#34;</span>,
<span style="color:#e6db74">&#34;Maroon&#34;</span>,
<span style="color:#e6db74">&#34;Anti-Hero&#34;</span>,
<span style="color:#e6db74">&#34;Snow On The Beach&#34;</span>,
<span style="color:#e6db74">&#34;Youre On Your Own Kid&#34;</span>,
<span style="color:#e6db74">&#34;Midnight Rain&#34;</span>,
<span style="color:#e6db74">&#34;Question&#34;</span>,
<span style="color:#e6db74">&#34;Vigilante Shit&#34;</span>,
<span style="color:#e6db74">&#34;Bejeweled&#34;</span>,
<span style="color:#e6db74">&#34;Labyrinth&#34;</span>,
<span style="color:#e6db74">&#34;Karma&#34;</span>,
<span style="color:#e6db74">&#34;Sweet Nothing&#34;</span>,
<span style="color:#e6db74">&#34;Mastermind&#34;</span>,
<span style="color:#e6db74">&#34;Hits Different&#34;</span>,
<span style="color:#e6db74">&#34;Bigger Than The Whole Sky&#34;</span>,
<span style="color:#e6db74">&#34;Paris&#34;</span>,
<span style="color:#e6db74">&#34;High Infidelity&#34;</span>,
<span style="color:#e6db74">&#34;Glitch&#34;</span>,
<span style="color:#e6db74">&#34;Wouldve Couldve Shouldve&#34;</span>,
<span style="color:#e6db74">&#34;Dear Reader&#34;</span>,
<span style="color:#e6db74">&#34;Electric Touch&#34;</span>,
<span style="color:#e6db74">&#34;When Emma Falls in Love&#34;</span>,
<span style="color:#e6db74">&#34;I Can See You&#34;</span>,
<span style="color:#e6db74">&#34;Castles Crumbling&#34;</span>,
<span style="color:#e6db74">&#34;Foolish One&#34;</span>,
<span style="color:#e6db74">&#34;Timeless&#34;</span>,
<span style="color:#e6db74">&#34;Slut&#34;</span>,
<span style="color:#e6db74">&#34;Say Dont Go&#34;</span>,
<span style="color:#e6db74">&#34;Now That We Dont Talk &#34;</span>,
<span style="color:#e6db74">&#34;Suburban Legends&#34;</span>,
<span style="color:#e6db74">&#34;Is It Over Now&#34;</span>,
<span style="color:#e6db74">&#34;Sweeter Than Fiction&#34;</span>,
<span style="color:#e6db74">&#34;Red&#34;</span>,
<span style="color:#e6db74">&#34;Fearless&#34;</span>,
<span style="color:#e6db74">&#34;Midnights&#34;</span>,
<span style="color:#e6db74">&#34;Reputation&#34;</span>,
<span style="color:#e6db74">&#34;Lover&#34;</span>,
<span style="color:#e6db74">&#34;Folklore&#34;</span>,
<span style="color:#e6db74">&#34;Evermore&#34;</span>,
<span style="color:#e6db74">&#34;Red&#34;</span>]

bead_dict <span style="color:#f92672">=</span> {
    <span style="color:#e6db74">&#39;a&#39;</span>: <span style="color:#ae81ff">5</span>,
    <span style="color:#e6db74">&#39;b&#39;</span>: <span style="color:#ae81ff">9</span>,
    <span style="color:#e6db74">&#39;c&#39;</span>: <span style="color:#ae81ff">12</span>,
    <span style="color:#e6db74">&#39;d&#39;</span>: <span style="color:#ae81ff">4</span>,
    <span style="color:#e6db74">&#39;e&#39;</span>: <span style="color:#ae81ff">5</span>,
    <span style="color:#e6db74">&#39;f&#39;</span>: <span style="color:#ae81ff">5</span>,
    <span style="color:#e6db74">&#39;g&#39;</span>: <span style="color:#ae81ff">10</span>,
    <span style="color:#e6db74">&#39;h&#39;</span>: <span style="color:#ae81ff">13</span>,
    <span style="color:#e6db74">&#39;i&#39;</span>: <span style="color:#ae81ff">14</span>,
    <span style="color:#e6db74">&#39;j&#39;</span>: <span style="color:#ae81ff">11</span>,
    <span style="color:#e6db74">&#39;k&#39;</span>: <span style="color:#ae81ff">6</span>,
    <span style="color:#e6db74">&#39;l&#39;</span>: <span style="color:#ae81ff">12</span>,
    <span style="color:#e6db74">&#39;m&#39;</span>: <span style="color:#ae81ff">15</span>,
    <span style="color:#e6db74">&#39;n&#39;</span>: <span style="color:#ae81ff">9</span>,
    <span style="color:#e6db74">&#39;o&#39;</span>:<span style="color:#ae81ff">4</span>,
    <span style="color:#e6db74">&#39;p&#39;</span>: <span style="color:#ae81ff">12</span>,
    <span style="color:#e6db74">&#39;q&#39;</span>: <span style="color:#ae81ff">9</span>,
    <span style="color:#e6db74">&#39;r&#39;</span>: <span style="color:#ae81ff">4</span>,
    <span style="color:#e6db74">&#39;s&#39;</span>: <span style="color:#ae81ff">10</span>,
    <span style="color:#e6db74">&#39;t&#39;</span>: <span style="color:#ae81ff">6</span>,
    <span style="color:#e6db74">&#39;u&#39;</span>: <span style="color:#ae81ff">6</span>,
    <span style="color:#e6db74">&#39;v&#39;</span>: <span style="color:#ae81ff">11</span>,
    <span style="color:#e6db74">&#39;x&#39;</span>: <span style="color:#ae81ff">6</span>,
    <span style="color:#e6db74">&#39;y&#39;</span>: <span style="color:#ae81ff">11</span>,
    <span style="color:#e6db74">&#39;z&#39;</span>: <span style="color:#ae81ff">17</span> }
</code></pre></div><p>With Taylor Swift coming to Melbourne next week, my house has started its prep for the concert. An important part of that preparation is making friendship bracelets to trade at the concert. So we headed down to Spotlight and grabbed ourselves a couple of bags of beads to make the bracelets. However, when we opened them up, we found that the distribution of letters was all over the place. We had a heap of useless Zs while also having almost no vowels. Instead of driving back to Spotlight, I decided to see if I could make enough friendship bracelets from the letters we already had, while also being a bit clever about which songs we were going to make friendship bracelets for.</p>
<figure>
<img src="../../../post/tswift-beads/pic.jpg" alt="The beads after I spent 15 minutes organinsing them" />
<figcaption aria-hidden="true">The beads after I spent 15 minutes organinsing them</figcaption>
</figure>
<h2 id="first-try">First Try</h2>
<p>I set out to make an algorithm to determine the best set of song titles we could use. I want to assign each song title a cost, and then make the song with the lowest cost the bracelets. I can keep doing this until I can&rsquo;t make any more bracelets. To determine the cost of a song title, I just summed the costs of its letters. The cost of the letters was the number of occurrences it had in the list of songs divided by the number of beads I had remaining for that letter.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> collections <span style="color:#f92672">import</span> defaultdict
<span style="color:#f92672">import</span> re

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">count_chars_in_list</span>(list_of_strings):
    char_counts <span style="color:#f92672">=</span> defaultdict(int)
    
    <span style="color:#66d9ef">for</span> string <span style="color:#f92672">in</span> list_of_strings:
        <span style="color:#66d9ef">for</span> char <span style="color:#f92672">in</span> string:
            char_counts[char] <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
    
    <span style="color:#66d9ef">return</span> dict(char_counts)


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">bracelets</span>(song_list, bead_dict):

    <span style="color:#75715e"># W and M is interchangeable</span>
    cleaned_dict <span style="color:#f92672">=</span> {
        re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;\W+&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>, i<span style="color:#f92672">.</span>lower())<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;w&#34;</span>,<span style="color:#e6db74">&#34;m&#34;</span>): i 
        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> song_list
    }

    <span style="color:#75715e"># dict of letter usage totals</span>
    letter_popularity <span style="color:#f92672">=</span> count_chars_in_list(cleaned_dict<span style="color:#f92672">.</span>keys())

    <span style="color:#75715e"># will run until a break is called</span>
    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
        cost_dict <span style="color:#f92672">=</span> {}
        <span style="color:#75715e"># Determine the cost of all the songs</span>
        <span style="color:#66d9ef">for</span> song <span style="color:#f92672">in</span> cleaned_dict<span style="color:#f92672">.</span>keys():
            song_cost <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
            flag <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
            <span style="color:#66d9ef">for</span> char <span style="color:#f92672">in</span> song: 
                <span style="color:#75715e"># Assign the cost by adding up beads value</span>
                <span style="color:#66d9ef">if</span> char <span style="color:#f92672">in</span> bead_dict:
                    <span style="color:#75715e"># If no beads for that letter are left then that word cant be formed</span>
                    <span style="color:#66d9ef">if</span> bead_dict[char] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
                        flag <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
                        <span style="color:#66d9ef">break</span>
                    <span style="color:#66d9ef">else</span>:
                        song_cost <span style="color:#f92672">+=</span> letter_popularity[char]<span style="color:#f92672">/</span>bead_dict[char]
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> flag:
                cost_dict[song] <span style="color:#f92672">=</span> song_cost

        <span style="color:#75715e"># Finish loop if no more songs can be made</span>
        <span style="color:#66d9ef">if</span> len(cost_dict) <span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>:
            <span style="color:#66d9ef">break</span>
        <span style="color:#75715e"># Find the cheapest song</span>
        cost_dict_sorted <span style="color:#f92672">=</span> list(dict(sorted(cost_dict<span style="color:#f92672">.</span>items(), key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> item: item[<span style="color:#ae81ff">1</span>]))<span style="color:#f92672">.</span>keys())
        cheapeast_song <span style="color:#f92672">=</span> cost_dict_sorted[<span style="color:#ae81ff">0</span>]
        print(cleaned_dict[cheapeast_song])
        <span style="color:#75715e"># Remove the cheapest songs beads from the bead counts</span>
        <span style="color:#66d9ef">for</span> char <span style="color:#f92672">in</span> cheapeast_song:
            bead_dict[char] <span style="color:#f92672">-=</span> <span style="color:#ae81ff">1</span>
bracelets(song_list<span style="color:#f92672">.</span>copy(), bead_dict<span style="color:#f92672">.</span>copy())
</code></pre></div><pre><code>ivy
ivy
ivy
ivy
ivy
ivy
ivy
ivy
ivy
Run
Slut
ME
Slut
ivy
ME
Run
hoax
Slut
ME
hoax
Glitch
Run
ivy
ME
hoax
Glitch
hoax
ME
Glitch
Karma
</code></pre>
<p>This was pretty good, but let&rsquo;s remove the repeated songs because I don&rsquo;t want to have 10 bracelets with Ivy on them. We can do this by adding <code>del cleaned_dict[cheapest_song]</code> to the end of the loop.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">bracelets</span>(song_list, bead_dict):
    cleaned_dict <span style="color:#f92672">=</span> {re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;\W+&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>, i<span style="color:#f92672">.</span>lower())<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;w&#34;</span>,<span style="color:#e6db74">&#34;m&#34;</span>): i <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> song_list}
    letter_popularity <span style="color:#f92672">=</span> count_chars_in_list(cleaned_dict<span style="color:#f92672">.</span>keys())

    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
        cost_dict <span style="color:#f92672">=</span> {}
        <span style="color:#66d9ef">for</span> song <span style="color:#f92672">in</span> cleaned_dict<span style="color:#f92672">.</span>keys():
            song_cost <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
            flag <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
            <span style="color:#66d9ef">for</span> char <span style="color:#f92672">in</span> song: 
                <span style="color:#75715e"># Assign the cost by adding up beads value</span>
                <span style="color:#66d9ef">if</span> char <span style="color:#f92672">in</span> bead_dict:
                    <span style="color:#66d9ef">if</span> bead_dict[char] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
                        flag <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
                        <span style="color:#66d9ef">break</span>
                    <span style="color:#66d9ef">else</span>:
                        song_cost <span style="color:#f92672">+=</span> letter_popularity[char]<span style="color:#f92672">/</span>bead_dict[char]
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> flag:
                cost_dict[song] <span style="color:#f92672">=</span> song_cost
        <span style="color:#66d9ef">if</span> len(cost_dict) <span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>:
            <span style="color:#66d9ef">break</span>
        cost_dict_sorted <span style="color:#f92672">=</span> list(dict(sorted(cost_dict<span style="color:#f92672">.</span>items(), key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> item: item[<span style="color:#ae81ff">1</span>]))<span style="color:#f92672">.</span>keys())
        cheapeast_song <span style="color:#f92672">=</span> cost_dict_sorted[<span style="color:#ae81ff">0</span>]
        print(cleaned_dict[cheapeast_song])
        <span style="color:#66d9ef">for</span> char <span style="color:#f92672">in</span> cheapeast_song:
            bead_dict[char] <span style="color:#f92672">-=</span> <span style="color:#ae81ff">1</span>
        <span style="color:#66d9ef">del</span> cleaned_dict[cheapeast_song]


bracelets(song_list<span style="color:#f92672">.</span>copy(), bead_dict<span style="color:#f92672">.</span>copy())
</code></pre></div><pre><code>ivy
Run
Slut
ME
Glitch
hoax
Mine
willow
Paris
august
Midnights
Red
Mean
Ours
Daylight
Invisible
London Boy
</code></pre>
<h2 id="getting-picky">Getting Picky</h2>
<p>I presented this list to my housemates only to get the response, &lsquo;I hate ME!&rsquo; So, I did some cleaning to remove some of the so-called &lsquo;banned songs&rsquo;. It also turns out that I&rsquo;m not allowed to listen to &ldquo;London Boy&rdquo; anymore since the guy it is about is canceled or something? Not sure, but now we have a new list that doesn&rsquo;t include the songs we don&rsquo;t want.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">bannded_songs <span style="color:#f92672">=</span> [
<span style="color:#e6db74">&#34;Invisible&#34;</span>,
<span style="color:#e6db74">&#34;London Boy&#34;</span>,
<span style="color:#e6db74">&#34;ME&#34;</span>,
<span style="color:#e6db74">&#39;hoax&#39;</span>,
<span style="color:#e6db74">&#39;run&#39;</span>
]

bracelets([song <span style="color:#66d9ef">for</span> song <span style="color:#f92672">in</span> song_list <span style="color:#66d9ef">if</span> song <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> bannded_songs], bead_dict<span style="color:#f92672">.</span>copy())
</code></pre></div><pre><code>ivy
Run
Slut
Glitch
willow
Mine
Paris
august
Mean
Ours
Midnights
Clean
Style
gold rush
Daylight
Long Live
</code></pre>
<h2 id="a-final-go">A Final Go</h2>
<p>I tried showing this list, which received a better reception, but there were still a couple of non-negotiable songs that needed to be included. We also decided that the Qs and the Os look close enough to be interchangeable, so I changed the way we generate the cleaned dict to reflect that.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">bracelets</span>(song_list, bead_dict):
    cleaned_dict <span style="color:#f92672">=</span> {re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;\W+&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>, i<span style="color:#f92672">.</span>lower())<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;w&#34;</span>,<span style="color:#e6db74">&#34;m&#34;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;q&#34;</span>,<span style="color:#e6db74">&#39;o&#39;</span>): i <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> song_list}
    letter_popularity <span style="color:#f92672">=</span> count_chars_in_list(cleaned_dict<span style="color:#f92672">.</span>keys())

    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
        cost_dict <span style="color:#f92672">=</span> {}
        <span style="color:#66d9ef">for</span> song <span style="color:#f92672">in</span> cleaned_dict<span style="color:#f92672">.</span>keys():
            song_cost <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
            flag <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
            <span style="color:#66d9ef">for</span> char <span style="color:#f92672">in</span> song: 
                <span style="color:#75715e"># Assign the cost by adding up beads value</span>
                <span style="color:#66d9ef">if</span> char <span style="color:#f92672">in</span> bead_dict:
                    <span style="color:#66d9ef">if</span> bead_dict[char] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
                        flag <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
                        <span style="color:#66d9ef">break</span>
                    <span style="color:#66d9ef">else</span>:
                        song_cost <span style="color:#f92672">+=</span> letter_popularity[char]<span style="color:#f92672">/</span>bead_dict[char]
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> flag:
                cost_dict[song] <span style="color:#f92672">=</span> song_cost
        <span style="color:#66d9ef">if</span> len(cost_dict) <span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>:
            <span style="color:#66d9ef">break</span>
        cost_dict_sorted <span style="color:#f92672">=</span> list(dict(sorted(cost_dict<span style="color:#f92672">.</span>items(), key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> item: item[<span style="color:#ae81ff">1</span>]))<span style="color:#f92672">.</span>keys())
        cheapeast_song <span style="color:#f92672">=</span> cost_dict_sorted[<span style="color:#ae81ff">0</span>]
        print(cleaned_dict[cheapeast_song])
        <span style="color:#66d9ef">for</span> char <span style="color:#f92672">in</span> cheapeast_song:
            bead_dict[char] <span style="color:#f92672">-=</span> <span style="color:#ae81ff">1</span>
        <span style="color:#66d9ef">del</span> cleaned_dict[cheapeast_song]
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Move all the Q beads to O</span>
bead_dict[<span style="color:#e6db74">&#39;o&#39;</span>] <span style="color:#f92672">+=</span> bead_dict[<span style="color:#e6db74">&#39;q&#39;</span>]
<span style="color:#66d9ef">del</span> bead_dict[<span style="color:#e6db74">&#39;q&#39;</span>]

required_songs <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Delicate&#39;</span>, <span style="color:#e6db74">&#39;Lover&#39;</span>]
    
<span style="color:#66d9ef">for</span> song <span style="color:#f92672">in</span> required_songs:
    print(song)
    <span style="color:#66d9ef">for</span> char <span style="color:#f92672">in</span> re<span style="color:#f92672">.</span>sub(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;\W+&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>, song<span style="color:#f92672">.</span>lower())<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;w&#34;</span>,<span style="color:#e6db74">&#34;m&#34;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;q&#34;</span>,<span style="color:#e6db74">&#39;o&#39;</span>):
        bead_dict[char] <span style="color:#f92672">-=</span> <span style="color:#ae81ff">1</span>

bracelets([song <span style="color:#66d9ef">for</span> song <span style="color:#f92672">in</span> song_list <span style="color:#66d9ef">if</span> song <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> bannded_songs <span style="color:#f92672">and</span> song <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> required_songs], bead_dict<span style="color:#f92672">.</span>copy())
</code></pre></div><pre><code>Delicate
Lover
ivy
willow
Run
Slut
Glitch
Ours
Bad Blood
august
Mine
Paris
Midnights
Long Live
Last Kiss
</code></pre>
<p>And there&rsquo;s a final list of 14 bracelets we can make with our current beads. Would it have been faster to drive back to Spotlight to buy more beads? Probably, but this was more fun.</p>
]]></content>
        </item>
        
        <item>
            <title>Optimising the settings for the ODE solver</title>
            <link>/1/01/01/optimising-the-settings-for-the-ode-solver/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            
            <guid>/1/01/01/optimising-the-settings-for-the-ode-solver/</guid>
            <description>import numpy as np import math import matplotlib.pyplot as plt import numpy as np import mplcatppuccin import matplotlib as mpl import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D mpl.style.use(&amp;#34;macchiato&amp;#34;) def expanded_euler(dims, h): step_matrix = np.zeros((dims, dims)) for i in range(dims): for j in range(i, dims): # Is 1, and h at j-i =0, 1 respectively step_matrix[i, j] = h ** (j - i) / math.factorial(j - i) expanded_matrix = add_x_and_1(step_matrix, h) return expanded_matrix def add_x_and_1(original_matrix, h): new_size = len(original_matrix) + 2 new_matrix = np.</description>
            <content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
<span style="color:#f92672">import</span> math
<span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
<span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
<span style="color:#f92672">import</span> mplcatppuccin
<span style="color:#f92672">import</span> matplotlib <span style="color:#66d9ef">as</span> mpl
<span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#66d9ef">as</span> plt
<span style="color:#f92672">from</span> mpl_toolkits.mplot3d <span style="color:#f92672">import</span> Axes3D
mpl<span style="color:#f92672">.</span>style<span style="color:#f92672">.</span>use(<span style="color:#e6db74">&#34;macchiato&#34;</span>)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">expanded_euler</span>(dims, h):
    step_matrix <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>zeros((dims, dims))
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(dims):
        <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(i, dims):
            <span style="color:#75715e"># Is 1, and h at j-i =0, 1 respectively</span>
            step_matrix[i, j] <span style="color:#f92672">=</span> h <span style="color:#f92672">**</span> (j <span style="color:#f92672">-</span> i) <span style="color:#f92672">/</span> math<span style="color:#f92672">.</span>factorial(j <span style="color:#f92672">-</span> i)
    expanded_matrix <span style="color:#f92672">=</span> add_x_and_1(step_matrix, h)
    <span style="color:#66d9ef">return</span> expanded_matrix


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">add_x_and_1</span>(original_matrix, h):
    new_size <span style="color:#f92672">=</span> len(original_matrix) <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>
    new_matrix <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>zeros((new_size, new_size), dtype<span style="color:#f92672">=</span>original_matrix<span style="color:#f92672">.</span>dtype)
    <span style="color:#75715e"># Set the 2x2 top left matrix</span>
    new_matrix[<span style="color:#ae81ff">0</span>:<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">0</span>:<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> [[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>], [h, <span style="color:#ae81ff">1</span>]]
    <span style="color:#75715e"># Copy the original matrix to the bottom right of the new matrix.</span>
    new_matrix[<span style="color:#ae81ff">2</span>:, <span style="color:#ae81ff">2</span>:] <span style="color:#f92672">=</span> original_matrix
    <span style="color:#66d9ef">return</span> new_matrix



<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Solution</span>:
    <span style="color:#66d9ef">def</span> __init__(self, input_list: list):
        solution_list <span style="color:#f92672">=</span> sorted(input_list, key<span style="color:#f92672">=</span><span style="color:#66d9ef">lambda</span> x: x[<span style="color:#ae81ff">1</span>])
        dims <span style="color:#f92672">=</span> len(solution_list[<span style="color:#ae81ff">0</span>]) <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>
        self<span style="color:#f92672">.</span>x <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array([x[<span style="color:#ae81ff">1</span>] <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> input_list])
        value_lists <span style="color:#f92672">=</span> [[] <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(dims)]
        <span style="color:#66d9ef">for</span> v <span style="color:#f92672">in</span> input_list:
            <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(dims):
                value_lists[i]<span style="color:#f92672">.</span>append(v[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>])
        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(dims):
            self<span style="color:#f92672">.</span>__dict__[<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;y_</span><span style="color:#e6db74">{</span>i<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>] <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array(value_lists[i])
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">interpolate</span>(self, x, y_n):
        <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">        allows you to get any value from the solution by interpolating the points
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
        y_values <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>__dict__[<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;y_</span><span style="color:#e6db74">{</span>y_n<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>]
        x_max_index <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>where(self<span style="color:#f92672">.</span>x <span style="color:#f92672">&gt;=</span> x)[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>]
        x_min_index <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>where(self<span style="color:#f92672">.</span>x <span style="color:#f92672">&lt;=</span> x)[<span style="color:#ae81ff">0</span>][<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
        x_at_x_max <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>x[x_max_index]
        x_at_x_min <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>x[x_min_index]
        y_at_x_max <span style="color:#f92672">=</span> y_values[x_max_index]
        y_at_x_min <span style="color:#f92672">=</span> y_values[x_min_index]
        slope <span style="color:#f92672">=</span> (y_at_x_max <span style="color:#f92672">-</span> y_at_x_min) <span style="color:#f92672">/</span> (x_at_x_max <span style="color:#f92672">-</span> x_at_x_min)
        value <span style="color:#f92672">=</span> y_at_x_min <span style="color:#f92672">+</span> slope <span style="color:#f92672">*</span> (x <span style="color:#f92672">-</span> x_at_x_min)
        <span style="color:#66d9ef">return</span> value

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">linear</span>(y, step_matrix_generator, transformation_matrix, steps<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, h<span style="color:#f92672">=</span><span style="color:#ae81ff">0.1</span>):
    dims <span style="color:#f92672">=</span> len(y) <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>
    step_matrix <span style="color:#f92672">=</span> transformation_matrix <span style="color:#f92672">@</span> step_matrix_generator(dims, h)
    output_list <span style="color:#f92672">=</span> []
    y_n <span style="color:#f92672">=</span> y<span style="color:#f92672">.</span>copy()
    i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">while</span> i <span style="color:#f92672">&lt;</span> steps:
        y_n <span style="color:#f92672">=</span> step_matrix <span style="color:#f92672">@</span> y_n
        output_list<span style="color:#f92672">.</span>append(y_n)
        i <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">return</span> Solution(output_list)
</code></pre></div><p>In the <a href="../../../2024/01/12/making-my-ode-solver-solve-odes/">last post</a> in this series, I introduced my method for approximating ODEs. But after re-rereading it, I found myself questioning the step where I convert the ODE into a matrix.</p>
<p>This is best exemplified by the ODE <img src="y%27%27%20%3D%20x%20%2B%20y" alt="y\'\' = x + y" title="y'' = x + y"> which goes through the point <img src="y%280%29%20%3D%201" alt="y(0) = 1" title="y(0) = 1"> and <img src="y%27%28x%29%20%3D%201" alt="y\'(x) = 1" title="y'(x) = 1">. Converting it into a matrix, we would define <img src="T" alt="" title="T"> as:</p>
<p><img src="T_1%20%3D%20%5Cbegin%7Bbmatrix%7D%0A1%20%26%200%20%26%200%20%26%200%20%26%200%5C%5C%0A0%20%26%201%20%26%200%20%26%200%20%26%200%5C%5C%0A0%20%26%200%20%26%201%20%26%200%20%26%200%5C%5C%0A0%20%26%200%20%26%200%20%26%201%20%26%200%5C%5C%0A0%20%26%201%20%26%201%20%26%200%20%26%200%5C%5C%0A%5Cend%7Bbmatrix%7D" alt="T_1 = \begin{bmatrix}1 & 0 & 0 & 0 & 0\\0 & 1 & 0 & 0 & 0\\0 & 0 & 1 & 0 & 0\\0 & 0 & 0 & 1 & 0\\0 & 1 & 1 & 0 & 0\\\end{bmatrix}" title="T_1 = \begin{bmatrix}
1 &amp; 0 &amp; 0 &amp; 0 &amp; 0\
0 &amp; 1 &amp; 0 &amp; 0 &amp; 0\
0 &amp; 0 &amp; 1 &amp; 0 &amp; 0\
0 &amp; 0 &amp; 0 &amp; 1 &amp; 0\
0 &amp; 1 &amp; 1 &amp; 0 &amp; 0\
\end{bmatrix}"></p>
<p>However, rearranging this ODE into <img src="x%20%3D%20y%27%27%20-%20y" alt="x = y\'\' - y" title="x = y'' - y"> or <img src="y%20%3D%20y%27%27%20-%20x" alt="y = y\'\' - x" title="y = y'' - x">, it would be just as reasonable to define T as:</p>
<p><img src="T_2%20%3D%20%5Cbegin%7Bbmatrix%7D%0A1%20%26%200%20%26%200%20%26%200%20%26%200%5C%5C%0A0%20%26%200%20%26%20-1%20%26%200%20%26%201%5C%5C%0A0%20%26%200%20%26%201%20%26%200%20%26%200%5C%5C%0A0%20%26%200%20%26%200%20%26%201%20%26%200%5C%5C%0A0%20%26%200%20%26%200%20%26%200%20%26%201%5C%5C%0A%5Cend%7Bbmatrix%7D" alt="T_2 = \begin{bmatrix}1 & 0 & 0 & 0 & 0\\0 & 0 & -1 & 0 & 1\\0 & 0 & 1 & 0 & 0\\0 & 0 & 0 & 1 & 0\\0 & 0 & 0 & 0 & 1\\\end{bmatrix}" title="T_2 = \begin{bmatrix}
1 &amp; 0 &amp; 0 &amp; 0 &amp; 0\
0 &amp; 0 &amp; -1 &amp; 0 &amp; 1\
0 &amp; 0 &amp; 1 &amp; 0 &amp; 0\
0 &amp; 0 &amp; 0 &amp; 1 &amp; 0\
0 &amp; 0 &amp; 0 &amp; 0 &amp; 1\
\end{bmatrix}"></p>
<p><img src="T_3%20%3D%20%5Cbegin%7Bbmatrix%7D%0A1%20%26%200%20%26%200%20%26%200%20%26%200%5C%5C%0A0%20%26%201%20%26%200%20%26%200%20%26%200%5C%5C%0A0%20%26%20-1%20%26%200%20%26%200%20%26%201%5C%5C%0A0%20%26%200%20%26%200%20%26%201%20%26%200%5C%5C%0A0%20%26%200%20%26%200%20%26%200%20%26%201%5C%5C%0A%5Cend%7Bbmatrix%7D" alt="T_3 = \begin{bmatrix}1 & 0 & 0 & 0 & 0\\0 & 1 & 0 & 0 & 0\\0 & -1 & 0 & 0 & 1\\0 & 0 & 0 & 1 & 0\\0 & 0 & 0 & 0 & 1\\\end{bmatrix}" title="T_3 = \begin{bmatrix}
1 &amp; 0 &amp; 0 &amp; 0 &amp; 0\
0 &amp; 1 &amp; 0 &amp; 0 &amp; 0\
0 &amp; -1 &amp; 0 &amp; 0 &amp; 1\
0 &amp; 0 &amp; 0 &amp; 1 &amp; 0\
0 &amp; 0 &amp; 0 &amp; 0 &amp; 1\
\end{bmatrix}"></p>
<p>So does this matter? Since they are all equaly valid ways of representing the ODE, surley they will all lead to the same conclusion. However Using each of these matrices the ODE we get very different solutions. <img src="T1" alt="" title="T1"> is the closet, <img src="T3" alt="" title="T3"> and <img src="T2" alt="" title="T2"> are both equally far off.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">init_y <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>] <span style="color:#75715e">#[1,x,y,y&#39;]</span>
T1 <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array([
    [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>],
    [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>],
    [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>],
    [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>],
    [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>]
])

T2 <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array([
    [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>],
    [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>],
    [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>],
    [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>],
    [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>]
])

T3 <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>array([
    [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>],
    [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>],
    [<span style="color:#ae81ff">0</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>],
    [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>],
    [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>]
])
steps <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>

solution1 <span style="color:#f92672">=</span> linear(
    init_y,
    expanded_euler,
    T1,
    steps<span style="color:#f92672">=</span>steps, h<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span><span style="color:#f92672">/</span>steps)
    
solution2 <span style="color:#f92672">=</span> linear(
    init_y,
    expanded_euler,
    T2,
    steps<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>steps, h<span style="color:#f92672">=-</span><span style="color:#ae81ff">1</span><span style="color:#f92672">/</span>steps)
solution3 <span style="color:#f92672">=</span> linear(
    init_y,
    expanded_euler,
    T3,
    steps<span style="color:#f92672">=</span>steps, h<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span><span style="color:#f92672">/</span>steps)


plt<span style="color:#f92672">.</span>plot(solution1<span style="color:#f92672">.</span>x, solution1<span style="color:#f92672">.</span>y_0, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;T1 Aproximated Solution&#39;</span>)
plt<span style="color:#f92672">.</span>plot(solution2<span style="color:#f92672">.</span>x, solution2<span style="color:#f92672">.</span>y_0, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;T2 Aproximated Solution&#39;</span>)
plt<span style="color:#f92672">.</span>plot(solution3<span style="color:#f92672">.</span>x, solution3<span style="color:#f92672">.</span>y_0, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;T3 Aproximated Solution&#39;</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>)
plt<span style="color:#f92672">.</span>plot(solution1<span style="color:#f92672">.</span>x, <span style="color:#f92672">-</span>solution1<span style="color:#f92672">.</span>x <span style="color:#f92672">-</span><span style="color:#ae81ff">0.5</span><span style="color:#f92672">*</span>np<span style="color:#f92672">.</span>e<span style="color:#f92672">**</span>(<span style="color:#f92672">-</span>solution1<span style="color:#f92672">.</span>x) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1.5</span><span style="color:#f92672">*</span>np<span style="color:#f92672">.</span>e<span style="color:#f92672">**</span>solution1<span style="color:#f92672">.</span>x, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;True Solution&#39;</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;--&#39;</span>)
plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;x&#39;</span>) <span style="color:#75715e"># Label for the x-axis</span>
plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;y&#39;</span>) <span style="color:#75715e"># Label for the y-axis</span>
plt<span style="color:#f92672">.</span>grid(<span style="color:#66d9ef">True</span>) <span style="color:#75715e"># Show a grid for better readability</span>
plt<span style="color:#f92672">.</span>legend()
plt<span style="color:#f92672">.</span>show()
</code></pre></div><img src="post-4_files/figure-markdown_strict/cell-3-output-1.png" width="663" height="430" />
<h2 id="truncation-error">Truncation Error</h2>
<p>Truncation error is the error that is introduced by approximating a infinite series, such as the Taylor series we use, with a finite number of terms. I&rsquo;m suspecting in this case, that <img src="T_1" alt="" title="T_1"> introduces the least amount of truncation error at each step and this is why it is the best aproximation of the ODE.</p>
<p>We can define our truncation error (<img src="R" alt="" title="R">) as the difference be the true value (<img src="Y%5E%2A" alt="Y^\*" title="Y^*">) and the predicted value (<img src="Y" alt="" title="Y">). In our aproximation, this is defined as:</p>
<p><img src="R%20%3D%20Y%5E%2A%28x%2Bh%29%20-%20Y%28x%2Bh%29%20%3D%20Y%5E%2A%28x%2Bh%29%20-%20T%20%5Ccdot%20S%20%5Ccdot%20Y%28x%29" alt="R = Y^\*(x+h) - Y(x+h) = Y^\*(x+h) - T \cdot S \cdot Y(x)" title="R = Y^*(x+h) - Y(x+h) = Y^*(x+h) - T \cdot S \cdot Y(x)"></p>
<p>Where <img src="S" alt="" title="S"> is the stepping matrix and <img src="T" alt="" title="T"> is the transformation matrix.</p>
<p>Since our approximation is based on the Taylor series, the truncation error is the remaining terms in the series that aren&rsquo;t used. When <img src="k" alt="" title="k"> terms of the taylor series are used, the truncation error (<img src="r" alt="" title="r">) is :</p>
<p><img src="r%20%3D%20%5Csum_%7Bn%20%3D%20k%2B2%7D%5E%7B%5Cinfty%7D%20%20%5Cfrac%7B%5Cmathbb%20y%5E%7Bn%7D%28x%29%7D%7Bn%21%7D%5Ccdot%28h%29%5En" alt="r = \sum\_{n = k+2}^{\infty}  \frac{\mathbb y^{n}(x)}{n!}\cdot(h)^n" title="r = \sum_{n = k+2}^{\infty}  \frac{\mathbb y^{n}(x)}{n!}\cdot(h)^n"></p>
<p>Since <img src="y%5E%7Bn%7D" alt="y^{n}" title="y^{n}"> be pulled out as a constant for a given step, the limit of the magnitude of this error can be defined using big-O notation, such that when <img src="k" alt="" title="k"> terms are used, <img src="r" alt="" title="r"> is <img src="O%28h%5E%7Bk%2B3%7D%29" alt="O(h^{k+3})" title="O(h^{k+3})">.</p>
<p>Looking at just the stepping matrix, we can see the truncation error is:</p>
<p><img src="S%20%3D%20%5Cbegin%7Bbmatrix%7D%0A1%20%26%200%20%26%200%20%26%200%20%26%200%5C%5C%0A1%20%26%201%20%26%200%20%26%200%20%26%200%5C%5C%0A0%20%26%200%20%26%201%20%26%20h%20%26%20%5Cfrac%7Bh%5E2%7D%7B2%7D%5C%5C%0A0%20%26%200%20%26%200%20%26%201%20%26%20h%5C%5C%0A0%20%26%200%20%26%200%20%26%200%20%26%201%5C%5C%0A%5Cend%7Bbmatrix%7D%20%5Crightarrow%20R%20%3D%20%20%5Cbegin%7Bbmatrix%7D%0A0%5C%5C%0A0%5C%5C%0AO%28h%5E3%29%5C%5C%0AO%28h%5E2%29%5C%5C%0AO%28h%29%5C%5C%0A%5Cend%7Bbmatrix%7D" alt="S = \begin{bmatrix}1 & 0 & 0 & 0 & 0\\1 & 1 & 0 & 0 & 0\\0 & 0 & 1 & h & \frac{h^2}{2}\\0 & 0 & 0 & 1 & h\\0 & 0 & 0 & 0 & 1\\\end{bmatrix} \rightarrow R =  \begin{bmatrix}0\\0\\O(h^3)\\O(h^2)\\O(h)\\\end{bmatrix}" title="S = \begin{bmatrix}
1 &amp; 0 &amp; 0 &amp; 0 &amp; 0\
1 &amp; 1 &amp; 0 &amp; 0 &amp; 0\
0 &amp; 0 &amp; 1 &amp; h &amp; \frac{h^2}{2}\
0 &amp; 0 &amp; 0 &amp; 1 &amp; h\
0 &amp; 0 &amp; 0 &amp; 0 &amp; 1\
\end{bmatrix} \rightarrow R =  \begin{bmatrix}
0\
0\
O(h^3)\
O(h^2)\
O(h)\
\end{bmatrix}"></p>
<p>Taking it back to the above example of <img src="y%27%27%20%3D%20x%20%2B%20y" alt="y\'\' = x + y" title="y'' = x + y">, and the three transformation matrices it defines, we can apply the transformation matrices to the vector <img src="R" alt="" title="R"> of the standard stepping matrix to get the truncation error for each of the approximations.</p>
<p><img src="T_1%20%5Ccdot%20R%20%20%3D%20%5Cbegin%7Bbmatrix%7D%0A0%5C%5C%0A0%5C%5C%0AO%28h%5E3%29%5C%5C%0AO%28h%5E2%29%5C%5C%0AO%28h%5E3%29%5C%5C%0A%5Cend%7Bbmatrix%7D" alt="T_1 \cdot R  = \begin{bmatrix}0\\0\\O(h^3)\\O(h^2)\\O(h^3)\\\end{bmatrix}" title="T_1 \cdot R  = \begin{bmatrix}
0\
0\
O(h^3)\
O(h^2)\
O(h^3)\
\end{bmatrix}"></p>
<p><img src="T_2%20%5Ccdot%20R%20%3D%20%5Cbegin%7Bbmatrix%7D%0A0%5C%5C%0AO%28h%29%5C%5C%0AO%28h%5E3%29%5C%5C%0AO%28h%5E2%29%5C%5C%0AO%28h%29%5C%5C%0A%5Cend%7Bbmatrix%7D" alt="T_2 \cdot R = \begin{bmatrix}0\\O(h)\\O(h^3)\\O(h^2)\\O(h)\\\end{bmatrix}" title="T_2 \cdot R = \begin{bmatrix}
0\
O(h)\
O(h^3)\
O(h^2)\
O(h)\
\end{bmatrix}"></p>
<p><img src="T_3%20%5Ccdot%20R%20%20%3D%20%5Cbegin%7Bbmatrix%7D%0A0%5C%5C%0A0%5C%5C%0AO%28h%29%5C%5C%0AO%28h%5E2%29%5C%5C%0AO%28h%29%5C%5C%0A%5Cend%7Bbmatrix%7D" alt="T_3 \cdot R  = \begin{bmatrix}0\\0\\O(h)\\O(h^2)\\O(h)\\\end{bmatrix}" title="T_3 \cdot R  = \begin{bmatrix}
0\
0\
O(h)\
O(h^2)\
O(h)\
\end{bmatrix}"></p>
<p>Now looking at the magnitude of these vectors:</p>
<p><img src="%7CT_1%20%5Ccdot%20R%20%7C%20%3D%20%5Csqrt%7B%28O%28h%5E3%29%29%5E2%20%2B%20%28O%28h%5E2%29%29%5E2%20%2B%20%28O%28h%5E3%29%29%5E2%7D%20%3D%20O%28h%5E2%29" alt="\|T_1 \cdot R \| = \sqrt{(O(h^3))^2 + (O(h^2))^2 + (O(h^3))^2} = O(h^2)" title="|T_1 \cdot R | = \sqrt{(O(h^3))^2 + (O(h^2))^2 + (O(h^3))^2} = O(h^2)"></p>
<p><img src="%7CT_2%20%5Ccdot%20R%20%7C%20%3D%20%5Csqrt%7B%28O%28h%29%29%5E2%20%2B%20%28O%28h%5E3%29%29%5E2%20%2B%20%28O%28h%5E2%29%29%5E2%20%2B%20%28O%28h%29%29%5E2%7D%20%20%3D%20O%28h%29" alt="\|T_2 \cdot R \| = \sqrt{(O(h))^2 + (O(h^3))^2 + (O(h^2))^2 + (O(h))^2}  = O(h)" title="|T_2 \cdot R | = \sqrt{(O(h))^2 + (O(h^3))^2 + (O(h^2))^2 + (O(h))^2}  = O(h)"></p>
<p><img src="%7CT_3%20%5Ccdot%20R%20%7C%20%3D%20%5Csqrt%7B%28O%28h%29%29%5E2%20%2B%20%28O%28h%5E2%29%29%5E2%20%2B%20%28O%28h%29%29%5E2%7D%20%24%20%3D%20O%28h%29" alt="\|T_3 \cdot R \| = \sqrt{(O(h))^2 + (O(h^2))^2 + (O(h))^2} \$ = O(h)" title="|T_3 \cdot R | = \sqrt{(O(h))^2 + (O(h^2))^2 + (O(h))^2} $ = O(h)"></p>
<p>This shows that <img src="%7CT_1%20%5Ccdot%20R%20%7C" alt="\|T_1 \cdot R \|" title="|T_1 \cdot R |"> shrinks as <img src="h" alt="" title="h"> gets smaller faster than when you use <img src="T_2" alt="" title="T_2"> or <img src="T_3" alt="" title="T_3">.
More generally, you can say that <img src="T_1" alt="" title="T_1"> will lead to the least error.</p>
<p>Now these are the errors for each step, so now looking at the truncation error for the whole approximation, we can multiply the error by the number of steps.</p>
<p>Say we want to find the value for for the curve at <img src="x%3D1" alt="x=1" title="x=1">, we would need to take <img src="1%2Fh" alt="1/h" title="1/h"> steps to find this value.</p>
<p><img src="%7CT_1%20%5Ccdot%20R%20%7C%20%5Ccdot%20%5Cfrac%7B1%7D%7Bh%7D%20%3D%20O%28h%29" alt="\|T_1 \cdot R \| \cdot \frac{1}{h} = O(h)" title="|T_1 \cdot R | \cdot \frac{1}{h} = O(h)"></p>
<p><img src="%7CT_2%20%5Ccdot%20R%20%7C%20%5Ccdot%20%5Cfrac%7B1%7D%7Bh%7D%20%3D%20O%281%29" alt="\|T_2 \cdot R \| \cdot \frac{1}{h} = O(1)" title="|T_2 \cdot R | \cdot \frac{1}{h} = O(1)"></p>
<p><img src="%7CT_3%20%5Ccdot%20R%20%7C%20%5Ccdot%20%5Cfrac%7B1%7D%7Bh%7D%20%3D%20O%281%29" alt="\|T_3 \cdot R \| \cdot \frac{1}{h} = O(1)" title="|T_3 \cdot R | \cdot \frac{1}{h} = O(1)"></p>
<p>We can now test this by running some approximations with various values of h and the different matrices, the results for which are below. We can see that the <img src="T_1" alt="" title="T_1"> result follows the <img src="O%28h%29" alt="O(h)" title="O(h)"> curve while the <img src="T_2" alt="" title="T_2"> and <img src="T_3" alt="" title="T_3"> result follows the <img src="O%281%29" alt="O(1)" title="O(1)"> curve.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">h_list <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span><span style="color:#f92672">/</span><span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">1</span><span style="color:#f92672">/</span><span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">1</span><span style="color:#f92672">/</span><span style="color:#ae81ff">50</span>, <span style="color:#ae81ff">1</span><span style="color:#f92672">/</span><span style="color:#ae81ff">100</span>, <span style="color:#ae81ff">1</span><span style="color:#f92672">/</span><span style="color:#ae81ff">500</span>]
t1_list <span style="color:#f92672">=</span> [] 
t3_list <span style="color:#f92672">=</span> []
<span style="color:#66d9ef">for</span> h <span style="color:#f92672">in</span> h_list:
    t1_list<span style="color:#f92672">.</span>append( linear(
        init_y,
        expanded_euler,
        T1,
        steps<span style="color:#f92672">=</span>int(<span style="color:#ae81ff">1</span><span style="color:#f92672">/</span>h), h<span style="color:#f92672">=</span>h)<span style="color:#f92672">.</span>__dict__[<span style="color:#e6db74">&#39;y_0&#39;</span>][<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> (<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">0.5</span><span style="color:#f92672">*</span>np<span style="color:#f92672">.</span>e<span style="color:#f92672">**</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1.5</span><span style="color:#f92672">*</span>np<span style="color:#f92672">.</span>e<span style="color:#f92672">**</span><span style="color:#ae81ff">1</span>))
        
    t3_list<span style="color:#f92672">.</span>append( linear(
        init_y,
        expanded_euler,
        T3,
        steps<span style="color:#f92672">=</span>int(<span style="color:#ae81ff">1</span><span style="color:#f92672">/</span>h), h<span style="color:#f92672">=</span>h)<span style="color:#f92672">.</span>__dict__[<span style="color:#e6db74">&#39;y_0&#39;</span>][<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">-</span> (<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">0.5</span><span style="color:#f92672">*</span>np<span style="color:#f92672">.</span>e<span style="color:#f92672">**</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1.5</span><span style="color:#f92672">*</span>np<span style="color:#f92672">.</span>e<span style="color:#f92672">**</span><span style="color:#ae81ff">1</span>))

plt<span style="color:#f92672">.</span>figure()
plt<span style="color:#f92672">.</span>loglog(h_list, np<span style="color:#f92672">.</span>abs(t1_list), marker<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;o&#39;</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;-&#39;</span>,label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;T1 absolute error&#39;</span>)
plt<span style="color:#f92672">.</span>loglog(h_list, np<span style="color:#f92672">.</span>abs(t3_list), marker<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;o&#39;</span>, linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;-&#39;</span>, label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;T2 and T3 absolute error&#39;</span>)
plt<span style="color:#f92672">.</span>loglog(h_list, [<span style="color:#ae81ff">1</span> <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> h_list], linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;dashed&#39;</span>,label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;O(1) error&#39;</span>)
plt<span style="color:#f92672">.</span>loglog(h_list, [ h <span style="color:#66d9ef">for</span> h <span style="color:#f92672">in</span> h_list], linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;dashed&#39;</span>,label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;O(h) error&#39;</span>)
plt<span style="color:#f92672">.</span>loglog(h_list, [h<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span> <span style="color:#66d9ef">for</span> h <span style="color:#f92672">in</span> h_list], linestyle<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;dashed&#39;</span>,label<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;O(h^2) error&#39;</span>)
plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Step size&#39;</span>)
plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Absolute Error&#39;</span>)
plt<span style="color:#f92672">.</span>legend()
plt<span style="color:#f92672">.</span>grid(<span style="color:#66d9ef">True</span>)
plt<span style="color:#f92672">.</span>show()
</code></pre></div><img src="post-4_files/figure-markdown_strict/cell-4-output-1.png" width="673" height="431" />
<p>So now trying to generalise this beyond the example we&rsquo;ve worked through, the reduction in error using the <img src="T_1" alt="" title="T_1"> matrix was caused by redefining the term with the most truncation error, <img src="y%27%27" alt="y\'\'" title="y''"> with terms with less truncation error, <img src="y" alt="" title="y"> and <img src="x" alt="" title="x">. Both <img src="T_2" alt="" title="T_2"> and <img src="T_3" alt="" title="T_3"> failed to do this.</p>
<p>So in general, to minimise error we should try to define the highest derivative in terms of the lower terms, as this will remove the <img src="O%28h%29" alt="O(h)" title="O(h)"> error from the truncation vector.</p>
]]></content>
        </item>
        
    </channel>
</rss>
