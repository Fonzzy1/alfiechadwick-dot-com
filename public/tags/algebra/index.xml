<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algebra on Alfie Chadwick</title>
    <link>/tags/algebra/</link>
    <description>Recent content in Algebra on Alfie Chadwick</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="/tags/algebra/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Making my ODE solver solve ODEs</title>
      <link>/2024/01/12/making-my-ode-solver-solve-odes/</link>
      <pubDate>Fri, 12 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>/2024/01/12/making-my-ode-solver-solve-odes/</guid>
      <description>After writing out the last post where I wrote out a python library for using an improved version of Euler&amp;rsquo;s method to solve ODEs. But so far, we haven&amp;rsquo;t been solving ODES, instead we have just been taking an initial value and iterating it over the length of a domain. To To make the ODE estimator work, we need to ensure that the conditions of the ODE are met at each step.</description>
    </item>
    
    <item>
      <title>Making a Python Library to solve differential Equations</title>
      <link>/2023/12/29/making-a-python-library-to-solve-differential-equations/</link>
      <pubDate>Fri, 29 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>/2023/12/29/making-a-python-library-to-solve-differential-equations/</guid>
      <description>After having the initial idea I wrote up in a previous post, I thought it was a good idea to turn it into a python library so that I can use it as part of my other projects.
It also gives me a chance to see numerically how well the new method works compared to the Euler method.
First Steps So in the last post I set out the method such that:</description>
    </item>
    
    <item>
      <title>Optimising the settings for the ODE solver</title>
      <link>/1/01/01/optimising-the-settings-for-the-ode-solver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/optimising-the-settings-for-the-ode-solver/</guid>
      <description>import numpy as np import math import matplotlib.pyplot as plt import numpy as np import mplcatppuccin import matplotlib as mpl import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D mpl.style.use(&amp;#34;macchiato&amp;#34;) def expanded_euler(dims, h): step_matrix = np.zeros((dims, dims)) for i in range(dims): for j in range(i, dims): # Is 1, and h at j-i =0, 1 respectively step_matrix[i, j] = h ** (j - i) / math.factorial(j - i) expanded_matrix = add_x_and_1(step_matrix, h) return expanded_matrix def add_x_and_1(original_matrix, h): new_size = len(original_matrix) + 2 new_matrix = np.</description>
    </item>
    
  </channel>
</rss>
