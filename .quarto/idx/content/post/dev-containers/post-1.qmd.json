{"title":"DIY Dev-Containers","markdown":{"yaml":{"title":"DIY Dev-Containers","author":"Alfie Chadwick","date":"2024-01-07","lastmod":"`r Sys.Date()`","tags":["Devops","Docker","Vim"],"code-links":[{"text":"GitHub","icon":"github","href":"https://github.com/Fonzzy1/dev-containers"}]},"headingText":"Why we use Dev-Containers","containsRefs":false,"markdown":"\n\nLike most developers, I spend an inordinate amount of time dealing with my local installations and dependencies. When working on multiple projects, it is not uncommon to encounter conflicting versions of dependencies, and while virtual environments and package managers like Node Package Manager help to mitigate this issue, they often fall short.\n\n\nA common solution to these issues is the use of 'dev-containers', which have mostly been popularized by VS Code as a way to have your dependencies exist exclusively inside a Docker container, and then attach an editor to it to make your changes. Sounds great, but unfortunately for me, I have years of using Vim keybindings built into my muscle memory, so there's little chance of me changing my editor. So instead, I thought, why not just rebuild the dev containers for Vim?\n\n# What I want\n\nSo let's quickly scope out this project. In my development containers, I want:\n\n 1. Isolated environments\n 2. Vim with my configuration built-in\n 3. Integration with common CLI tools\n 4. The ability to use Docker from inside the container\n 5. Secrets management (not having to re-authenticate all my tools every time I open up a container)\n 6. Transportability between various Unix machines\n \n# The Beginnings\n\nSo after taking a quick look around my system, I have come up with this initial Dockerfile for my development container:\n\n```Dockerfile\nFROM ubuntu as setter_upper\n\nARG DEBIAN_FRONTEND=noninteractive\nENV TZ=Australia/Melbourne\n# Enviroment Installs\nRUN apt-get update && apt-get install -y \\\n   curl git python3 python3-pip apt-transport-https \\\n   ca-certificates software-properties-common  libpq-dev \\\n   build-essential autoconf automake libtool\n\n#Install Docker\nRUN curl -fsSL https://get.docker.com -o install-docker.sh\nRUN sh install-docker.sh\n\n\n# Install GH CLI\nRUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \\\n&& chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \\\n&& echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \\\n&& apt update \\\n&& apt install gh -y\n\n# git\n#RUN gh auth setup-git\nrun git config --global user.name \"Fonzzy1\"\nrun git config --global user.email \"alfiechadwick@hotmail.com\"\n\n# Set the base work dir\nWORKDIR /src\n\n# Set the mount point as the safe dir\nRUN git config --global --add safe.directory /src\n\n# Vim Setup\nFROM setter_upper as vim\n\n# Enviroment Installs\nRUN apt-get update && apt-get install -y software-properties-common\nRUN add-apt-repository ppa:jonathonf/vim\nRUN apt-get update\n\n# Install the rest of the dependencies\nRUN apt-get install -y \\\n    tig \\\n    fzf \\\n    pkg-config \\\n    texlive \\\n    r-base \\\n    pandoc \\\n    texlive-latex-extra \\\n    libcurl4-openssl-dev \\\n    libssl-dev \\\n    libxml2-dev \\\n    libfontconfig1-dev \\\n    libharfbuzz-dev \\\n    libfribidi-dev \\\n    libfreetype6-dev \\\n    libpng-dev \\\n    libtiff5-dev \\\n    libjpeg-dev \\\n    r-cran-tidyverse \\\n    vim-gtk3\n\n#Install Ctags\nRUN curl -L https://github.com/thombashi/universal-ctags-installer/raw/master/universal_ctags_installer.sh | bash\n\n# Install node\nRUN set -uex\nRUN mkdir -p /etc/apt/keyrings\nRUN curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg\nRUN echo \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main\" |  tee /etc/apt/sources.list.d/nodesource.list\nRUN apt-get update && apt-get install nodejs -y;\n\n\n# Install the python packages\nRUN pip install black pipreqs pgcli awscli socli\n\n# Install npm packages\nRUN npm install --save-dev --global prettier\n\n# Download and Install Vim-Plug\nRUN curl -fLo /root/.vim/autoload/plug.vim --create-dirs \\\n    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n\n# Install ACT extention\nRUN mkdir -p /root/.local/share/gh/extensions/gh-act\nRUN curl -L -o /root/.local/share/gh/extensions/gh-act/gh-act \\\n    \"https://github.com/nektos/gh-act/releases/download/v0.2.57/linux-amd64\"\nRUN chmod +x /root/.local/share/gh/extensions/gh-act/gh-act\n\n\n# Install R packages, tidyvverse is installed with apt\nRUN R -e  \"install.packages('rmarkdown',  Ncpus = 6)\"\nRUN R -e  \"install.packages('reticulate',  Ncpus = 6)\"\nRUN R -e  \"install.packages('blogdown',  Ncpus = 6)\"\nRUN R -e  \"blogdown::install_hugo()\"\nRUN R -e  \"install.packages('readxl',  Ncpus = 6)\"\nRUN R -e  \"install.packages('knitr',  Ncpus = 6)\"\nRUN R -e  \"install.packages('tinytex',  Ncpus = 6)\"\nRUN R -e  \"install.packages('languageserver',  Ncpus = 6)\"\n\n# Bring in the vim config\nCOPY vim /root/.vim\n#Copy in the dotfiles\nCOPY dotfiles /root\n\n# Install Vim Plugins\nRUN vim +PlugInstall +qall\n\n# Install COC plugins\nRUN mkdir -p /root/.config/coc/extensions && \\\n    echo '{\"dependencies\":{}}' > /root/.config/coc/extensions/package.json && \\\n    grep 'let g:coc_global_extensions' /root/.vim/config/coc.vim | \\\n    sed \"s/.*\\[//; s/\\].*//; s/'//g; s/, /\\n/g\" | \\\n    while read -r extension; do \\\n        echo \"Installing coc extension: $extension\" && \\\n        cd /root/.config/coc/extensions && \\\n        npm install \"$extension\" --install-strategy=shallow --save; \\\n    done\n\nCMD vim\n```\n\nI won't bother explaining most of it since it's really just a heap of install statements, but here are some of the interesting parts:\n\n 1. I needed to add the WORKDIR to the list of safe directories for git since if I mount the file, the ownership will be wrong.\n 2. I needed to manually install the gh act extension as you can't do it normally without authenticating with a gh token, something I don't want to do in a public container.\n 3. Coc Extensions needed to be manually installed to prevent them from installing every time I started the container. Just calling `Vim +CocInstall` didn't work because it's an async process.\n\nSo at this point, I have the first three of my requirements done. Because I'm using Docker, I have an isolated environment every time I boot up the container. By copying over my Vim config files, I have my Vim config baked in, and with some of the commands in the Dockerfile, I am able to have it set up. Finally, by installing a heap of CLI tools, I am able to do most of my work from inside the Vim terminal.\n\n# Docker In Docker\n\nThe next thing to tick off the list is being able to run Docker commands from within the container. Although I have installed Docker, running any Docker command inside the container will say the daemon isn't running.\n\nI could put in a lot of work to give the container the ability to create its own containers, but that would be a real pain. Instead, I can simply mount the Docker daemon onto the container, so that running Docker commands inside the container will invoke the system Docker.\n\nTo accomplish this, I can execute the container using the following command:\n\n```bash\ndocker run -it -v /var/run/docker.sock:/var/run/docker.sock fonzzy1/vim\n```\n\n# Secrets Management\n\nThe next thing to implement is secrets management. I currently have all of these stored in config files in my home directory, which isn't best practice in a Docker container that I want to make public. Instead, I can put all my secrets in a .env file and reference them in the Docker container. This can be done using the --env-file flag when running my Docker container.\n\n# Portability\n\nThe final goal on my list is to make the container portable between my multiple machines. This is achieved through the use of Docker Hub, which will allow me to download the image from Docker Hub. The only other thing I need is to ensure that Docker is set up on the other machine. For this, I have written a quick script to handle the setup process.\n\n```bash\n#!/bin/bash\nset -e\n\n# Dot Progress Indicator\nprogress() {\n    local pid=$2 # PID of the process we're waiting for\n    local text=$1\n    local delay=2 # 2-second delay between dots\n    local dot=\".\"\n\n    printf \"%s:\" \"$text\"\n    while [ \"$(ps a | awk '{print $1}' | grep -w $pid)\" ]; do\n        printf \"%s\" \"$dot\"\n        sleep $delay\n    done\n    printf \" Done!\\n\"\n}\n\nprogress \"Updating package list\" $(sudo apt-get update > /dev/null 2>&1 & echo $!)\n\nprogress \"Installing Useful Packages\" $(sudo apt-get install -y curl > /dev/null 2>&1 & echo $!)\n\nprogress \"Fetching Docker Install Script\" $(curl -fsSL https://get.docker.com -o install-docker.sh > /dev/null 2>&1 & echo $!)\n\nprogress \"Installing Docker\" $(sudo sh install-docker.sh > /dev/null 2>&1 & echo $!)\n\nprogress \"Adding the current user to the Docker group\" $(sudo usermod -aG docker $USER > /dev/null 2>&1 & echo $!)\n\nprogress \"Pulling Image\" docker pull fonzzy1/vim\n\necho \"Setup complete!\"\n```\n\n# Wrapping it up\n\nMy so now I have my dev containers running, my only gripe is the stupidly long docker commands that I need to type out to get it running, such as:\n\n```sh\ncurrent_dir=\"$(pwd)\"\ndir_name=\"$(basename \"$current_dir\")\"\n\ndocker run -it \\\n  --env-file ~/.env \\\n  --net=host \\\n  --rm \\\n  -v \"$current_dir:/$(dir_name)\" \\\n  -w \"/$dir_name\" \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  fonzzy1/vim \\\n  /bin/bash -c \"gh auth setup-git; git config --global --add safe.directory /$dir_name; vim\"\n```\n\nSo I decided to make this into a little Python script that allows me to quickly run these commands. I also added an integration with `gh` that lets me clone repos in order to edit them on the fly.\n\n```{python}\n#| eval: false\n\n#!/bin/python3\nimport subprocess\nimport argparse\nimport os\n\n\ndef run_local(args):\n    \"\"\"\n    Runs a command in a Docker container with the current directory mounted.\n\n    Args:\n        args (argparse.Namespace): The command-line arguments.\n\n    Returns:\n        None\n    \"\"\"\n    current_dir = subprocess.run([\"pwd\"], capture_output=True, text=True).stdout.strip()\n    dir_name = current_dir.split(\"/\")[-1]  # Get the name of the current directory\n\n    subprocess.run(\n        [\n            \"docker\",\n            \"run\",\n            \"-it\",\n            \"--env-file\",\n            os.path.expanduser(\"~/.env\"),\n            \"--net=host\",\n            \"--rm\",\n            \"-v\",\n            f\"{current_dir}:/{dir_name}\",  # Mount to a directory with the same name\n            \"-w\",\n            f\"/{dir_name}\",  # Set the working directory\n            \"-v\",\n            \"/var/run/docker.sock:/var/run/docker.sock\",\n            \"fonzzy1/vim\",\n            \"/bin/bash\",\n            \"-c\",\n            f\"gh auth setup-git; git config --global --add safe.directory /{dir_name}; vim\",\n        ]\n    )\n\n\ndef run_gh(args):\n    \"\"\"\n    Runs a command for cloning a GitHub repository in a Docker container.\n\n    Args:\n        args (argparse.Namespace): The command-line arguments.\n\n    Returns:\n        None\n    \"\"\"\n    name = args.repo.replace(\"/\", \"-\")\n    repo = args.repo.split(\"/\")[-1] if \"/\" in args.repo else args.repo\n    command = f\"gh auth setup-git; gh repo clone {args.repo} /{repo}; \"\n\n    # Additional git command based on input parameters\n    if args.branch:\n        command += f\"git switch {args.branch}; \"\n    elif args.pullrequest:\n        command += f\"gh pr checkout {args.pullrequest}; \"\n    elif args.checkout:\n        command += f\"git checkout -b {args.checkout}; git push --set-upstream origin {args.checkout}; \"\n\n    # Update submodules if any\n    command += \"git submodule update --init; vim; \"\n\n    # Check for unpushed or uncommitted changes before exiting Vim\n    check_changes_command = ' \\\n        CHANGES=$(git status --porcelain); \\\n        UPSTREAM_CHANGES=$(git cherry -v); \\\n        if [ -n \"$CHANGES\" ] || [ -n \"$UPSTREAM_CHANGES\" ]; then \\\n            vim -c \\':G | only\\'; \\\n        fi'\n\n    # Final combined command\n    final_command = command + check_changes_command\n\n    subprocess.run(\n        [\n            \"docker\",\n            \"run\",\n            \"-it\",\n            \"--env-file\",\n            os.path.expanduser(\"~/.env\"),\n            \"--name\",\n            name,\n            \"--net=host\",\n            \"--rm\",\n            \"-w\",\n            f\"/{repo}\",\n            \"-v\",\n            \"/var/run/docker.sock:/var/run/docker.sock\",\n            \"fonzzy1/vim\",\n            \"/bin/bash\",\n            \"-c\",\n            final_command,\n        ]\n    )\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(title=\"commands\", dest=\"command\")\n\n    local_parser = subparsers.add_parser(\n        \"local\", help=\"Run command for a container with local directory\"\n    )\n    local_parser.set_defaults(func=run_local)\n\n    gh_parser = subparsers.add_parser(\"gh\", help=\"Run command for cloning a repo\")\n    gh_parser.add_argument(\"repo\", help=\"Specify the repository for cloning\")\n    gh_parser.set_defaults(func=run_gh)\n    gh_parser.add_argument(\"-b\", \"--branch\", help=\"The branch to checkout\")\n    gh_parser.add_argument(\n        \"-p\", \"--pullrequest\", help=\"The pull request number to checkout\"\n    )\n    gh_parser.add_argument(\"-c\", \"--checkout\", help=\"Checkout a new branch from main\")\n\n    args = parser.parse_args()\n    args.func(args)\n```\n","srcMarkdownNoYaml":"\n\nLike most developers, I spend an inordinate amount of time dealing with my local installations and dependencies. When working on multiple projects, it is not uncommon to encounter conflicting versions of dependencies, and while virtual environments and package managers like Node Package Manager help to mitigate this issue, they often fall short.\n\n# Why we use Dev-Containers\n\nA common solution to these issues is the use of 'dev-containers', which have mostly been popularized by VS Code as a way to have your dependencies exist exclusively inside a Docker container, and then attach an editor to it to make your changes. Sounds great, but unfortunately for me, I have years of using Vim keybindings built into my muscle memory, so there's little chance of me changing my editor. So instead, I thought, why not just rebuild the dev containers for Vim?\n\n# What I want\n\nSo let's quickly scope out this project. In my development containers, I want:\n\n 1. Isolated environments\n 2. Vim with my configuration built-in\n 3. Integration with common CLI tools\n 4. The ability to use Docker from inside the container\n 5. Secrets management (not having to re-authenticate all my tools every time I open up a container)\n 6. Transportability between various Unix machines\n \n# The Beginnings\n\nSo after taking a quick look around my system, I have come up with this initial Dockerfile for my development container:\n\n```Dockerfile\nFROM ubuntu as setter_upper\n\nARG DEBIAN_FRONTEND=noninteractive\nENV TZ=Australia/Melbourne\n# Enviroment Installs\nRUN apt-get update && apt-get install -y \\\n   curl git python3 python3-pip apt-transport-https \\\n   ca-certificates software-properties-common  libpq-dev \\\n   build-essential autoconf automake libtool\n\n#Install Docker\nRUN curl -fsSL https://get.docker.com -o install-docker.sh\nRUN sh install-docker.sh\n\n\n# Install GH CLI\nRUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \\\n&& chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \\\n&& echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \\\n&& apt update \\\n&& apt install gh -y\n\n# git\n#RUN gh auth setup-git\nrun git config --global user.name \"Fonzzy1\"\nrun git config --global user.email \"alfiechadwick@hotmail.com\"\n\n# Set the base work dir\nWORKDIR /src\n\n# Set the mount point as the safe dir\nRUN git config --global --add safe.directory /src\n\n# Vim Setup\nFROM setter_upper as vim\n\n# Enviroment Installs\nRUN apt-get update && apt-get install -y software-properties-common\nRUN add-apt-repository ppa:jonathonf/vim\nRUN apt-get update\n\n# Install the rest of the dependencies\nRUN apt-get install -y \\\n    tig \\\n    fzf \\\n    pkg-config \\\n    texlive \\\n    r-base \\\n    pandoc \\\n    texlive-latex-extra \\\n    libcurl4-openssl-dev \\\n    libssl-dev \\\n    libxml2-dev \\\n    libfontconfig1-dev \\\n    libharfbuzz-dev \\\n    libfribidi-dev \\\n    libfreetype6-dev \\\n    libpng-dev \\\n    libtiff5-dev \\\n    libjpeg-dev \\\n    r-cran-tidyverse \\\n    vim-gtk3\n\n#Install Ctags\nRUN curl -L https://github.com/thombashi/universal-ctags-installer/raw/master/universal_ctags_installer.sh | bash\n\n# Install node\nRUN set -uex\nRUN mkdir -p /etc/apt/keyrings\nRUN curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg\nRUN echo \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main\" |  tee /etc/apt/sources.list.d/nodesource.list\nRUN apt-get update && apt-get install nodejs -y;\n\n\n# Install the python packages\nRUN pip install black pipreqs pgcli awscli socli\n\n# Install npm packages\nRUN npm install --save-dev --global prettier\n\n# Download and Install Vim-Plug\nRUN curl -fLo /root/.vim/autoload/plug.vim --create-dirs \\\n    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n\n# Install ACT extention\nRUN mkdir -p /root/.local/share/gh/extensions/gh-act\nRUN curl -L -o /root/.local/share/gh/extensions/gh-act/gh-act \\\n    \"https://github.com/nektos/gh-act/releases/download/v0.2.57/linux-amd64\"\nRUN chmod +x /root/.local/share/gh/extensions/gh-act/gh-act\n\n\n# Install R packages, tidyvverse is installed with apt\nRUN R -e  \"install.packages('rmarkdown',  Ncpus = 6)\"\nRUN R -e  \"install.packages('reticulate',  Ncpus = 6)\"\nRUN R -e  \"install.packages('blogdown',  Ncpus = 6)\"\nRUN R -e  \"blogdown::install_hugo()\"\nRUN R -e  \"install.packages('readxl',  Ncpus = 6)\"\nRUN R -e  \"install.packages('knitr',  Ncpus = 6)\"\nRUN R -e  \"install.packages('tinytex',  Ncpus = 6)\"\nRUN R -e  \"install.packages('languageserver',  Ncpus = 6)\"\n\n# Bring in the vim config\nCOPY vim /root/.vim\n#Copy in the dotfiles\nCOPY dotfiles /root\n\n# Install Vim Plugins\nRUN vim +PlugInstall +qall\n\n# Install COC plugins\nRUN mkdir -p /root/.config/coc/extensions && \\\n    echo '{\"dependencies\":{}}' > /root/.config/coc/extensions/package.json && \\\n    grep 'let g:coc_global_extensions' /root/.vim/config/coc.vim | \\\n    sed \"s/.*\\[//; s/\\].*//; s/'//g; s/, /\\n/g\" | \\\n    while read -r extension; do \\\n        echo \"Installing coc extension: $extension\" && \\\n        cd /root/.config/coc/extensions && \\\n        npm install \"$extension\" --install-strategy=shallow --save; \\\n    done\n\nCMD vim\n```\n\nI won't bother explaining most of it since it's really just a heap of install statements, but here are some of the interesting parts:\n\n 1. I needed to add the WORKDIR to the list of safe directories for git since if I mount the file, the ownership will be wrong.\n 2. I needed to manually install the gh act extension as you can't do it normally without authenticating with a gh token, something I don't want to do in a public container.\n 3. Coc Extensions needed to be manually installed to prevent them from installing every time I started the container. Just calling `Vim +CocInstall` didn't work because it's an async process.\n\nSo at this point, I have the first three of my requirements done. Because I'm using Docker, I have an isolated environment every time I boot up the container. By copying over my Vim config files, I have my Vim config baked in, and with some of the commands in the Dockerfile, I am able to have it set up. Finally, by installing a heap of CLI tools, I am able to do most of my work from inside the Vim terminal.\n\n# Docker In Docker\n\nThe next thing to tick off the list is being able to run Docker commands from within the container. Although I have installed Docker, running any Docker command inside the container will say the daemon isn't running.\n\nI could put in a lot of work to give the container the ability to create its own containers, but that would be a real pain. Instead, I can simply mount the Docker daemon onto the container, so that running Docker commands inside the container will invoke the system Docker.\n\nTo accomplish this, I can execute the container using the following command:\n\n```bash\ndocker run -it -v /var/run/docker.sock:/var/run/docker.sock fonzzy1/vim\n```\n\n# Secrets Management\n\nThe next thing to implement is secrets management. I currently have all of these stored in config files in my home directory, which isn't best practice in a Docker container that I want to make public. Instead, I can put all my secrets in a .env file and reference them in the Docker container. This can be done using the --env-file flag when running my Docker container.\n\n# Portability\n\nThe final goal on my list is to make the container portable between my multiple machines. This is achieved through the use of Docker Hub, which will allow me to download the image from Docker Hub. The only other thing I need is to ensure that Docker is set up on the other machine. For this, I have written a quick script to handle the setup process.\n\n```bash\n#!/bin/bash\nset -e\n\n# Dot Progress Indicator\nprogress() {\n    local pid=$2 # PID of the process we're waiting for\n    local text=$1\n    local delay=2 # 2-second delay between dots\n    local dot=\".\"\n\n    printf \"%s:\" \"$text\"\n    while [ \"$(ps a | awk '{print $1}' | grep -w $pid)\" ]; do\n        printf \"%s\" \"$dot\"\n        sleep $delay\n    done\n    printf \" Done!\\n\"\n}\n\nprogress \"Updating package list\" $(sudo apt-get update > /dev/null 2>&1 & echo $!)\n\nprogress \"Installing Useful Packages\" $(sudo apt-get install -y curl > /dev/null 2>&1 & echo $!)\n\nprogress \"Fetching Docker Install Script\" $(curl -fsSL https://get.docker.com -o install-docker.sh > /dev/null 2>&1 & echo $!)\n\nprogress \"Installing Docker\" $(sudo sh install-docker.sh > /dev/null 2>&1 & echo $!)\n\nprogress \"Adding the current user to the Docker group\" $(sudo usermod -aG docker $USER > /dev/null 2>&1 & echo $!)\n\nprogress \"Pulling Image\" docker pull fonzzy1/vim\n\necho \"Setup complete!\"\n```\n\n# Wrapping it up\n\nMy so now I have my dev containers running, my only gripe is the stupidly long docker commands that I need to type out to get it running, such as:\n\n```sh\ncurrent_dir=\"$(pwd)\"\ndir_name=\"$(basename \"$current_dir\")\"\n\ndocker run -it \\\n  --env-file ~/.env \\\n  --net=host \\\n  --rm \\\n  -v \"$current_dir:/$(dir_name)\" \\\n  -w \"/$dir_name\" \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  fonzzy1/vim \\\n  /bin/bash -c \"gh auth setup-git; git config --global --add safe.directory /$dir_name; vim\"\n```\n\nSo I decided to make this into a little Python script that allows me to quickly run these commands. I also added an integration with `gh` that lets me clone repos in order to edit them on the fly.\n\n```{python}\n#| eval: false\n\n#!/bin/python3\nimport subprocess\nimport argparse\nimport os\n\n\ndef run_local(args):\n    \"\"\"\n    Runs a command in a Docker container with the current directory mounted.\n\n    Args:\n        args (argparse.Namespace): The command-line arguments.\n\n    Returns:\n        None\n    \"\"\"\n    current_dir = subprocess.run([\"pwd\"], capture_output=True, text=True).stdout.strip()\n    dir_name = current_dir.split(\"/\")[-1]  # Get the name of the current directory\n\n    subprocess.run(\n        [\n            \"docker\",\n            \"run\",\n            \"-it\",\n            \"--env-file\",\n            os.path.expanduser(\"~/.env\"),\n            \"--net=host\",\n            \"--rm\",\n            \"-v\",\n            f\"{current_dir}:/{dir_name}\",  # Mount to a directory with the same name\n            \"-w\",\n            f\"/{dir_name}\",  # Set the working directory\n            \"-v\",\n            \"/var/run/docker.sock:/var/run/docker.sock\",\n            \"fonzzy1/vim\",\n            \"/bin/bash\",\n            \"-c\",\n            f\"gh auth setup-git; git config --global --add safe.directory /{dir_name}; vim\",\n        ]\n    )\n\n\ndef run_gh(args):\n    \"\"\"\n    Runs a command for cloning a GitHub repository in a Docker container.\n\n    Args:\n        args (argparse.Namespace): The command-line arguments.\n\n    Returns:\n        None\n    \"\"\"\n    name = args.repo.replace(\"/\", \"-\")\n    repo = args.repo.split(\"/\")[-1] if \"/\" in args.repo else args.repo\n    command = f\"gh auth setup-git; gh repo clone {args.repo} /{repo}; \"\n\n    # Additional git command based on input parameters\n    if args.branch:\n        command += f\"git switch {args.branch}; \"\n    elif args.pullrequest:\n        command += f\"gh pr checkout {args.pullrequest}; \"\n    elif args.checkout:\n        command += f\"git checkout -b {args.checkout}; git push --set-upstream origin {args.checkout}; \"\n\n    # Update submodules if any\n    command += \"git submodule update --init; vim; \"\n\n    # Check for unpushed or uncommitted changes before exiting Vim\n    check_changes_command = ' \\\n        CHANGES=$(git status --porcelain); \\\n        UPSTREAM_CHANGES=$(git cherry -v); \\\n        if [ -n \"$CHANGES\" ] || [ -n \"$UPSTREAM_CHANGES\" ]; then \\\n            vim -c \\':G | only\\'; \\\n        fi'\n\n    # Final combined command\n    final_command = command + check_changes_command\n\n    subprocess.run(\n        [\n            \"docker\",\n            \"run\",\n            \"-it\",\n            \"--env-file\",\n            os.path.expanduser(\"~/.env\"),\n            \"--name\",\n            name,\n            \"--net=host\",\n            \"--rm\",\n            \"-w\",\n            f\"/{repo}\",\n            \"-v\",\n            \"/var/run/docker.sock:/var/run/docker.sock\",\n            \"fonzzy1/vim\",\n            \"/bin/bash\",\n            \"-c\",\n            final_command,\n        ]\n    )\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(title=\"commands\", dest=\"command\")\n\n    local_parser = subparsers.add_parser(\n        \"local\", help=\"Run command for a container with local directory\"\n    )\n    local_parser.set_defaults(func=run_local)\n\n    gh_parser = subparsers.add_parser(\"gh\", help=\"Run command for cloning a repo\")\n    gh_parser.add_argument(\"repo\", help=\"Specify the repository for cloning\")\n    gh_parser.set_defaults(func=run_gh)\n    gh_parser.add_argument(\"-b\", \"--branch\", help=\"The branch to checkout\")\n    gh_parser.add_argument(\n        \"-p\", \"--pullrequest\", help=\"The pull request number to checkout\"\n    )\n    gh_parser.add_argument(\"-c\", \"--checkout\", help=\"Checkout a new branch from main\")\n\n    args = parser.parse_args()\n    args.func(args)\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"highlight-style":"../../../themes/code_block.css","output-file":"post-1.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.43","theme":"../../../themes/theme.scss","title":"DIY Dev-Containers","author":"Alfie Chadwick","date":"2024-01-07","lastmod":"`r Sys.Date()`","tags":["Devops","Docker","Vim"],"code-links":[{"text":"GitHub","icon":"github","href":"https://github.com/Fonzzy1/dev-containers"}]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}