{
  "hash": "34c92e39ca7c2aa1f229dc3c896280ce",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Taylor Series approximations of ODEs: The Algorithm\"\nauthor: Alfie Chadwick\ndate: 2023-12-16T00:00:00+00:00\noutput:\n  blogdown::html_page:\n    toc: true\n---\n\n::: {.cell}\n\n```{.python .cell-code}\nimport math\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndef c(a, cond, n):\n    if n == 0:\n        return cond;\n    if n == 1:\n        return a * math.sin(cond)\n    return cond\n\n\nint_x = 0\nint_y = 2\n# 2\ndepth = 2\nstep = 0.001\nd_min = -3\nd_max = 3\n\n# 2.1 Set up output space\nd_min_scale = int(round(d_min / step))\nd_max_scale = int(round(d_max / step))\nls_points = list(range(d_min_scale, d_max_scale))\nls_points = list(map(lambda x: x * step, ls_points))\ndf = pd.DataFrame(ls_points, columns=['Point'])\ndf['Value'] = 0\ndf.set_index('Point', inplace=True)\n\n# 2.2 Set up n list\nls_n = list(range(0, depth))\n\n\n# 3\ndef point(step, vector, ls_n, derivative):\n    ls_point_term = []\n    for n in ls_n:\n        coefficient = c(vector, n + derivative)\n        point = coefficient / math.factorial(n) * step ** n\n        ls_point_term.append(point)\n    point_value = sum(ls_point_term)\n    return point_value\n\n\na = int_x\ncond = int_y\nwhile a <= d_max:\n    point_value = point(step, a, cond, ls_n)\n    location = df.index.get_loc(a, method='nearest')\n    df.iloc[location, 0] = point_value\n    cond = point_value\n    a += step\n\na = int_x\ncond = int_y\n\nwhile a >= d_min:\n    point_value = point(-step, a, cond, ls_n)\n    location = df.index.get_loc(a, method='nearest')\n    df.iloc[location, 0] = point_value\n    cond = point_value\n    a -= step\n\ndf.plot()\nplt.show()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport math\nimport numpy as np\nimport itertools as it\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n## Set parameters for approximation\nh = 0.001\nxmin = -math.pi * 2\nxmax = math.pi * 2\n\n## Int vector such that [h,x,f(x),f'(x) .... f^n(x)]\nint_list = np.array([h, math.pi / 2, -5 / 3, np.NAN, 15])\nint_vect = int_list.reshape(len(int_list), 1)\n\n## Condition Vector\ncondition_vect = np.array([[h, 0, np.NAN, 5, np.NAN],\n                          [h, 2, 0, np.NAN, np.NAN],\n                          [h, 0, np.NAN, 0, np.NAN]])\nsearch_min = 1.43\nsearch_max = 1.45\nsearch_step = 0.01\n\n## Find Permutaions\nsearch_permutations = [ *it.permutations(np.arange(search_min, search_max, search_step), np.count_nonzero(np.isnan(int_vect)))]\nnan_location = np.argwhere(np.isnan(int_vect))\nnan_location = nan_location[nan_location != 0]\nposs_int_vect = np.zeros((len(search_permutations), len(int_vect)))\nfor i in range(0, len(poss_int_vect)):\n    poss_int_vect[i] = int_vect.T\n    poss_int_vect[i][nan_location] = search_permutations[i]\n\n## Set up matrix for step definition\nstep_matrix_pos = np.identity(len(int_vect))\nstep_matrix_neg = np.identity(len(int_vect))\n\n## Set up x stepping system\nstep_matrix_pos[1][0] = 1\nstep_matrix_neg[1][0] = -1\n\n## Set up taylor seies h values\nfor i in range(2, len(step_matrix_pos)):\n    for j in range(i, len(step_matrix_pos)):\n        step_matrix_pos[i][j] = h ** (j - i) / math.factorial(j - i)\n\n## Set up taylor seies h/n! values\nfor i in range(2, len(step_matrix_neg)):\n    for j in range(i, len(step_matrix_neg)):\n        step_matrix_neg[i][j] = ((-h) ** (j - i)) / math.factorial(j - i)\n\n\n## Swap rows of step_matrix to represent linear ODE\ndef linear_step_converion(matrix):\n    matrix[4] = -9 * matrix[2]\n    return matrix\n\n\nstep_matrix_pos = linear_step_converion(step_matrix_pos)\nstep_matrix_neg = linear_step_converion((step_matrix_neg))\n\n\n## Create adjusting Function for non linear ODE\ndef adjustment(vector):\n    vector[4] = -9 * vector[2] + math.cos(vector[1])\n    return vector\n\n\n## Run Simulation for all permutations, returning the distance from the condition\n\nls_distance = []\nfor int_vect in poss_int_vect:\n    ## Create Output Space\n    x_list = np.arange(xmin, xmax, h)\n\n    output = np.zeros((len(x_list), len(int_vect)))\n    output[0:len(output), 0] = h\n    output[0:len(output), 1] = x_list\n    ## Set up stepping process\n\n    ## Do the positive steps first\n    vect = int_vect.copy()\n    while vect[1] <= xmax + h:\n        index = int((vect[1] - xmin) / h)\n        try:\n            output[index] = vect.T\n        except IndexError:\n            pass\n        vect = np.matmul(step_matrix_pos, vect)\n        vect = adjustment(vect)\n\n    ## Do the negative steps next\n    vect = int_vect.copy()\n    while vect[1] > xmin:\n        index = int((vect[1] - xmin) / h)\n        try:\n            output[index] = vect.T\n        except IndexError:\n            pass\n        vect = np.matmul(step_matrix_neg, vect)\n        vect = adjustment(vect)\n\n    ## Check condition\n    dist_ls = []\n    for vect in condition_vect:\n        index = int(math.floor((vect[1] - xmin) / h))\n        dist = np.linalg.norm(np.nan_to_num(output[index] - vect))\n        dist_ls.append(dist)\n    dist_sum = sum(dist_ls)\n    ls_distance.append(dist_sum)\n\ndf_results = pd.DataFrame(poss_int_vect)\ndf_results['dist'] = ls_distance\n\nbest_index = df_results[['dist']].idxmin()\n\nbest_int_vect = poss_int_vect[best_index]\n\n## Create Output Space\nx_list = np.arange(xmin, xmax, h)\n\noutput = np.zeros((len(x_list), len(int_vect)))\noutput[0:len(output), 0] = h\noutput[0:len(output), 1] = x_list\n## Set up stepping process\n\n## Do the positive steps first\nvect = best_int_vect.T.copy()\nwhile vect[1] <= xmax + h:\n    index = int((vect[1] - xmin) / h)\n    try:\n        output[index] = vect.T\n    except IndexError:\n        pass\n    vect = np.matmul(step_matrix_pos, vect)\n    vect = adjustment(vect)\n\n## Do the negative steps next\nvect = best_int_vect.T.copy()\nwhile vect[1] > xmin:\n    index = int((vect[1] - xmin) / h)\n    try:\n        output[index] = vect.T\n    except IndexError:\n        pass\n    vect = np.matmul(step_matrix_neg, vect)\n    vect = adjustment(vect)\n\ndist_ls = []\nfor vect in condition_vect:\n    index = int(math.floor((vect[1] - xmin) / h))\n    dist = np.linalg.norm(np.nan_to_num(output[index] - vect))\n    dist_ls.append(dist)\ndist_sum = sum(dist_ls)\n\nplt.plot(output.T[1], output.T[2])\nplt.title(str(best_int_vect))\nplt.show()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport math\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\n## Varibles to set to define simultaion\ndef f(x):  ## Only for plotting against estimation\n    return\n\ndef c(n):  ## C vaules\n    if n == 0:\n        return 2\n    if n == 1:\n        return 3\n    if n == 2:\n        return 3 + math.sin(2) + 3\n\n\na = 0  ## Around what point is this estimation\nstep = 0.1  ## step Size for points\nwidth = 10  ## Range of Estimation\ndepth = 3  ## Max size of n\n\n## Create List of points\nwidth_mult = 1 / step\nnew_witdh = int(round(width * width_mult))\nls_points = range(-new_witdh, new_witdh)\nls_points = list(map(lambda x: x * step, ls_points))\n\n## Create List n\nls_n = list(range(0, depth))\n\n## Create List of coefficients\nls_c = list(map(lambda x: c(x), ls_n))\n\n\ndef point_term(x, a, cond, n):\n    point = cond / math.factorial(n) * (x - a) ** n\n    return point\n\n\ndf = pd.DataFrame(ls_points, columns=['Point'])\n\n## Create A datframe with each collumn being the vaules for a single n\nfor n in ls_n:\n    df[n] = df['Point'].apply(lambda x: point_term(x, a, ls_c[n], n))\n\ndf.set_index('Point', inplace=True)\n\n## Sum all the estimations\ndf_estimation = df.sum(axis=1)\n\ndf_estimation.plot(label='Estimation')\n\nif f(a):\n    plt.plot(ls_points, list(map(lambda x: f(x), ls_points)), label='Actual', linestyle='dashed', )\nplt.legend()\n\nplt.show()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}