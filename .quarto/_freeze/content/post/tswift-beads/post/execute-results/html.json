{
  "hash": "3605102fa9ecc905487fc3ca9bccfe12",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Maximising the Number of Friendship Bracelets for the Taylor Swift Concert'\nauthor: 'Alfie Chadwick'\ndate: '2024-02-7'\nlastmod: \"`r Sys.Date()`\"\ntags: ['Python']\n---\n\n\n\nWith Taylor Swift coming to Melbourne next week, my house has started its prep for the concert. An important part of that preparation is making friendship bracelets to trade at the concert. So we headed down to Spotlight and grabbed ourselves a couple of bags of beads to make the bracelets. However, when we opened them up, we found that the distribution of letters was all over the place. We had a heap of useless Zs while also having almost no vowels. Instead of driving back to Spotlight, I decided to see if I could make enough friendship bracelets from the letters we already had, while also being a bit clever about which songs we were going to make friendship bracelets for.\n\n![The beads after I spent 15 minutes organinsing them](pic.jpg)\n\n## First Try\n\nI set out to make an algorithm to determine the best set of song titles we could use. I want to assign each song title a cost, and then make the song with the lowest cost the bracelets. I can keep doing this until I can't make any more bracelets. To determine the cost of a song title, I just summed the costs of its letters. The cost of the letters was the number of occurrences it had in the list of songs divided by the number of beads I had remaining for that letter.\n\n::: {#d58bf183 .cell execution_count=2}\n``` {.python .cell-code}\nfrom collections import defaultdict\nimport re\n\ndef count_chars_in_list(list_of_strings):\n    char_counts = defaultdict(int)\n    \n    for string in list_of_strings:\n        for char in string:\n            char_counts[char] += 1\n    \n    return dict(char_counts)\n\n\ndef bracelets(song_list, bead_dict):\n\n    # W and M is interchangeable\n    cleaned_dict = {\n        re.sub(r'\\W+', '', i.lower()).replace(\"w\",\"m\"): i \n        for i in song_list\n    }\n\n    # dict of letter usage totals\n    letter_popularity = count_chars_in_list(cleaned_dict.keys())\n\n    # will run until a break is called\n    while True:\n        cost_dict = {}\n        # Determine the cost of all the songs\n        for song in cleaned_dict.keys():\n            song_cost = 0\n            flag = False\n            for char in song: \n                # Assign the cost by adding up beads value\n                if char in bead_dict:\n                    # If no beads for that letter are left then that word cant be formed\n                    if bead_dict[char] == 0:\n                        flag = True\n                        break\n                    else:\n                        song_cost += letter_popularity[char]/bead_dict[char]\n            if not flag:\n                cost_dict[song] = song_cost\n\n        # Finish loop if no more songs can be made\n        if len(cost_dict) ==0:\n            break\n        # Find the cheapest song\n        cost_dict_sorted = list(dict(sorted(cost_dict.items(), key=lambda item: item[1])).keys())\n        cheapeast_song = cost_dict_sorted[0]\n        print(cleaned_dict[cheapeast_song])\n        # Remove the cheapest songs beads from the bead counts\n        for char in cheapeast_song:\n            bead_dict[char] -= 1\nbracelets(song_list.copy(), bead_dict.copy())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nivy\nivy\nivy\nivy\nivy\nivy\nivy\nivy\nivy\nRun\nSlut\nME\nSlut\nivy\nME\nRun\nhoax\nSlut\nME\nhoax\nGlitch\nRun\nivy\nME\nhoax\nGlitch\nhoax\nME\nGlitch\nKarma\n```\n:::\n:::\n\n\nThis was pretty good, but let's remove the repeated songs because I don't want to have 10 bracelets with Ivy on them. We can do this by adding `del cleaned_dict[cheapest_song]` to the end of the loop.\n\n::: {#184b56a4 .cell execution_count=3}\n``` {.python .cell-code}\ndef bracelets(song_list, bead_dict):\n    cleaned_dict = {re.sub(r'\\W+', '', i.lower()).replace(\"w\",\"m\"): i for i in song_list}\n    letter_popularity = count_chars_in_list(cleaned_dict.keys())\n\n    while True:\n        cost_dict = {}\n        for song in cleaned_dict.keys():\n            song_cost = 0\n            flag = False\n            for char in song: \n                # Assign the cost by adding up beads value\n                if char in bead_dict:\n                    if bead_dict[char] == 0:\n                        flag = True\n                        break\n                    else:\n                        song_cost += letter_popularity[char]/bead_dict[char]\n            if not flag:\n                cost_dict[song] = song_cost\n        if len(cost_dict) ==0:\n            break\n        cost_dict_sorted = list(dict(sorted(cost_dict.items(), key=lambda item: item[1])).keys())\n        cheapeast_song = cost_dict_sorted[0]\n        print(cleaned_dict[cheapeast_song])\n        for char in cheapeast_song:\n            bead_dict[char] -= 1\n        del cleaned_dict[cheapeast_song]\n\n\nbracelets(song_list.copy(), bead_dict.copy())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nivy\nRun\nSlut\nME\nGlitch\nhoax\nMine\nwillow\nParis\naugust\nMidnights\nRed\nMean\nOurs\nDaylight\nInvisible\nLondon Boy\n```\n:::\n:::\n\n\n## Getting Picky\n\nI presented this list to my housemates only to get the response, 'I hate ME!' So, I did some cleaning to remove some of the so-called 'banned songs'. It also turns out that I'm not allowed to listen to \"London Boy\" anymore since the guy it is about is canceled or something? Not sure, but now we have a new list that doesn't include the songs we don't want.\n\n::: {#f6e23039 .cell execution_count=4}\n``` {.python .cell-code}\nbannded_songs = [\n\"Invisible\",\n\"London Boy\",\n\"ME\",\n'hoax',\n'run'\n]\n\nbracelets([song for song in song_list if song not in bannded_songs], bead_dict.copy())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nivy\nRun\nSlut\nGlitch\nwillow\nMine\nParis\naugust\nMean\nOurs\nMidnights\nClean\nStyle\ngold rush\nDaylight\nLong Live\n```\n:::\n:::\n\n\n## A Final Go\n\nI tried showing this list, which received a better reception, but there were still a couple of non-negotiable songs that needed to be included. We also decided that the Qs and the Os look close enough to be interchangeable, so I changed the way we generate the cleaned dict to reflect that.\n\n::: {#00f93e2a .cell execution_count=5}\n``` {.python .cell-code}\ndef bracelets(song_list, bead_dict):\n    cleaned_dict = {re.sub(r'\\W+', '', i.lower()).replace(\"w\",\"m\").replace(\"q\",'o'): i for i in song_list}\n    letter_popularity = count_chars_in_list(cleaned_dict.keys())\n\n    while True:\n        cost_dict = {}\n        for song in cleaned_dict.keys():\n            song_cost = 0\n            flag = False\n            for char in song: \n                # Assign the cost by adding up beads value\n                if char in bead_dict:\n                    if bead_dict[char] == 0:\n                        flag = True\n                        break\n                    else:\n                        song_cost += letter_popularity[char]/bead_dict[char]\n            if not flag:\n                cost_dict[song] = song_cost\n        if len(cost_dict) ==0:\n            break\n        cost_dict_sorted = list(dict(sorted(cost_dict.items(), key=lambda item: item[1])).keys())\n        cheapeast_song = cost_dict_sorted[0]\n        print(cleaned_dict[cheapeast_song])\n        for char in cheapeast_song:\n            bead_dict[char] -= 1\n        del cleaned_dict[cheapeast_song]\n```\n:::\n\n\n::: {#227579f3 .cell execution_count=6}\n``` {.python .cell-code}\n# Move all the Q beads to O\nbead_dict['o'] += bead_dict['q']\ndel bead_dict['q']\n\nrequired_songs = ['Delicate', 'Lover']\n    \nfor song in required_songs:\n    print(song)\n    for char in re.sub(r'\\W+', '', song.lower()).replace(\"w\",\"m\").replace(\"q\",'o'):\n        bead_dict[char] -= 1\n\nbracelets([song for song in song_list if song not in bannded_songs and song not in required_songs], bead_dict.copy())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDelicate\nLover\nivy\nwillow\nRun\nSlut\nGlitch\nOurs\nBad Blood\naugust\nMine\nParis\nMidnights\nLong Live\nLast Kiss\n```\n:::\n:::\n\n\nAnd there's a final list of 14 bracelets we can make with our current beads. Would it have been faster to drive back to Spotlight to buy more beads? Probably, but this was more fun.\n\n",
    "supporting": [
      "post_files"
    ],
    "filters": [],
    "includes": {}
  }
}