---
title: 'Maximising the Number of Friendship Bracelets for the Taylor Swift Concert'
author: 'Alfie Chadwick'
date: '2024-02-7'
lastmod: "`r Sys.Date()`"
tags: ['Python']
---

```{python setup, echo = FALSE}
import re 
song_list = [
"Tim McGraw",
"Marys Song",
"Our Song",
"Im Only Me When Im With You",
"Invisible",
"A Perfectly Good Heart",
"Last Christmas",
"Christmases When You Were Mine",
"Santa Baby",
"Silent Night",
"Christmas Must Be Something More",
"White Christmas",
"Jump Then Fall",
"Untouchable",
"Forever  Always",
"Come In With The Rain",
"Superstar",
"The Other Side Of The Door",
"Fearless",
"Fifteen",
"Love Story",
"Hey Stephen",
"White Horse",
"You Belong With Me",
"Breathe",
"Tell Me Why",
"Youre Not Sorry",
"The Way I Loved You",
"Forever and Always",
"The Best Day",
"Change",
"Mine",
"Sparks Fly",
"Back To December",
"Speak Now",
"Dear John",
"Mean",
"The Story Of Us",
"Never Grow Up",
"Enchanted",
"Better Than Revenge",
"Innocent",
"Haunted",
"Last Kiss",
"Long Live",
"Ours",
"If This Was A Movie",
"Superman",
"State Of Grace",
"Red",
"Treacherous",
"I Knew You Were Trouble",
"All Too Well",
"TwentyTwo",
"I Almost Do",
"We Are Never Ever Getting Back Together",
"Come Back Be Here",
"Girl At Home",
"Welcome To New York",
"Blank Space",
"Style",
"Out Of The Woods",
"All You Had To Do Was Stay",
"Shake It Off",
"I Wish You Would",
"Bad Blood",
"Wildest Dreams",
"How You Get The Girl",
"This Love",
"I Know Places",
"Clean",
"Wonderland",
"You Are In Love",
"New Romantics",
"Ready For It",
"End Game",
"I Did Something Bad",
"Dont Blame Me",
"Delicate",
"Look What You Made Me Do",
"So It Goe",
"Gorgeous",
"Getaway Car",
"King Of My Heart",
"Dancing With Our Hands Tied",
"Dress",
"This Is Why We Cant Have Nice Things",
"Call It What You Want",
"New Years Day",
"I Forgot That You Existed",
"Cruel Summer",
"Lover",
"The Man",
"The Archer",
"I Think He Knows",
"Miss Americana & The Heartbreak Prince",
"Paper Rings",
"Cornelia Street",
"Death By A Thousand Cuts",
"London Boy",
"Soon Youll Get Better",
"False God",
"You Need To Calm Down",
"Afterglow",
"ME",
"Its Nice To Have A Friend",
"Daylight",
"the one",
"cardigan",
"the last great american dynasty",
"exile",
"my tears ricochet",
"mirrorball",
"seven",
"august",
"this is me trying",
"illicit affairs",
"invisible string",
"mad woman",
"epiphany",
"betty",
"peace",
"hoax",
"the lakes",
"willow",
"champagne problems",
"gold rush",
"tis the damn season",
"tolerate it",
"no body no crime",
"happiness",
"dorothea",
"coney island",
"ivy",
"cowboy like me",
"long story short",
"marjorie",
"closure",
"evermore",
"right where you left me",
"its time to go",
"You All Over Me",
"Mr Perfectly Fine",
"We Were Happy",
"Thats When",
"Dont You",
"Bye Bye Baby",
"Message In A Bottle",
"I Bet You Think About Me",
"Forever Winter",
"Run",
"The Very First Night",
"All Too Well",
"Lavender Haze",
"Maroon",
"Anti-Hero",
"Snow On The Beach",
"Youre On Your Own Kid",
"Midnight Rain",
"Question",
"Vigilante Shit",
"Bejeweled",
"Labyrinth",
"Karma",
"Sweet Nothing",
"Mastermind",
"Hits Different",
"Bigger Than The Whole Sky",
"Paris",
"High Infidelity",
"Glitch",
"Wouldve Couldve Shouldve",
"Dear Reader",
"Electric Touch",
"When Emma Falls in Love",
"I Can See You",
"Castles Crumbling",
"Foolish One",
"Timeless",
"Slut",
"Say Dont Go",
"Now That We Dont Talk ",
"Suburban Legends",
"Is It Over Now",
"Sweeter Than Fiction",
"Red",
"Fearless",
"Midnights",
"Reputation",
"Lover",
"Folklore",
"Evermore",
"Red"]

bead_dict = {
    'a': 5,
    'b': 9,
    'c': 12,
    'd': 4,
    'e': 5,
    'f': 5,
    'g': 10,
    'h': 13,
    'i': 14,
    'j': 11,
    'k': 6,
    'l': 12,
    'm': 15,
    'n': 9,
    'o':4,
    'p': 12,
    'q': 9,
    'r': 4,
    's': 10,
    't': 6,
    'u': 6,
    'v': 11,
    'x': 6,
    'y': 11,
    'z': 17 }

```

With Taylor Swift coming to Melbourne next week, my house has started its prep for the concert. An important part of that preparation is making friendship bracelets to trade at the concert. So we headed down to Spotlight and grabbed ourselves a couple of bags of beads to make the bracelets. However, when we opened them up, we found that the distribution of letters was all over the place. We had a heap of useless Zs while also having almost no vowels. Instead of driving back to Spotlight, I decided to see if I could make enough friendship bracelets from the letters we already had, while also being a bit clever about which songs we were going to make friendship bracelets for.

![The beads after I spent 15 minutes organinsing them](/post/tswift-beads/pic.jpg)

## First Try

I set out to make an algorithm to determine the best set of song titles we could use. I want to assign each song title a cost, and then make the song with the lowest cost the bracelets. I can keep doing this until I can't make any more bracelets. To determine the cost of a song title, I just summed the costs of its letters. The cost of the letters was the number of occurrences it had in the list of songs divided by the number of beads I had remaining for that letter.

```{python try-one}
from collections import defaultdict
import re

def count_chars_in_list(list_of_strings):
    char_counts = defaultdict(int)
    
    for string in list_of_strings:
        for char in string:
            char_counts[char] += 1
    
    return dict(char_counts)


def bracelets(song_list, bead_dict):

    # W and M is interchangeable
    cleaned_dict = {
        re.sub(r'\W+', '', i.lower()).replace("w","m"): i 
        for i in song_list
    }

    # dict of letter usage totals
    letter_popularity = count_chars_in_list(cleaned_dict.keys())

    # will run until a break is called
    while True:
        cost_dict = {}
        # Determine the cost of all the songs
        for song in cleaned_dict.keys():
            song_cost = 0
            flag = False
            for char in song: 
                # Assign the cost by adding up beads value
                if char in bead_dict:
                    # If no beads for that letter are left then that word cant be formed
                    if bead_dict[char] == 0:
                        flag = True
                        break
                    else:
                        song_cost += letter_popularity[char]/bead_dict[char]
            if not flag:
                cost_dict[song] = song_cost

        # Finish loop if no more songs can be made
        if len(cost_dict) ==0:
            break
        # Find the cheapest song
        cost_dict_sorted = list(dict(sorted(cost_dict.items(), key=lambda item: item[1])).keys())
        cheapeast_song = cost_dict_sorted[0]
        print(cleaned_dict[cheapeast_song])
        # Remove the cheapest songs beads from the bead counts
        for char in cheapeast_song:
            bead_dict[char] -= 1
bracelets(song_list.copy(), bead_dict.copy())
```

This was pretty good, but let's remove the repeated songs because I don't want to have 10 bracelets with Ivy on them. We can do this by adding `del cleaned_dict[cheapest_song]` to the end of the loop.

```{python try-two, echo = FALSE}
def bracelets(song_list, bead_dict):
    cleaned_dict = {re.sub(r'\W+', '', i.lower()).replace("w","m"): i for i in song_list}
    letter_popularity = count_chars_in_list(cleaned_dict.keys())

    while True:
        cost_dict = {}
        for song in cleaned_dict.keys():
            song_cost = 0
            flag = False
            for char in song: 
                # Assign the cost by adding up beads value
                if char in bead_dict:
                    if bead_dict[char] == 0:
                        flag = True
                        break
                    else:
                        song_cost += letter_popularity[char]/bead_dict[char]
            if not flag:
                cost_dict[song] = song_cost
        if len(cost_dict) ==0:
            break
        cost_dict_sorted = list(dict(sorted(cost_dict.items(), key=lambda item: item[1])).keys())
        cheapeast_song = cost_dict_sorted[0]
        print(cleaned_dict[cheapeast_song])
        for char in cheapeast_song:
            bead_dict[char] -= 1
        del cleaned_dict[cheapeast_song]


bracelets(song_list.copy(), bead_dict.copy())
```

## Getting Picky

I presented this list to my housemates only to get the response, 'I hate ME!' So, I did some cleaning to remove some of the so-called 'banned songs'. It also turns out that I'm not allowed to listen to "London Boy" anymore since the guy it is about is canceled or something? Not sure, but now we have a new list that doesn't include the songs we don't want.

```{python bannded_songs}
bannded_songs = [
"Invisible",
"London Boy",
"ME",
'hoax',
'run'
]

bracelets([song for song in song_list if song not in bannded_songs], bead_dict.copy())
```

## A Final Go

I tried showing this list, which received a better reception, but there were still a couple of non-negotiable songs that needed to be included. We also decided that the Qs and the Os look close enough to be interchangeable, so I changed the way we generate the cleaned dict to reflect that.

```{python final-try, echo = FALSE}
def bracelets(song_list, bead_dict):
    cleaned_dict = {re.sub(r'\W+', '', i.lower()).replace("w","m").replace("q",'o'): i for i in song_list}
    letter_popularity = count_chars_in_list(cleaned_dict.keys())

    while True:
        cost_dict = {}
        for song in cleaned_dict.keys():
            song_cost = 0
            flag = False
            for char in song: 
                # Assign the cost by adding up beads value
                if char in bead_dict:
                    if bead_dict[char] == 0:
                        flag = True
                        break
                    else:
                        song_cost += letter_popularity[char]/bead_dict[char]
            if not flag:
                cost_dict[song] = song_cost
        if len(cost_dict) ==0:
            break
        cost_dict_sorted = list(dict(sorted(cost_dict.items(), key=lambda item: item[1])).keys())
        cheapeast_song = cost_dict_sorted[0]
        print(cleaned_dict[cheapeast_song])
        for char in cheapeast_song:
            bead_dict[char] -= 1
        del cleaned_dict[cheapeast_song]

```

```{python final_try_pretty}
# Move all the Q beads to O
bead_dict['o'] += bead_dict['q']
del bead_dict['q']

required_songs = ['Delicate', 'Lover']
    
for song in required_songs:
    print(song)
    for char in re.sub(r'\W+', '', song.lower()).replace("w","m").replace("q",'o'):
        bead_dict[char] -= 1

bracelets([song for song in song_list if song not in bannded_songs and song not in required_songs], bead_dict.copy())
```

And there's a final list of 14 bracelets we can make with our current beads. Would it have been faster to drive back to Spotlight to buy more beads? Probably, but this was more fun.
